// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_1d2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src_offset,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_offset
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
input  [3:0] src_offset;
output  [5:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
input  [3:0] dst_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_ce0;
reg dst_ce0;
reg dst_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] dct_coeff_table_address0;
reg    dct_coeff_table_ce0;
wire  signed [14:0] dct_coeff_table_q0;
reg   [3:0] n_reg_114;
reg   [31:0] tmp1_reg_125;
wire   [7:0] tmp_21_cast_fu_145_p1;
reg   [7:0] tmp_21_cast_reg_272;
wire   [7:0] tmp_23_cast_fu_157_p1;
reg   [7:0] tmp_23_cast_reg_277;
wire   [0:0] tmp_fu_161_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] k_1_fu_167_p2;
reg   [3:0] k_1_reg_286;
reg   [5:0] dst_addr_reg_291;
wire   [7:0] tmp_26_cast_fu_195_p1;
reg   [7:0] tmp_26_cast_reg_296;
wire   [0:0] tmp_11_fu_199_p2;
reg   [0:0] tmp_11_reg_301;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] n_1_fu_205_p2;
reg    ap_enable_reg_pp0_iter0;
wire  signed [31:0] grp_fu_264_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [3:0] k_reg_103;
wire    ap_CS_fsm_state5;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_24_cast_fu_182_p1;
wire   [63:0] tmp_27_cast_fu_220_p1;
wire   [63:0] tmp_28_cast_fu_230_p1;
wire   [6:0] tmp_s_fu_137_p3;
wire   [6:0] tmp_15_fu_149_p3;
wire   [7:0] tmp_cast_fu_173_p1;
wire   [7:0] tmp_16_fu_177_p2;
wire   [6:0] tmp_19_fu_187_p3;
wire   [7:0] tmp_15_cast_fu_211_p1;
wire   [7:0] tmp_20_fu_215_p2;
wire   [7:0] tmp_21_fu_225_p2;
wire   [28:0] tmp_2_fu_243_p1;
wire   [28:0] tmp_12_fu_247_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dct_1d2_dct_coeffbkb #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dct_coeff_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dct_coeff_table_address0),
    .ce0(dct_coeff_table_ce0),
    .q0(dct_coeff_table_q0)
);

dct_mac_muladd_15cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dct_mac_muladd_15cud_U1(
    .din0(dct_coeff_table_q0),
    .din1(src_q0),
    .din2(tmp1_reg_125),
    .dout(grp_fu_264_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_103 <= k_1_reg_286;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_103 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_11_fu_199_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_reg_114 <= n_1_fu_205_p2;
    end else if (((tmp_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        n_reg_114 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_11_reg_301 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        tmp1_reg_125 <= grp_fu_264_p3;
    end else if (((tmp_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp1_reg_125 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        dst_addr_reg_291 <= tmp_24_cast_fu_182_p1;
        tmp_26_cast_reg_296[6 : 3] <= tmp_26_cast_fu_195_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        k_1_reg_286 <= k_1_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_11_reg_301 <= tmp_11_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_21_cast_reg_272[6 : 3] <= tmp_21_cast_fu_145_p1[6 : 3];
        tmp_23_cast_reg_277[6 : 3] <= tmp_23_cast_fu_157_p1[6 : 3];
    end
end

always @ (*) begin
    if ((tmp_11_fu_199_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_ce0 = 1'b1;
    end else begin
        dct_coeff_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_11_fu_199_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_11_fu_199_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dct_coeff_table_address0 = tmp_28_cast_fu_230_p1;

assign dst_address0 = dst_addr_reg_291;

assign dst_d0 = {{tmp_12_fu_247_p2[28:13]}};

assign k_1_fu_167_p2 = (k_reg_103 + 4'd1);

assign n_1_fu_205_p2 = (n_reg_114 + 4'd1);

assign src_address0 = tmp_27_cast_fu_220_p1;

assign tmp_11_fu_199_p2 = ((n_reg_114 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_12_fu_247_p2 = (29'd4096 + tmp_2_fu_243_p1);

assign tmp_15_cast_fu_211_p1 = n_reg_114;

assign tmp_15_fu_149_p3 = {{src_offset}, {3'd0}};

assign tmp_16_fu_177_p2 = (tmp_cast_fu_173_p1 + tmp_21_cast_reg_272);

assign tmp_19_fu_187_p3 = {{k_reg_103}, {3'd0}};

assign tmp_20_fu_215_p2 = (tmp_23_cast_reg_277 + tmp_15_cast_fu_211_p1);

assign tmp_21_cast_fu_145_p1 = tmp_s_fu_137_p3;

assign tmp_21_fu_225_p2 = (tmp_26_cast_reg_296 + tmp_15_cast_fu_211_p1);

assign tmp_23_cast_fu_157_p1 = tmp_15_fu_149_p3;

assign tmp_24_cast_fu_182_p1 = tmp_16_fu_177_p2;

assign tmp_26_cast_fu_195_p1 = tmp_19_fu_187_p3;

assign tmp_27_cast_fu_220_p1 = tmp_20_fu_215_p2;

assign tmp_28_cast_fu_230_p1 = tmp_21_fu_225_p2;

assign tmp_2_fu_243_p1 = tmp1_reg_125[28:0];

assign tmp_cast_fu_173_p1 = k_reg_103;

assign tmp_fu_161_p2 = ((k_reg_103 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_137_p3 = {{dst_offset}, {3'd0}};

always @ (posedge ap_clk) begin
    tmp_21_cast_reg_272[2:0] <= 3'b000;
    tmp_21_cast_reg_272[7] <= 1'b0;
    tmp_23_cast_reg_277[2:0] <= 3'b000;
    tmp_23_cast_reg_277[7] <= 1'b0;
    tmp_26_cast_reg_296[2:0] <= 3'b000;
    tmp_26_cast_reg_296[7] <= 1'b0;
end

endmodule //dct_1d2
