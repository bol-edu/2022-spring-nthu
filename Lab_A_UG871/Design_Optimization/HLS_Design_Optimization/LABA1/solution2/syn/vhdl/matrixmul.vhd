-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul_matrixmul,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.061000,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=249,HLS_SYN_LUT=387,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln54_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln56_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_1_fu_230_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln54_1_reg_462 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln56_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_reg_468_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_reg_468_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_reg_468_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_265_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_reg_473 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_2_fu_273_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln56_2_reg_479 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln59_1_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_484_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_484_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_484_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_1_reg_484_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_reg_488 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_reg_488_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_reg_488_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_reg_488_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln60_2_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln60_3_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln57_1_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_64 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_397_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_68 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln59_fu_281_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_72 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_76 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln56_3_fu_190_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_80 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten15_fu_84 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln54_1_fu_166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_indvar_flatten15_load : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln56_1_fu_184_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln54_fu_217_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln59_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_223_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln54_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_254_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_311_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln60_fu_308_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln60_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln57_fu_324_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln60_1_fu_333_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln60_1_fu_336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_347_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln60_1_fu_354_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln60_2_fu_360_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_163 : BOOLEAN;
    signal ap_condition_165 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmul_mac_muladd_8s_8s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrixmul_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8s_8s_16ns_16_4_1_U1 : component matrixmul_mac_muladd_8s_8s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_q0,
        din1 => a_q0,
        din2 => grp_fu_397_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_397_p3);

    flow_control_loop_pipe_U : component matrixmul_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_163)) then 
                    empty_fu_64 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    empty_fu_64 <= grp_fu_397_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    i_fu_80 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_80 <= select_ln54_1_fu_230_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten15_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_165)) then
                if ((icmp_ln54_fu_160_p2 = ap_const_lv1_0)) then 
                    indvar_flatten15_fu_84 <= add_ln54_1_fu_166_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten15_fu_84 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_165)) then
                if ((icmp_ln54_fu_160_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_76 <= select_ln56_3_fu_190_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_76 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    j_fu_72 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    j_fu_72 <= select_ln56_2_fu_273_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    k_fu_68 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_68 <= add_ln59_fu_281_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln57_reg_488 <= add_ln57_fu_327_p2;
                add_ln57_reg_488_pp0_iter3_reg <= add_ln57_reg_488;
                add_ln57_reg_488_pp0_iter4_reg <= add_ln57_reg_488_pp0_iter3_reg;
                add_ln57_reg_488_pp0_iter5_reg <= add_ln57_reg_488_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln59_1_reg_484_pp0_iter2_reg <= icmp_ln59_1_reg_484;
                icmp_ln59_1_reg_484_pp0_iter3_reg <= icmp_ln59_1_reg_484_pp0_iter2_reg;
                icmp_ln59_1_reg_484_pp0_iter4_reg <= icmp_ln59_1_reg_484_pp0_iter3_reg;
                icmp_ln59_1_reg_484_pp0_iter5_reg <= icmp_ln59_1_reg_484_pp0_iter4_reg;
                or_ln56_reg_468_pp0_iter2_reg <= or_ln56_reg_468;
                or_ln56_reg_468_pp0_iter3_reg <= or_ln56_reg_468_pp0_iter2_reg;
                or_ln56_reg_468_pp0_iter4_reg <= or_ln56_reg_468_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln59_1_reg_484 <= icmp_ln59_1_fu_287_p2;
                or_ln56_reg_468 <= or_ln56_fu_260_p2;
                select_ln54_1_reg_462 <= select_ln54_1_fu_230_p3;
                select_ln56_2_reg_479 <= select_ln56_2_fu_273_p3;
                select_ln56_reg_473 <= select_ln56_fu_265_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln54_fu_160_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln56_reg_454 <= icmp_ln56_fu_175_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_address0 <= zext_ln60_2_fu_342_p1(4 - 1 downto 0);

    a_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln54_1_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten15_load) + unsigned(ap_const_lv5_1));
    add_ln54_fu_217_p2 <= std_logic_vector(unsigned(i_fu_80) + unsigned(ap_const_lv2_1));
    add_ln56_1_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln56_fu_254_p2 <= std_logic_vector(unsigned(select_ln54_fu_223_p3) + unsigned(ap_const_lv2_1));
    add_ln57_fu_327_p2 <= std_logic_vector(unsigned(sub_ln60_fu_318_p2) + unsigned(zext_ln57_fu_324_p1));
    add_ln59_fu_281_p2 <= std_logic_vector(unsigned(select_ln56_fu_265_p3) + unsigned(ap_const_lv2_1));
    add_ln60_1_fu_336_p2 <= std_logic_vector(unsigned(sub_ln60_fu_318_p2) + unsigned(zext_ln60_1_fu_333_p1));
    add_ln60_2_fu_360_p2 <= std_logic_vector(unsigned(sub_ln60_1_fu_354_p2) + unsigned(zext_ln57_fu_324_p1));
    and_ln54_fu_248_p2 <= (xor_ln54_fu_237_p2 and icmp_ln59_fu_242_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_163_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_loop_init)
    begin
                ap_condition_163 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_165_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_165 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln54_fu_160_p2)
    begin
        if (((icmp_ln54_fu_160_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten15_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten15_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten15_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_indvar_flatten15_load <= indvar_flatten15_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load_1 <= indvar_flatten_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, empty_fu_64, grp_fu_397_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_load <= grp_fu_397_p3;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_64;
        end if; 
    end process;

    b_address0 <= zext_ln60_3_fu_366_p1(4 - 1 downto 0);

    b_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_397_p2 <= 
        ap_const_lv16_0 when (or_ln56_reg_468_pp0_iter4_reg(0) = '1') else 
        ap_sig_allocacmp_p_load;
    icmp_ln54_fu_160_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten15_load = ap_const_lv5_1B) else "0";
    icmp_ln56_fu_175_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load_1 = ap_const_lv4_9) else "0";
    icmp_ln59_1_fu_287_p2 <= "1" when (add_ln59_fu_281_p2 = ap_const_lv2_3) else "0";
    icmp_ln59_fu_242_p2 <= "1" when (k_fu_68 = ap_const_lv2_3) else "0";
    or_ln56_fu_260_p2 <= (icmp_ln56_reg_454 or and_ln54_fu_248_p2);
    res_address0 <= zext_ln57_1_fu_389_p1(4 - 1 downto 0);

    res_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= grp_fu_397_p3;

    res_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, icmp_ln59_1_reg_484_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln59_1_reg_484_pp0_iter5_reg = ap_const_lv1_1))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln54_1_fu_230_p3 <= 
        add_ln54_fu_217_p2 when (icmp_ln56_reg_454(0) = '1') else 
        i_fu_80;
    select_ln54_fu_223_p3 <= 
        ap_const_lv2_0 when (icmp_ln56_reg_454(0) = '1') else 
        j_fu_72;
    select_ln56_2_fu_273_p3 <= 
        add_ln56_fu_254_p2 when (and_ln54_fu_248_p2(0) = '1') else 
        select_ln54_fu_223_p3;
    select_ln56_3_fu_190_p3 <= 
        ap_const_lv4_1 when (icmp_ln56_fu_175_p2(0) = '1') else 
        add_ln56_1_fu_184_p2;
    select_ln56_fu_265_p3 <= 
        ap_const_lv2_0 when (or_ln56_fu_260_p2(0) = '1') else 
        k_fu_68;
    sub_ln60_1_fu_354_p2 <= std_logic_vector(unsigned(tmp_1_fu_347_p3) - unsigned(zext_ln60_1_fu_333_p1));
    sub_ln60_fu_318_p2 <= std_logic_vector(unsigned(tmp_fu_311_p3) - unsigned(zext_ln60_fu_308_p1));
    tmp_1_fu_347_p3 <= (select_ln56_reg_473 & ap_const_lv2_0);
    tmp_fu_311_p3 <= (select_ln54_1_reg_462 & ap_const_lv2_0);
    xor_ln54_fu_237_p2 <= (icmp_ln56_reg_454 xor ap_const_lv1_1);
    zext_ln57_1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_reg_488_pp0_iter5_reg),64));
    zext_ln57_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_2_reg_479),4));
    zext_ln60_1_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_reg_473),4));
    zext_ln60_2_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_1_fu_336_p2),64));
    zext_ln60_3_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_2_fu_360_p2),64));
    zext_ln60_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_1_reg_462),4));
end behav;
