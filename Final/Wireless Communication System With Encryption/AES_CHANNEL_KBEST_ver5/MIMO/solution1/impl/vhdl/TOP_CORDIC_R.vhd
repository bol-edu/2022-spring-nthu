-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_CORDIC_R is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_in : IN STD_LOGIC_VECTOR (15 downto 0);
    y_in : IN STD_LOGIC_VECTOR (15 downto 0);
    z_in : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of TOP_CORDIC_R is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_324 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100100100";
    constant ap_const_lv16_FE6E : STD_LOGIC_VECTOR (15 downto 0) := "1111111001101110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_10 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv25_9B : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_phase_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal cordic_phase_V_ce0 : STD_LOGIC;
    signal cordic_phase_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_4_reg_1062 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_18_load_1_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln29_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_19_load_1_reg_1077 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_427_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_427_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start : STD_LOGIC;
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done : STD_LOGIC;
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_idle : STD_LOGIC;
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_ready : STD_LOGIC;
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_y_V_4_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_y_V_4_out_ap_vld : STD_LOGIC;
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_x_V_4_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_x_V_4_out_ap_vld : STD_LOGIC;
    signal grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln29_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_18_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_10_fu_358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_7_fu_230_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_V_19_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_17_fu_365_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_14_fu_222_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_V_5_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_V_8_fu_319_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_V_fu_216_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln29_fu_268_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_418_fu_194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1548_fu_210_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1548_fu_202_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_417_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_V_fu_182_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_fu_188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln712_fu_303_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_V_6_fu_307_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal z_V_7_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_8_fu_338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_9_fu_348_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_15_fu_343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_16_fu_353_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1004_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln1168_fu_382_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_262_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_397_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_14_fu_403_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln940_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_263_fu_415_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln947_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_420_fu_445_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln950_fu_465_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln950_fu_469_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln950_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln950_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln952_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln952_4_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln952_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_421_fu_509_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_264_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln952_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln962_fu_543_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln960_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln962_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln949_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln952_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln961_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln961_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln961_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln949_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln952_6_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln961_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln962_fu_553_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln961_fu_583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_591_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln964_fu_599_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_23_fu_603_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_30_fu_609_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_s_fu_623_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln946_fu_639_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln968_fu_643_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln946_fu_631_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln968_fu_649_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln965_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_655_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_265_fu_663_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln938_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln746_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1013_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln1168_1_fu_687_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_266_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_12_fu_702_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_15_fu_708_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln940_1_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_267_fu_720_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_3_fu_730_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln947_3_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_3_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_424_fu_750_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln950_3_fu_770_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln950_3_fu_774_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln950_3_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln950_3_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln952_2_fu_790_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln952_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln952_8_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_425_fu_814_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_268_fu_828_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln952_3_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln962_3_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln960_3_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln962_3_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln949_3_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln952_2_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln961_3_fu_872_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln961_3_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln961_3_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln949_2_fu_864_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln952_7_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln961_3_fu_882_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln962_3_fu_858_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln961_6_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_27_fu_896_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln964_3_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_28_fu_908_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_31_fu_914_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_260_fu_928_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln946_3_fu_944_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln968_2_fu_948_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln946_2_fu_936_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln968_3_fu_954_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln965_3_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_960_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_269_fu_968_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln938_3_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln746_3_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_o1_fu_679_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_o2_fu_984_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1004_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1013_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_CORDIC_R_Pipeline_VITIS_LOOP_32_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp_y_V_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        temp_x_V_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        k : IN STD_LOGIC_VECTOR (3 downto 0);
        temp_y_V_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        temp_y_V_4_out_ap_vld : OUT STD_LOGIC;
        temp_x_V_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        temp_x_V_4_out_ap_vld : OUT STD_LOGIC );
    end component;


    component TOP_mul_mul_16s_8ns_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component TOP_CORDIC_V_cordic_phase_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cordic_phase_V_U : component TOP_CORDIC_V_cordic_phase_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_phase_V_address0,
        ce0 => cordic_phase_V_ce0,
        q0 => cordic_phase_V_q0);

    grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157 : component TOP_CORDIC_R_Pipeline_VITIS_LOOP_32_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start,
        ap_done => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done,
        ap_idle => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_idle,
        ap_ready => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_ready,
        temp_y_V_3 => r_V_19_load_1_reg_1077,
        temp_x_V_3 => r_V_18_load_1_reg_1070,
        k => k_4_reg_1062,
        temp_y_V_4_out => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_y_V_4_out,
        temp_y_V_4_out_ap_vld => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_y_V_4_out_ap_vld,
        temp_x_V_4_out => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_x_V_4_out,
        temp_x_V_4_out_ap_vld => grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_x_V_4_out_ap_vld);

    mul_mul_16s_8ns_25_4_1_U226 : component TOP_mul_mul_16s_8ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_18_fu_102,
        din1 => grp_fu_1004_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1004_p2);

    mul_mul_16s_8ns_25_4_1_U227 : component TOP_mul_mul_16s_8ns_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => r_V_19_fu_106,
        din1 => grp_fu_1013_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1013_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_0_preg <= output_o1_fu_679_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_return_1_preg <= output_o2_fu_984_p3;
                end if; 
            end if;
        end if;
    end process;


    grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln29_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_ready = ap_const_logic_1)) then 
                    grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_fu_114 <= ap_const_lv4_0;
            elsif (((icmp_ln29_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_fu_114 <= add_ln29_fu_268_p2;
            end if; 
        end if;
    end process;

    r_V_18_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_V_18_fu_102 <= x_V_7_fu_230_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                r_V_18_fu_102 <= x_V_10_fu_358_p3;
            end if; 
        end if;
    end process;

    r_V_19_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_V_19_fu_106 <= y_V_14_fu_222_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                r_V_19_fu_106 <= y_V_17_fu_365_p3;
            end if; 
        end if;
    end process;

    z_V_5_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                z_V_5_fu_110 <= z_V_fu_216_p2;
            elsif (((grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                z_V_5_fu_110 <= z_V_8_fu_319_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                k_4_reg_1062 <= k_fu_114;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                r_V_18_load_1_reg_1070 <= r_V_18_fu_102;
                r_V_19_load_1_reg_1077 <= r_V_19_fu_106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_427_reg_1099 <= z_V_5_fu_110(15 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln29_fu_262_p2, ap_CS_fsm_state3, grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln29_fu_262_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln1548_fu_210_p2 <= std_logic_vector(unsigned(z_in) + unsigned(ap_const_lv16_FE6E));
    add_ln29_fu_268_p2 <= std_logic_vector(unsigned(k_fu_114) + unsigned(ap_const_lv4_1));
    add_ln961_3_fu_872_p2 <= std_logic_vector(unsigned(sub_ln947_3_fu_738_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln961_fu_567_p2 <= std_logic_vector(unsigned(sub_ln947_fu_433_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln968_3_fu_954_p2 <= std_logic_vector(unsigned(sub_ln968_2_fu_948_p2) + unsigned(select_ln946_2_fu_936_p3));
    add_ln968_fu_649_p2 <= std_logic_vector(unsigned(sub_ln968_fu_643_p2) + unsigned(select_ln946_fu_631_p3));
    and_ln952_6_fu_537_p2 <= (xor_ln952_fu_517_p2 and p_Result_264_fu_523_p3);
    and_ln952_7_fu_842_p2 <= (xor_ln952_3_fu_822_p2 and p_Result_268_fu_828_p3);
    and_ln952_8_fu_802_p2 <= (sext_ln940_1_fu_716_p1 and or_ln952_fu_796_p2);
    and_ln952_fu_497_p2 <= (sext_ln940_fu_411_p1 and or_ln952_4_fu_491_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done)
    begin
        if ((grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state7, output_o1_fu_679_p3, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_0 <= output_o1_fu_679_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state7, output_o2_fu_984_p3, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_return_1 <= output_o2_fu_984_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    bitcast_ln746_3_fu_980_p1 <= p_Result_269_fu_968_p5;
    bitcast_ln746_fu_675_p1 <= p_Result_265_fu_663_p5;
    cordic_phase_V_address0 <= zext_ln29_fu_274_p1(4 - 1 downto 0);

    cordic_phase_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce0 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start <= grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_ap_start_reg;
    grp_fu_1004_p1 <= ap_const_lv25_9B(8 - 1 downto 0);
    grp_fu_1013_p1 <= ap_const_lv25_9B(8 - 1 downto 0);
    icmp_ln29_fu_262_p2 <= "1" when (k_fu_114 = ap_const_lv4_A) else "0";
    icmp_ln938_3_fu_690_p2 <= "1" when (grp_fu_1013_p2 = ap_const_lv25_0) else "0";
    icmp_ln938_fu_385_p2 <= "1" when (grp_fu_1004_p2 = ap_const_lv25_0) else "0";
    icmp_ln949_3_fu_760_p2 <= "1" when (signed(tmp_424_fu_750_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_fu_455_p2 <= "1" when (signed(tmp_420_fu_445_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln952_2_fu_808_p2 <= "0" when (and_ln952_8_fu_802_p2 = ap_const_lv32_0) else "1";
    icmp_ln952_fu_503_p2 <= "0" when (and_ln952_fu_497_p2 = ap_const_lv32_0) else "1";
    icmp_ln961_3_fu_836_p2 <= "1" when (signed(lsb_index_3_fu_744_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln961_fu_531_p2 <= "1" when (signed(lsb_index_fu_439_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_3_fu_730_p3_proc : process(p_Result_267_fu_720_p4)
    begin
        l_3_fu_730_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_267_fu_720_p4(i) = '1' then
                l_3_fu_730_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    
    l_fu_425_p3_proc : process(p_Result_263_fu_415_p4)
    begin
        l_fu_425_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_263_fu_415_p4(i) = '1' then
                l_fu_425_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_3_fu_744_p2 <= std_logic_vector(unsigned(sub_ln947_3_fu_738_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lsb_index_fu_439_p2 <= std_logic_vector(unsigned(sub_ln947_fu_433_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln950_3_fu_784_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln950_3_fu_780_p1(31-1 downto 0)))));
    lshr_ln950_fu_479_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln950_fu_475_p1(31-1 downto 0)))));
    lshr_ln961_3_fu_882_p2 <= std_logic_vector(shift_right(unsigned(zext_ln960_3_fu_766_p1),to_integer(unsigned('0' & zext_ln961_3_fu_878_p1(31-1 downto 0)))));
    lshr_ln961_fu_577_p2 <= std_logic_vector(shift_right(unsigned(zext_ln960_fu_461_p1),to_integer(unsigned('0' & zext_ln961_fu_573_p1(31-1 downto 0)))));
    m_23_fu_603_p2 <= std_logic_vector(unsigned(m_fu_591_p3) + unsigned(zext_ln964_fu_599_p1));
    m_27_fu_896_p3 <= 
        lshr_ln961_3_fu_882_p2 when (icmp_ln961_3_fu_836_p2(0) = '1') else 
        shl_ln962_3_fu_858_p2;
    m_28_fu_908_p2 <= std_logic_vector(unsigned(m_27_fu_896_p3) + unsigned(zext_ln964_3_fu_904_p1));
    m_30_fu_609_p4 <= m_23_fu_603_p2(63 downto 1);
    m_31_fu_914_p4 <= m_28_fu_908_p2(63 downto 1);
    m_fu_591_p3 <= 
        lshr_ln961_fu_577_p2 when (icmp_ln961_fu_531_p2(0) = '1') else 
        shl_ln962_fu_553_p2;
    or_ln952_4_fu_491_p2 <= (shl_ln952_fu_485_p2 or lshr_ln950_fu_479_p2);
    or_ln952_fu_796_p2 <= (shl_ln952_2_fu_790_p2 or lshr_ln950_3_fu_784_p2);
    output_o1_fu_679_p3 <= 
        ap_const_lv64_0 when (icmp_ln938_fu_385_p2(0) = '1') else 
        bitcast_ln746_fu_675_p1;
    output_o2_fu_984_p3 <= 
        ap_const_lv64_0 when (icmp_ln938_3_fu_690_p2(0) = '1') else 
        bitcast_ln746_3_fu_980_p1;
    p_Result_260_fu_928_p3 <= m_28_fu_908_p2(54 downto 54);
    p_Result_262_fu_390_p3 <= grp_fu_1004_p2(24 downto 24);
    
    p_Result_263_fu_415_p4_proc : process(sext_ln940_fu_411_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_263_fu_415_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sext_ln940_fu_411_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_263_fu_415_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_263_fu_415_p4_i) := sext_ln940_fu_411_p1(32-1-p_Result_263_fu_415_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_263_fu_415_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_264_fu_523_p3 <= sext_ln940_fu_411_p1(to_integer(unsigned(lsb_index_fu_439_p2)) downto to_integer(unsigned(lsb_index_fu_439_p2))) when (to_integer(unsigned(lsb_index_fu_439_p2)) >= 0 and to_integer(unsigned(lsb_index_fu_439_p2)) <=31) else "-";
    p_Result_265_fu_663_p5 <= (tmp_fu_655_p3 & zext_ln965_fu_619_p1(51 downto 0));
    p_Result_266_fu_695_p3 <= grp_fu_1013_p2(24 downto 24);
    
    p_Result_267_fu_720_p4_proc : process(sext_ln940_1_fu_716_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_267_fu_720_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := sext_ln940_1_fu_716_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_267_fu_720_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_267_fu_720_p4_i) := sext_ln940_1_fu_716_p1(32-1-p_Result_267_fu_720_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_267_fu_720_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_268_fu_828_p3 <= sext_ln940_1_fu_716_p1(to_integer(unsigned(lsb_index_3_fu_744_p2)) downto to_integer(unsigned(lsb_index_3_fu_744_p2))) when (to_integer(unsigned(lsb_index_3_fu_744_p2)) >= 0 and to_integer(unsigned(lsb_index_3_fu_744_p2)) <=31) else "-";
    p_Result_269_fu_968_p5 <= (tmp_s_fu_960_p3 & zext_ln965_3_fu_924_p1(51 downto 0));
    p_Result_s_fu_623_p3 <= m_23_fu_603_p2(54 downto 54);
    select_ln1548_fu_202_p3 <= 
        ap_const_lv16_324 when (tmp_418_fu_194_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln946_2_fu_936_p3 <= 
        ap_const_lv11_3FF when (p_Result_260_fu_928_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln946_fu_631_p3 <= 
        ap_const_lv11_3FF when (p_Result_s_fu_623_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln949_2_fu_864_p3 <= 
        icmp_ln952_2_fu_808_p2 when (icmp_ln949_3_fu_760_p2(0) = '1') else 
        p_Result_268_fu_828_p3;
    select_ln949_fu_559_p3 <= 
        icmp_ln952_fu_503_p2 when (icmp_ln949_fu_455_p2(0) = '1') else 
        p_Result_264_fu_523_p3;
    select_ln961_6_fu_888_p3 <= 
        select_ln949_2_fu_864_p3 when (icmp_ln961_3_fu_836_p2(0) = '1') else 
        and_ln952_7_fu_842_p2;
    select_ln961_fu_583_p3 <= 
        select_ln949_fu_559_p3 when (icmp_ln961_fu_531_p2(0) = '1') else 
        and_ln952_6_fu_537_p2;
        sext_ln940_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_15_fu_708_p3),32));

        sext_ln940_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_14_fu_403_p3),32));

    shl_ln952_2_fu_790_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_3_fu_744_p2(31-1 downto 0)))));
    shl_ln952_fu_485_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_439_p2(31-1 downto 0)))));
    shl_ln962_3_fu_858_p2 <= std_logic_vector(shift_left(unsigned(zext_ln960_3_fu_766_p1),to_integer(unsigned('0' & zext_ln962_3_fu_854_p1(31-1 downto 0)))));
    shl_ln962_fu_553_p2 <= std_logic_vector(shift_left(unsigned(zext_ln960_fu_461_p1),to_integer(unsigned('0' & zext_ln962_fu_549_p1(31-1 downto 0)))));
    sub_ln947_3_fu_738_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_3_fu_730_p3));
    sub_ln947_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_425_p3));
    sub_ln950_3_fu_774_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln950_3_fu_770_p1));
    sub_ln950_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv6_16) - unsigned(trunc_ln950_fu_465_p1));
    sub_ln962_3_fu_848_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln947_3_fu_738_p2));
    sub_ln962_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln947_fu_433_p2));
    sub_ln968_2_fu_948_p2 <= std_logic_vector(unsigned(ap_const_lv11_10) - unsigned(trunc_ln946_3_fu_944_p1));
    sub_ln968_fu_643_p2 <= std_logic_vector(unsigned(ap_const_lv11_10) - unsigned(trunc_ln946_fu_639_p1));
    tmp_417_fu_174_p3 <= z_in(15 downto 15);
    tmp_418_fu_194_p3 <= z_in(15 downto 15);
    tmp_420_fu_445_p4 <= lsb_index_fu_439_p2(31 downto 1);
    tmp_421_fu_509_p3 <= lsb_index_fu_439_p2(31 downto 31);
    tmp_424_fu_750_p4 <= lsb_index_3_fu_744_p2(31 downto 1);
    tmp_425_fu_814_p3 <= lsb_index_3_fu_744_p2(31 downto 31);
    tmp_427_fu_295_p3 <= z_V_5_fu_110(15 downto 15);
    tmp_V_12_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(trunc_ln1168_1_fu_687_p1));
    tmp_V_14_fu_403_p3 <= 
        tmp_V_fu_397_p2 when (p_Result_262_fu_390_p3(0) = '1') else 
        trunc_ln1168_fu_382_p1;
    tmp_V_15_fu_708_p3 <= 
        tmp_V_12_fu_702_p2 when (p_Result_266_fu_695_p3(0) = '1') else 
        trunc_ln1168_1_fu_687_p1;
    tmp_V_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(trunc_ln1168_fu_382_p1));
    tmp_fu_655_p3 <= (p_Result_262_fu_390_p3 & add_ln968_fu_649_p2);
    tmp_s_fu_960_p3 <= (p_Result_266_fu_695_p3 & add_ln968_3_fu_954_p2);
    trunc_ln1168_1_fu_687_p1 <= grp_fu_1013_p2(24 - 1 downto 0);
    trunc_ln1168_fu_382_p1 <= grp_fu_1004_p2(24 - 1 downto 0);
    trunc_ln946_3_fu_944_p1 <= l_3_fu_730_p3(11 - 1 downto 0);
    trunc_ln946_fu_639_p1 <= l_fu_425_p3(11 - 1 downto 0);
    trunc_ln950_3_fu_770_p1 <= sub_ln947_3_fu_738_p2(6 - 1 downto 0);
    trunc_ln950_fu_465_p1 <= sub_ln947_fu_433_p2(6 - 1 downto 0);
    x_V_10_fu_358_p3 <= 
        x_V_8_fu_338_p2 when (tmp_427_reg_1099(0) = '1') else 
        x_V_9_fu_348_p2;
    x_V_7_fu_230_p3 <= 
        y_in when (tmp_417_fu_174_p3(0) = '1') else 
        x_V_fu_188_p2;
    x_V_8_fu_338_p2 <= std_logic_vector(unsigned(grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_y_V_4_out) + unsigned(r_V_18_load_1_reg_1070));
    x_V_9_fu_348_p2 <= std_logic_vector(unsigned(r_V_18_load_1_reg_1070) - unsigned(grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_y_V_4_out));
    x_V_fu_188_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(y_in));
    xor_ln952_3_fu_822_p2 <= (tmp_425_fu_814_p3 xor ap_const_lv1_1);
    xor_ln952_fu_517_p2 <= (tmp_421_fu_509_p3 xor ap_const_lv1_1);
    y_V_14_fu_222_p3 <= 
        y_V_fu_182_p2 when (tmp_417_fu_174_p3(0) = '1') else 
        x_in;
    y_V_15_fu_343_p2 <= std_logic_vector(unsigned(r_V_19_load_1_reg_1077) - unsigned(grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_x_V_4_out));
    y_V_16_fu_353_p2 <= std_logic_vector(unsigned(grp_CORDIC_R_Pipeline_VITIS_LOOP_32_2_fu_157_temp_x_V_4_out) + unsigned(r_V_19_load_1_reg_1077));
    y_V_17_fu_365_p3 <= 
        y_V_15_fu_343_p2 when (tmp_427_reg_1099(0) = '1') else 
        y_V_16_fu_353_p2;
    y_V_fu_182_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(x_in));
    z_V_6_fu_307_p2 <= std_logic_vector(unsigned(zext_ln712_fu_303_p1) + unsigned(z_V_5_fu_110));
    z_V_7_fu_313_p2 <= std_logic_vector(unsigned(z_V_5_fu_110) - unsigned(zext_ln712_fu_303_p1));
    z_V_8_fu_319_p3 <= 
        z_V_6_fu_307_p2 when (tmp_427_fu_295_p3(0) = '1') else 
        z_V_7_fu_313_p2;
    z_V_fu_216_p2 <= std_logic_vector(unsigned(add_ln1548_fu_210_p2) + unsigned(select_ln1548_fu_202_p3));
    zext_ln29_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_114),64));
    zext_ln712_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q0),16));
    zext_ln950_3_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln950_3_fu_774_p2),32));
    zext_ln950_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln950_fu_469_p2),32));
    zext_ln960_3_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln940_1_fu_716_p1),64));
    zext_ln960_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln940_fu_411_p1),64));
    zext_ln961_3_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln961_3_fu_872_p2),64));
    zext_ln961_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln961_fu_567_p2),64));
    zext_ln962_3_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln962_3_fu_848_p2),64));
    zext_ln962_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln962_fu_543_p2),64));
    zext_ln964_3_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln961_6_fu_888_p3),64));
    zext_ln964_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln961_fu_583_p3),64));
    zext_ln965_3_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_31_fu_914_p4),64));
    zext_ln965_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_30_fu_609_p4),64));
end behav;
