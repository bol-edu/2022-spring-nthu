-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_aes_return_Pipeline_aes_return_label12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pArray_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pArray_ce0 : OUT STD_LOGIC;
    pArray_we0 : OUT STD_LOGIC;
    pArray_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pArray_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pArray_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pArray_ce1 : OUT STD_LOGIC;
    pArray_we1 : OUT STD_LOGIC;
    pArray_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pArray_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of TOP_aes_return_Pipeline_aes_return_label12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln324_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_block_state35_pp0_stage34_iter0 : BOOLEAN;
    signal S_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_ce0 : STD_LOGIC;
    signal S_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_GFMul_fu_342_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal grp_GFMul_fu_349_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_356_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal reg_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_983 : STD_LOGIC_VECTOR (3 downto 0);
    signal pArray_addr_reg_988 : STD_LOGIC_VECTOR (3 downto 0);
    signal pArray_addr_15_reg_1067 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln58_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_reg_1075 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal trunc_ln58_5_fu_456_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_5_reg_1090 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_10_fu_460_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_10_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_3_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_3_reg_1100 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_14_fu_486_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_14_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_4_fu_490_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_4_reg_1115 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_9_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_9_reg_1125 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_2_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_2_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal trunc_ln58_13_fu_520_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_13_reg_1135 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln300_1_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_1_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_9_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_9_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln58_8_fu_606_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_8_reg_1160 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_12_fu_610_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_12_reg_1165 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_1_fu_621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_1_reg_1170 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_7_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_7_reg_1175 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_6_fu_644_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_6_reg_1190 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_11_fu_655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln58_11_reg_1195 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal xor_ln300_15_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_15_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_31_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_31_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal xor_ln300_13_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_13_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_29_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_29_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_19_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_19_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal xor_ln300_27_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_27_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_342_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_342_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_342_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_349_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_349_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_349_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_356_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_356_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_356_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_addRoundKey_fu_369_ap_start : STD_LOGIC;
    signal grp_addRoundKey_fu_369_ap_done : STD_LOGIC;
    signal grp_addRoundKey_fu_369_ap_idle : STD_LOGIC;
    signal grp_addRoundKey_fu_369_ap_ready : STD_LOGIC;
    signal grp_addRoundKey_fu_369_array_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_addRoundKey_fu_369_array_r_ce0 : STD_LOGIC;
    signal grp_addRoundKey_fu_369_array_r_we0 : STD_LOGIC;
    signal grp_addRoundKey_fu_369_array_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_addRoundKey_fu_369_array_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_addRoundKey_fu_369_array_r_ce1 : STD_LOGIC;
    signal grp_addRoundKey_fu_369_array_r_we1 : STD_LOGIC;
    signal grp_addRoundKey_fu_369_array_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_addRoundKey_fu_369_w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_addRoundKey_fu_369_w_ce0 : STD_LOGIC;
    signal grp_addRoundKey_fu_369_w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_addRoundKey_fu_369_w_ce1 : STD_LOGIC;
    signal zext_ln193_15_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_10_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_5_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_14_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_3_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_9_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_4_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_13_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_2_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_8_fu_770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_7_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_1_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_6_fu_873_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_11_fu_884_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln193_12_fu_895_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_addRoundKey_fu_369_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_NS_fsm_state20 : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal zext_ln58_18_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_13_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_8_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_17_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_6_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_12_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_7_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_16_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_5_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_11_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_10_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_4_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_9_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_14_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_15_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln300_17_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_25_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_7_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_23_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_5_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_21_fu_837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_3_fu_914_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_11_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal trunc_ln58_15_fu_443_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln300_2_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_18_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_16_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_33_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_32_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_41_fu_589_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_40_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_14_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_12_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_30_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_28_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_39_fu_713_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_38_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_47_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_46_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_10_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_8_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_26_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_24_fu_807_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_37_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_36_fu_825_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_45_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_44_fu_844_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_6_fu_908_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_4_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_22_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_20_fu_921_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_35_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_34_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_43_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln300_42_fu_958_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_block_state25_pp0_stage24_iter0 : BOOLEAN;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_block_state26_pp0_stage25_iter0 : BOOLEAN;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_block_state27_pp0_stage26_iter0 : BOOLEAN;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_block_state28_pp0_stage27_iter0 : BOOLEAN;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_block_state29_pp0_stage28_iter0 : BOOLEAN;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_block_state30_pp0_stage29_iter0 : BOOLEAN;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_block_state31_pp0_stage30_iter0 : BOOLEAN;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_block_state32_pp0_stage31_iter0 : BOOLEAN;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_block_state33_pp0_stage32_iter0 : BOOLEAN;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_block_state34_pp0_stage33_iter0 : BOOLEAN;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_GFMul IS
    port (
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (3 downto 0);
        s : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_addRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        array_r_ce0 : OUT STD_LOGIC;
        array_r_we0 : OUT STD_LOGIC;
        array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        array_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        array_r_ce1 : OUT STD_LOGIC;
        array_r_we1 : OUT STD_LOGIC;
        array_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        array_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        round : IN STD_LOGIC_VECTOR (3 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component TOP_extendKey_Pipeline_extendKey_label0_S_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    S_U : component TOP_extendKey_Pipeline_extendKey_label0_S_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_address0,
        ce0 => S_ce0,
        q0 => S_q0);

    grp_GFMul_fu_342 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_342_ap_ready,
        n => grp_GFMul_fu_342_n,
        s => grp_GFMul_fu_342_s,
        ap_return => grp_GFMul_fu_342_ap_return);

    grp_GFMul_fu_349 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_349_ap_ready,
        n => grp_GFMul_fu_349_n,
        s => grp_GFMul_fu_349_s,
        ap_return => grp_GFMul_fu_349_ap_return);

    grp_GFMul_fu_356 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_356_ap_ready,
        n => grp_GFMul_fu_356_n,
        s => grp_GFMul_fu_356_s,
        ap_return => grp_GFMul_fu_356_ap_return);

    grp_addRoundKey_fu_369 : component TOP_addRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_addRoundKey_fu_369_ap_start,
        ap_done => grp_addRoundKey_fu_369_ap_done,
        ap_idle => grp_addRoundKey_fu_369_ap_idle,
        ap_ready => grp_addRoundKey_fu_369_ap_ready,
        array_r_address0 => grp_addRoundKey_fu_369_array_r_address0,
        array_r_ce0 => grp_addRoundKey_fu_369_array_r_ce0,
        array_r_we0 => grp_addRoundKey_fu_369_array_r_we0,
        array_r_d0 => grp_addRoundKey_fu_369_array_r_d0,
        array_r_q0 => pArray_q0,
        array_r_address1 => grp_addRoundKey_fu_369_array_r_address1,
        array_r_ce1 => grp_addRoundKey_fu_369_array_r_ce1,
        array_r_we1 => grp_addRoundKey_fu_369_array_r_we1,
        array_r_d1 => grp_addRoundKey_fu_369_array_r_d1,
        array_r_q1 => pArray_q1,
        round => i_3_reg_983,
        w_address0 => grp_addRoundKey_fu_369_w_address0,
        w_ce0 => grp_addRoundKey_fu_369_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_addRoundKey_fu_369_w_address1,
        w_ce1 => grp_addRoundKey_fu_369_w_ce1,
        w_q1 => w_q1,
        ap_ce => ap_const_logic_1);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_addRoundKey_fu_369_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_addRoundKey_fu_369_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state20) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_addRoundKey_fu_369_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_addRoundKey_fu_369_ap_ready = ap_const_logic_1)) then 
                    grp_addRoundKey_fu_369_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln324_fu_422_p2 = ap_const_lv1_0)) then 
                    i_fu_66 <= i_4_fu_428_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_66 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_3_reg_983 <= ap_sig_allocacmp_i_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_378 <= grp_GFMul_fu_342_ap_return;
                reg_382 <= grp_GFMul_fu_349_ap_return;
                reg_386 <= grp_GFMul_fu_356_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_390 <= grp_GFMul_fu_342_ap_return;
                reg_394 <= grp_GFMul_fu_349_ap_return;
                reg_398 <= grp_GFMul_fu_356_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_402 <= grp_GFMul_fu_342_ap_return;
                reg_406 <= grp_GFMul_fu_349_ap_return;
                reg_410 <= grp_GFMul_fu_356_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln58_10_reg_1095 <= trunc_ln58_10_fu_460_p1;
                trunc_ln58_5_reg_1090 <= trunc_ln58_5_fu_456_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln58_11_reg_1195 <= trunc_ln58_11_fu_655_p1;
                trunc_ln58_6_reg_1190 <= trunc_ln58_6_fu_644_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln58_12_reg_1165 <= trunc_ln58_12_fu_610_p1;
                trunc_ln58_8_reg_1160 <= trunc_ln58_8_fu_606_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln58_13_reg_1135 <= trunc_ln58_13_fu_520_p1;
                trunc_ln58_2_reg_1130 <= trunc_ln58_2_fu_509_p1;
                xor_ln300_1_reg_1145 <= xor_ln300_1_fu_540_p2;
                xor_ln300_9_reg_1150 <= xor_ln300_9_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                trunc_ln58_14_reg_1110 <= trunc_ln58_14_fu_486_p1;
                trunc_ln58_3_reg_1100 <= trunc_ln58_3_fu_478_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln58_1_reg_1170 <= trunc_ln58_1_fu_621_p1;
                trunc_ln58_7_reg_1175 <= trunc_ln58_7_fu_632_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln58_4_reg_1115 <= trunc_ln58_4_fu_490_p1;
                trunc_ln58_9_reg_1125 <= trunc_ln58_9_fu_498_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln58_reg_1075 <= trunc_ln58_fu_439_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                xor_ln300_13_reg_1235 <= xor_ln300_13_fu_819_p2;
                xor_ln300_29_reg_1240 <= xor_ln300_29_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                xor_ln300_15_reg_1205 <= xor_ln300_15_fu_701_p2;
                xor_ln300_31_reg_1210 <= xor_ln300_31_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                xor_ln300_19_reg_1260 <= xor_ln300_19_fu_952_p2;
                xor_ln300_27_reg_1265 <= xor_ln300_27_fu_970_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln324_fu_422_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start_int = ap_const_logic_1) and (icmp_ln324_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    S_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, zext_ln58_18_fu_447_p1, zext_ln58_fu_452_p1, zext_ln58_13_fu_482_p1, zext_ln58_8_fu_494_p1, zext_ln58_17_fu_524_p1, zext_ln58_6_fu_602_p1, zext_ln58_12_fu_636_p1, zext_ln58_7_fu_640_p1, zext_ln58_16_fu_666_p1, zext_ln58_5_fu_744_p1, zext_ln58_11_fu_762_p1, zext_ln58_10_fu_766_p1, zext_ln58_4_fu_777_p1, zext_ln58_9_fu_869_p1, zext_ln58_14_fu_880_p1, zext_ln58_15_fu_891_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            S_address0 <= zext_ln58_15_fu_891_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            S_address0 <= zext_ln58_14_fu_880_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            S_address0 <= zext_ln58_9_fu_869_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            S_address0 <= zext_ln58_4_fu_777_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            S_address0 <= zext_ln58_10_fu_766_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            S_address0 <= zext_ln58_11_fu_762_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            S_address0 <= zext_ln58_5_fu_744_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            S_address0 <= zext_ln58_16_fu_666_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            S_address0 <= zext_ln58_7_fu_640_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            S_address0 <= zext_ln58_12_fu_636_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            S_address0 <= zext_ln58_6_fu_602_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            S_address0 <= zext_ln58_17_fu_524_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            S_address0 <= zext_ln58_8_fu_494_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_address0 <= zext_ln58_13_fu_482_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            S_address0 <= zext_ln58_fu_452_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_address0 <= zext_ln58_18_fu_447_p1(8 - 1 downto 0);
        else 
            S_address0 <= "XXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state20 <= ap_NS_fsm(19);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage30_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage31_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage32_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage33_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage34_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln324_fu_422_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln324_fu_422_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_state1, i_fu_66, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_66;
        end if; 
    end process;


    grp_GFMul_fu_342_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_GFMul_fu_342_n <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_GFMul_fu_342_n <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_342_n <= ap_const_lv4_1;
        else 
            grp_GFMul_fu_342_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_342_s_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln193_15_fu_464_p1, zext_ln193_fu_471_p1, zext_ln193_10_fu_502_p1, zext_ln193_5_fu_513_p1, zext_ln193_14_fu_614_p1, zext_ln193_3_fu_625_p1, zext_ln193_9_fu_648_p1, zext_ln193_4_fu_659_p1, zext_ln193_13_fu_748_p1, zext_ln193_2_fu_755_p1, zext_ln193_8_fu_770_p1, zext_ln193_7_fu_781_p1, zext_ln193_1_fu_862_p1, zext_ln193_6_fu_873_p1, zext_ln193_11_fu_884_p1, zext_ln193_12_fu_895_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_GFMul_fu_342_s <= zext_ln193_12_fu_895_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_GFMul_fu_342_s <= zext_ln193_11_fu_884_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_GFMul_fu_342_s <= zext_ln193_6_fu_873_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_GFMul_fu_342_s <= zext_ln193_1_fu_862_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_342_s <= zext_ln193_7_fu_781_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_342_s <= zext_ln193_8_fu_770_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_342_s <= zext_ln193_2_fu_755_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_342_s <= zext_ln193_13_fu_748_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_342_s <= zext_ln193_4_fu_659_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_GFMul_fu_342_s <= zext_ln193_9_fu_648_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_GFMul_fu_342_s <= zext_ln193_3_fu_625_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_GFMul_fu_342_s <= zext_ln193_14_fu_614_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_GFMul_fu_342_s <= zext_ln193_5_fu_513_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_GFMul_fu_342_s <= zext_ln193_10_fu_502_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_GFMul_fu_342_s <= zext_ln193_fu_471_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_GFMul_fu_342_s <= zext_ln193_15_fu_464_p1;
        else 
            grp_GFMul_fu_342_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_GFMul_fu_349_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_GFMul_fu_349_n <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_GFMul_fu_349_n <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_349_n <= ap_const_lv4_3;
        else 
            grp_GFMul_fu_349_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_349_s_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln193_15_fu_464_p1, zext_ln193_fu_471_p1, zext_ln193_10_fu_502_p1, zext_ln193_5_fu_513_p1, zext_ln193_14_fu_614_p1, zext_ln193_3_fu_625_p1, zext_ln193_9_fu_648_p1, zext_ln193_4_fu_659_p1, zext_ln193_13_fu_748_p1, zext_ln193_2_fu_755_p1, zext_ln193_8_fu_770_p1, zext_ln193_7_fu_781_p1, zext_ln193_1_fu_862_p1, zext_ln193_6_fu_873_p1, zext_ln193_11_fu_884_p1, zext_ln193_12_fu_895_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_GFMul_fu_349_s <= zext_ln193_12_fu_895_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_GFMul_fu_349_s <= zext_ln193_11_fu_884_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_GFMul_fu_349_s <= zext_ln193_6_fu_873_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_GFMul_fu_349_s <= zext_ln193_1_fu_862_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_349_s <= zext_ln193_7_fu_781_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_349_s <= zext_ln193_8_fu_770_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_349_s <= zext_ln193_2_fu_755_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_349_s <= zext_ln193_13_fu_748_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_349_s <= zext_ln193_4_fu_659_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_GFMul_fu_349_s <= zext_ln193_9_fu_648_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_GFMul_fu_349_s <= zext_ln193_3_fu_625_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_GFMul_fu_349_s <= zext_ln193_14_fu_614_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_GFMul_fu_349_s <= zext_ln193_5_fu_513_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_GFMul_fu_349_s <= zext_ln193_10_fu_502_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_GFMul_fu_349_s <= zext_ln193_fu_471_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_GFMul_fu_349_s <= zext_ln193_15_fu_464_p1;
        else 
            grp_GFMul_fu_349_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_GFMul_fu_356_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_GFMul_fu_356_n <= ap_const_lv4_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_GFMul_fu_356_n <= ap_const_lv4_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_356_n <= ap_const_lv4_2;
        else 
            grp_GFMul_fu_356_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_356_s_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln193_15_fu_464_p1, zext_ln193_fu_471_p1, zext_ln193_10_fu_502_p1, zext_ln193_5_fu_513_p1, zext_ln193_14_fu_614_p1, zext_ln193_3_fu_625_p1, zext_ln193_9_fu_648_p1, zext_ln193_4_fu_659_p1, zext_ln193_13_fu_748_p1, zext_ln193_2_fu_755_p1, zext_ln193_8_fu_770_p1, zext_ln193_7_fu_781_p1, zext_ln193_1_fu_862_p1, zext_ln193_6_fu_873_p1, zext_ln193_11_fu_884_p1, zext_ln193_12_fu_895_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_GFMul_fu_356_s <= zext_ln193_12_fu_895_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_GFMul_fu_356_s <= zext_ln193_11_fu_884_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_GFMul_fu_356_s <= zext_ln193_6_fu_873_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_GFMul_fu_356_s <= zext_ln193_1_fu_862_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_356_s <= zext_ln193_7_fu_781_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_356_s <= zext_ln193_8_fu_770_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_356_s <= zext_ln193_2_fu_755_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_356_s <= zext_ln193_13_fu_748_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_356_s <= zext_ln193_4_fu_659_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_GFMul_fu_356_s <= zext_ln193_9_fu_648_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_GFMul_fu_356_s <= zext_ln193_3_fu_625_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_GFMul_fu_356_s <= zext_ln193_14_fu_614_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_GFMul_fu_356_s <= zext_ln193_5_fu_513_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_GFMul_fu_356_s <= zext_ln193_10_fu_502_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_GFMul_fu_356_s <= zext_ln193_fu_471_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_GFMul_fu_356_s <= zext_ln193_15_fu_464_p1;
        else 
            grp_GFMul_fu_356_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_addRoundKey_fu_369_ap_start <= grp_addRoundKey_fu_369_ap_start_reg;
    i_4_fu_428_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv4_1));
    icmp_ln324_fu_422_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv4_A) else "0";
    pArray_addr_15_reg_1067 <= ap_const_lv64_0(4 - 1 downto 0);
    pArray_addr_reg_988 <= ap_const_lv64_F(4 - 1 downto 0);

    pArray_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln324_fu_422_p2, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9, pArray_addr_reg_988, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_address0, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pArray_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pArray_address0 <= pArray_addr_reg_988;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pArray_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            pArray_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            pArray_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pArray_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pArray_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pArray_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            pArray_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            pArray_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif (((icmp_ln324_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pArray_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_address0 <= grp_addRoundKey_fu_369_array_r_address0;
        else 
            pArray_address0 <= "XXXX";
        end if; 
    end process;


    pArray_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln324_fu_422_p2, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9, pArray_addr_15_reg_1067, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_address1, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pArray_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pArray_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pArray_address1 <= pArray_addr_15_reg_1067;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            pArray_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            pArray_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pArray_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            pArray_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            pArray_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            pArray_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            pArray_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif (((icmp_ln324_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            pArray_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_address1 <= grp_addRoundKey_fu_369_array_r_address1;
        else 
            pArray_address1 <= "XXXX";
        end if; 
    end process;


    pArray_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln324_fu_422_p2, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_ce0, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (icmp_ln324_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pArray_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_ce0 <= grp_addRoundKey_fu_369_array_r_ce0;
        else 
            pArray_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pArray_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln324_fu_422_p2, ap_CS_fsm_state35, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_ce1, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start_int = ap_const_logic_1) and (icmp_ln324_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            pArray_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_ce1 <= grp_addRoundKey_fu_369_array_r_ce1;
        else 
            pArray_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pArray_d0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state6, xor_ln300_9_reg_1150, ap_CS_fsm_state10, xor_ln300_31_reg_1210, ap_CS_fsm_state14, xor_ln300_29_reg_1240, ap_CS_fsm_state18, xor_ln300_27_reg_1265, grp_addRoundKey_fu_369_array_r_d0, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, xor_ln300_25_fu_595_p2, xor_ln300_23_fu_719_p2, xor_ln300_21_fu_837_p2, xor_ln300_11_fu_933_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pArray_d0 <= xor_ln300_27_reg_1265;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pArray_d0 <= xor_ln300_11_fu_933_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pArray_d0 <= xor_ln300_29_reg_1240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pArray_d0 <= xor_ln300_21_fu_837_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pArray_d0 <= xor_ln300_31_reg_1210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pArray_d0 <= xor_ln300_23_fu_719_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pArray_d0 <= xor_ln300_9_reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pArray_d0 <= xor_ln300_25_fu_595_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_d0 <= grp_addRoundKey_fu_369_array_r_d0;
        else 
            pArray_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pArray_d1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state6, xor_ln300_1_reg_1145, ap_CS_fsm_state10, xor_ln300_15_reg_1205, ap_CS_fsm_state14, xor_ln300_13_reg_1235, xor_ln300_19_reg_1260, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_d1, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, xor_ln300_17_fu_576_p2, xor_ln300_7_fu_682_p2, xor_ln300_5_fu_800_p2, xor_ln300_3_fu_914_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            pArray_d1 <= xor_ln300_19_reg_1260;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            pArray_d1 <= xor_ln300_3_fu_914_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            pArray_d1 <= xor_ln300_13_reg_1235;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            pArray_d1 <= xor_ln300_5_fu_800_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pArray_d1 <= xor_ln300_15_reg_1205;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            pArray_d1 <= xor_ln300_7_fu_682_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            pArray_d1 <= xor_ln300_1_reg_1145;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            pArray_d1 <= xor_ln300_17_fu_576_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_d1 <= grp_addRoundKey_fu_369_array_r_d1;
        else 
            pArray_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pArray_we0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_we0, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            pArray_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_we0 <= grp_addRoundKey_fu_369_array_r_we0;
        else 
            pArray_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pArray_we1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, grp_addRoundKey_fu_369_array_r_we1, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            pArray_we1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            pArray_we1 <= grp_addRoundKey_fu_369_array_r_we1;
        else 
            pArray_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln58_10_fu_460_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_11_fu_655_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_12_fu_610_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_13_fu_520_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_14_fu_486_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_15_fu_443_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_1_fu_621_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_2_fu_509_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_3_fu_478_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_4_fu_490_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_5_fu_456_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_6_fu_644_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_7_fu_632_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_8_fu_606_p1 <= pArray_q1(8 - 1 downto 0);
    trunc_ln58_9_fu_498_p1 <= pArray_q0(8 - 1 downto 0);
    trunc_ln58_fu_439_p1 <= pArray_q1(8 - 1 downto 0);
    w_address0 <= grp_addRoundKey_fu_369_w_address0;
    w_address1 <= grp_addRoundKey_fu_369_w_address1;
    w_ce0 <= grp_addRoundKey_fu_369_w_ce0;
    w_ce1 <= grp_addRoundKey_fu_369_w_ce1;
    xor_ln300_10_fu_794_p2 <= (reg_402 xor reg_378);
    xor_ln300_11_fu_933_p2 <= (xor_ln300_22_fu_927_p2 xor xor_ln300_20_fu_921_p2);
    xor_ln300_12_fu_670_p2 <= (reg_390 xor grp_GFMul_fu_342_ap_return);
    xor_ln300_13_fu_819_p2 <= (xor_ln300_26_fu_813_p2 xor xor_ln300_24_fu_807_p2);
    xor_ln300_14_fu_676_p2 <= (reg_402 xor reg_378);
    xor_ln300_15_fu_701_p2 <= (xor_ln300_30_fu_695_p2 xor xor_ln300_28_fu_689_p2);
    xor_ln300_16_fu_546_p2 <= (reg_394 xor grp_GFMul_fu_349_ap_return);
    xor_ln300_17_fu_576_p2 <= (xor_ln300_33_fu_570_p2 xor xor_ln300_32_fu_564_p2);
    xor_ln300_18_fu_552_p2 <= (reg_406 xor reg_378);
    xor_ln300_19_fu_952_p2 <= (xor_ln300_35_fu_946_p2 xor xor_ln300_34_fu_940_p2);
    xor_ln300_1_fu_540_p2 <= (xor_ln300_fu_528_p2 xor xor_ln300_2_fu_534_p2);
    xor_ln300_20_fu_921_p2 <= (reg_394 xor reg_382);
    xor_ln300_21_fu_837_p2 <= (xor_ln300_37_fu_831_p2 xor xor_ln300_36_fu_825_p2);
    xor_ln300_22_fu_927_p2 <= (reg_406 xor grp_GFMul_fu_342_ap_return);
    xor_ln300_23_fu_719_p2 <= (xor_ln300_39_fu_713_p2 xor xor_ln300_38_fu_707_p2);
    xor_ln300_24_fu_807_p2 <= (reg_394 xor grp_GFMul_fu_349_ap_return);
    xor_ln300_25_fu_595_p2 <= (xor_ln300_41_fu_589_p2 xor xor_ln300_40_fu_583_p2);
    xor_ln300_26_fu_813_p2 <= (reg_406 xor reg_378);
    xor_ln300_27_fu_970_p2 <= (xor_ln300_43_fu_964_p2 xor xor_ln300_42_fu_958_p2);
    xor_ln300_28_fu_689_p2 <= (reg_394 xor grp_GFMul_fu_349_ap_return);
    xor_ln300_29_fu_856_p2 <= (xor_ln300_45_fu_850_p2 xor xor_ln300_44_fu_844_p2);
    xor_ln300_2_fu_534_p2 <= (reg_402 xor reg_378);
    xor_ln300_30_fu_695_p2 <= (reg_406 xor reg_378);
    xor_ln300_31_fu_738_p2 <= (xor_ln300_47_fu_732_p2 xor xor_ln300_46_fu_726_p2);
    xor_ln300_32_fu_564_p2 <= (reg_394 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_33_fu_570_p2 <= (reg_410 xor reg_382);
    xor_ln300_34_fu_940_p2 <= (reg_398 xor reg_382);
    xor_ln300_35_fu_946_p2 <= (reg_410 xor grp_GFMul_fu_349_ap_return);
    xor_ln300_36_fu_825_p2 <= (reg_394 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_37_fu_831_p2 <= (reg_410 xor reg_382);
    xor_ln300_38_fu_707_p2 <= (reg_394 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_39_fu_713_p2 <= (reg_410 xor reg_382);
    xor_ln300_3_fu_914_p2 <= (xor_ln300_6_fu_908_p2 xor xor_ln300_4_fu_902_p2);
    xor_ln300_40_fu_583_p2 <= (reg_398 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_41_fu_589_p2 <= (reg_402 xor reg_386);
    xor_ln300_42_fu_958_p2 <= (reg_398 xor reg_386);
    xor_ln300_43_fu_964_p2 <= (reg_402 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_44_fu_844_p2 <= (reg_398 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_45_fu_850_p2 <= (reg_402 xor reg_386);
    xor_ln300_46_fu_726_p2 <= (reg_398 xor grp_GFMul_fu_356_ap_return);
    xor_ln300_47_fu_732_p2 <= (reg_402 xor reg_386);
    xor_ln300_4_fu_902_p2 <= (reg_390 xor reg_378);
    xor_ln300_5_fu_800_p2 <= (xor_ln300_8_fu_788_p2 xor xor_ln300_10_fu_794_p2);
    xor_ln300_6_fu_908_p2 <= (reg_402 xor grp_GFMul_fu_342_ap_return);
    xor_ln300_7_fu_682_p2 <= (xor_ln300_14_fu_676_p2 xor xor_ln300_12_fu_670_p2);
    xor_ln300_8_fu_788_p2 <= (reg_390 xor grp_GFMul_fu_342_ap_return);
    xor_ln300_9_fu_558_p2 <= (xor_ln300_18_fu_552_p2 xor xor_ln300_16_fu_546_p2);
    xor_ln300_fu_528_p2 <= (reg_390 xor grp_GFMul_fu_342_ap_return);
    zext_ln193_10_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_11_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_12_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_13_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_14_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_15_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_1_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_2_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_3_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_4_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_5_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_6_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_7_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_8_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_9_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln193_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(S_q0),32));
    zext_ln58_10_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_7_reg_1175),64));
    zext_ln58_11_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_8_reg_1160),64));
    zext_ln58_12_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_9_reg_1125),64));
    zext_ln58_13_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_10_reg_1095),64));
    zext_ln58_14_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_11_reg_1195),64));
    zext_ln58_15_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_12_reg_1165),64));
    zext_ln58_16_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_13_reg_1135),64));
    zext_ln58_17_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_14_reg_1110),64));
    zext_ln58_18_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_15_fu_443_p1),64));
    zext_ln58_4_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_1_reg_1170),64));
    zext_ln58_5_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_2_reg_1130),64));
    zext_ln58_6_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_3_reg_1100),64));
    zext_ln58_7_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_4_reg_1115),64));
    zext_ln58_8_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_5_reg_1090),64));
    zext_ln58_9_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_6_reg_1190),64));
    zext_ln58_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln58_reg_1075),64));
end behav;
