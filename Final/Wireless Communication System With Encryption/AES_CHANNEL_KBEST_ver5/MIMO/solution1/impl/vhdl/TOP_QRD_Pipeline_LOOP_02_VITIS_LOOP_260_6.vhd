-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_260_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    R_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    R_full_n : IN STD_LOGIC;
    R_write : OUT STD_LOGIC;
    p_0_0_033131774_lcssa1956_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841870_lcssa2020_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131771_lcssa1954_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841867_lcssa2018_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131768_lcssa1952_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841864_lcssa2016_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131777_lcssa1958_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841873_lcssa2022_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121822_lcssa1988_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131918_lcssa2052_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121819_lcssa1986_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131915_lcssa2050_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121816_lcssa1984_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131912_lcssa2048_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121825_lcssa1990_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131921_lcssa2054_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131761_lcssa1948_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841857_lcssa2012_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131758_lcssa1946_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841854_lcssa2010_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131755_lcssa1944_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841851_lcssa2008_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131764_lcssa1950_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841860_lcssa2014_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121809_lcssa1980_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131905_lcssa2044_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121806_lcssa1978_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131902_lcssa2042_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121803_lcssa1976_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131899_lcssa2040_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121812_lcssa1982_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131908_lcssa2046_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131749_lcssa1940_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841845_lcssa2004_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131746_lcssa1938_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841842_lcssa2002_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131743_lcssa1936_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841839_lcssa2000_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131752_lcssa1942_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841848_lcssa2006_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121797_lcssa1972_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131893_lcssa2036_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121794_lcssa1970_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131890_lcssa2034_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121791_lcssa1968_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131887_lcssa2032_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121800_lcssa1974_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131896_lcssa2038_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131785_lcssa1964_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841881_lcssa2028_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131782_lcssa1962_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841878_lcssa2026_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131779_lcssa1960_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841875_lcssa2024_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131788_lcssa1966_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i23841884_lcssa2030_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121833_lcssa1996_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131929_lcssa2060_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121830_lcssa1994_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131926_lcssa2058_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121827_lcssa1992_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131923_lcssa2056_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033121836_lcssa1998_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_033131932_lcssa2062_reload : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_260_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln259_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal R_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_0_fu_817_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_reg_884 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_174 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln260_fu_839_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_178 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln259_fu_633_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_182 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln259_1_fu_601_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln260_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln259_fu_613_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_fu_625_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_641_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_663_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_685_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_707_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_729_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_751_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_773_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_795_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_fu_817_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_mux_84_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_84_16_1_1_U331 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033131774_lcssa1956_reload,
        din1 => conv_i_i_i23841870_lcssa2020_reload,
        din2 => p_0_0_033131771_lcssa1954_reload,
        din3 => conv_i_i_i23841867_lcssa2018_reload,
        din4 => p_0_0_033131768_lcssa1952_reload,
        din5 => conv_i_i_i23841864_lcssa2016_reload,
        din6 => p_0_0_033131777_lcssa1958_reload,
        din7 => conv_i_i_i23841873_lcssa2022_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_8_fu_641_p10);

    mux_84_16_1_1_U332 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033121822_lcssa1988_reload,
        din1 => p_0_0_033131918_lcssa2052_reload,
        din2 => p_0_0_033121819_lcssa1986_reload,
        din3 => p_0_0_033131915_lcssa2050_reload,
        din4 => p_0_0_033121816_lcssa1984_reload,
        din5 => p_0_0_033131912_lcssa2048_reload,
        din6 => p_0_0_033121825_lcssa1990_reload,
        din7 => p_0_0_033131921_lcssa2054_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_9_fu_663_p10);

    mux_84_16_1_1_U333 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033131761_lcssa1948_reload,
        din1 => conv_i_i_i23841857_lcssa2012_reload,
        din2 => p_0_0_033131758_lcssa1946_reload,
        din3 => conv_i_i_i23841854_lcssa2010_reload,
        din4 => p_0_0_033131755_lcssa1944_reload,
        din5 => conv_i_i_i23841851_lcssa2008_reload,
        din6 => p_0_0_033131764_lcssa1950_reload,
        din7 => conv_i_i_i23841860_lcssa2014_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_10_fu_685_p10);

    mux_84_16_1_1_U334 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033121809_lcssa1980_reload,
        din1 => p_0_0_033131905_lcssa2044_reload,
        din2 => p_0_0_033121806_lcssa1978_reload,
        din3 => p_0_0_033131902_lcssa2042_reload,
        din4 => p_0_0_033121803_lcssa1976_reload,
        din5 => p_0_0_033131899_lcssa2040_reload,
        din6 => p_0_0_033121812_lcssa1982_reload,
        din7 => p_0_0_033131908_lcssa2046_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_11_fu_707_p10);

    mux_84_16_1_1_U335 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033131749_lcssa1940_reload,
        din1 => conv_i_i_i23841845_lcssa2004_reload,
        din2 => p_0_0_033131746_lcssa1938_reload,
        din3 => conv_i_i_i23841842_lcssa2002_reload,
        din4 => p_0_0_033131743_lcssa1936_reload,
        din5 => conv_i_i_i23841839_lcssa2000_reload,
        din6 => p_0_0_033131752_lcssa1942_reload,
        din7 => conv_i_i_i23841848_lcssa2006_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_12_fu_729_p10);

    mux_84_16_1_1_U336 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033121797_lcssa1972_reload,
        din1 => p_0_0_033131893_lcssa2036_reload,
        din2 => p_0_0_033121794_lcssa1970_reload,
        din3 => p_0_0_033131890_lcssa2034_reload,
        din4 => p_0_0_033121791_lcssa1968_reload,
        din5 => p_0_0_033131887_lcssa2032_reload,
        din6 => p_0_0_033121800_lcssa1974_reload,
        din7 => p_0_0_033131896_lcssa2038_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_13_fu_751_p10);

    mux_84_16_1_1_U337 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033131785_lcssa1964_reload,
        din1 => conv_i_i_i23841881_lcssa2028_reload,
        din2 => p_0_0_033131782_lcssa1962_reload,
        din3 => conv_i_i_i23841878_lcssa2026_reload,
        din4 => p_0_0_033131779_lcssa1960_reload,
        din5 => conv_i_i_i23841875_lcssa2024_reload,
        din6 => p_0_0_033131788_lcssa1966_reload,
        din7 => conv_i_i_i23841884_lcssa2030_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_14_fu_773_p10);

    mux_84_16_1_1_U338 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => p_0_0_033121833_lcssa1996_reload,
        din1 => p_0_0_033131929_lcssa2060_reload,
        din2 => p_0_0_033121830_lcssa1994_reload,
        din3 => p_0_0_033131926_lcssa2058_reload,
        din4 => p_0_0_033121827_lcssa1992_reload,
        din5 => p_0_0_033131923_lcssa2056_reload,
        din6 => p_0_0_033121836_lcssa1998_reload,
        din7 => p_0_0_033131932_lcssa2062_reload,
        din8 => select_ln118_fu_625_p3,
        dout => tmp_15_fu_795_p10);

    mux_84_16_1_1_U339 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => tmp_8_fu_641_p10,
        din1 => tmp_9_fu_663_p10,
        din2 => tmp_10_fu_685_p10,
        din3 => tmp_11_fu_707_p10,
        din4 => tmp_12_fu_729_p10,
        din5 => tmp_13_fu_751_p10,
        din6 => tmp_14_fu_773_p10,
        din7 => tmp_15_fu_795_p10,
        din8 => p_0_fu_817_p9,
        dout => p_0_fu_817_p10);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln259_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_178 <= select_ln259_fu_633_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_178 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln259_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_182 <= add_ln259_1_fu_601_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_182 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln259_fu_595_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_174 <= add_ln260_fu_839_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_174 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln259_fu_595_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_0_reg_884 <= p_0_fu_817_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    R_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, R_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            R_blk_n <= R_full_n;
        else 
            R_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    R_din <= p_0_reg_884;

    R_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            R_write <= ap_const_logic_1;
        else 
            R_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln259_1_fu_601_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln259_fu_613_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln260_fu_839_p2 <= std_logic_vector(unsigned(select_ln118_fu_625_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, R_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = R_full_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, R_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = R_full_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, R_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = R_full_n) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(R_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_0 = R_full_n);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln259_fu_595_p2)
    begin
        if (((icmp_ln259_fu_595_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_178)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_178;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_182)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_182;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_174, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_174;
        end if; 
    end process;

    icmp_ln259_fu_595_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln260_fu_619_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    p_0_fu_817_p9 <= 
        add_ln259_fu_613_p2 when (icmp_ln260_fu_619_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln118_fu_625_p3 <= 
        ap_const_lv4_0 when (icmp_ln260_fu_619_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln259_fu_633_p3 <= 
        add_ln259_fu_613_p2 when (icmp_ln260_fu_619_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
end behav;
