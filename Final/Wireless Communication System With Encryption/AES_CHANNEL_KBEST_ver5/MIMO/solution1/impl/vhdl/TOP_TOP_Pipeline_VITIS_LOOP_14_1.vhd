-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_TOP_Pipeline_VITIS_LOOP_14_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    KB_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    KB_out_empty_n : IN STD_LOGIC;
    KB_out_read : OUT STD_LOGIC;
    demod_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    demod_out_full_n : IN STD_LOGIC;
    demod_out_write : OUT STD_LOGIC );
end;


architecture behav of TOP_TOP_Pipeline_VITIS_LOOP_14_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln14_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal icmp_ln14_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal KB_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal demod_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal KB_out_read_reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal KB_out_read_1_reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal KB_out_read_2_reg_301 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal KB_out_read_3_reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal KB_out_read_4_reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal KB_out_read_5_reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal KB_out_read_6_reg_321 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal data_idx_5_fu_56 : STD_LOGIC_VECTOR (4 downto 0);
    signal data_idx_6_fu_87_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_data_idx : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1547_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1547_1_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_143_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln223_fu_139_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln39_fu_151_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln1547_4_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_1_fu_163_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln223_1_fu_159_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln39_1_fu_171_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln1547_5_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_2_fu_183_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln223_2_fu_179_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_2_fu_191_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1547_2_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_3_fu_203_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln223_3_fu_199_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln39_3_fu_211_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1547_6_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_4_fu_223_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln223_4_fu_219_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln39_4_fu_231_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1547_3_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_5_fu_243_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln223_5_fu_239_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln39_5_fu_251_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1547_7_fu_133_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln223_6_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln223_6_fu_259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    data_idx_5_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln14_fu_81_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    data_idx_5_fu_56 <= data_idx_6_fu_87_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    data_idx_5_fu_56 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                KB_out_read_1_reg_296 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                KB_out_read_2_reg_301 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                KB_out_read_3_reg_306 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                KB_out_read_4_reg_311 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                KB_out_read_5_reg_316 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                KB_out_read_6_reg_321 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                KB_out_read_reg_291 <= KB_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_287 <= icmp_ln14_fu_81_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage7_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    KB_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, KB_out_empty_n, ap_CS_fsm_pp0_stage7, icmp_ln14_reg_287, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage0)
    begin
        if ((((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            KB_out_blk_n <= KB_out_empty_n;
        else 
            KB_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    KB_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, icmp_ln14_reg_287, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            KB_out_read <= ap_const_logic_1;
        else 
            KB_out_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, KB_out_empty_n, demod_out_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((demod_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = KB_out_empty_n)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, KB_out_empty_n, demod_out_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((demod_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = KB_out_empty_n)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, KB_out_empty_n, demod_out_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((demod_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = KB_out_empty_n)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage2_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage2_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage3_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage3_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage4_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage4_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage5_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage5_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage6_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage6_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage7_11001 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_pp0_stage7_subdone <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state6_pp0_stage5_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state6_pp0_stage5_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state7_pp0_stage6_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state7_pp0_stage6_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state8_pp0_stage7_iter0_assign_proc : process(KB_out_empty_n, icmp_ln14_reg_287)
    begin
                ap_block_state8_pp0_stage7_iter0 <= ((icmp_ln14_reg_287 = ap_const_lv1_0) and (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_block_state9_pp0_stage0_iter1_assign_proc : process(KB_out_empty_n, demod_out_full_n)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((demod_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = KB_out_empty_n));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln14_fu_81_p2)
    begin
        if (((icmp_ln14_fu_81_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_data_idx_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_idx_5_fu_56, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_data_idx <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_data_idx <= data_idx_5_fu_56;
        end if; 
    end process;

    data_idx_6_fu_87_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_data_idx) + unsigned(ap_const_lv5_1));

    demod_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, demod_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            demod_out_blk_n <= demod_out_full_n;
        else 
            demod_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    demod_out_din <= 
        or_ln223_6_fu_263_p3 when (icmp_ln1547_7_fu_133_p2(0) = '1') else 
        zext_ln223_6_fu_259_p1;

    demod_out_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            demod_out_write <= ap_const_logic_1;
        else 
            demod_out_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln14_fu_81_p2 <= "1" when (ap_sig_allocacmp_data_idx = ap_const_lv5_10) else "0";
    icmp_ln1547_1_fu_103_p2 <= "1" when (signed(KB_out_read_1_reg_296) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_2_fu_118_p2 <= "1" when (signed(KB_out_read_4_reg_311) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_3_fu_128_p2 <= "1" when (signed(KB_out_read_6_reg_321) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_4_fu_108_p2 <= "1" when (signed(KB_out_read_2_reg_301) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_5_fu_113_p2 <= "1" when (signed(KB_out_read_3_reg_306) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_6_fu_123_p2 <= "1" when (signed(KB_out_read_5_reg_316) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_7_fu_133_p2 <= "1" when (signed(KB_out_dout) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1547_fu_98_p2 <= "1" when (signed(KB_out_read_reg_291) > signed(ap_const_lv16_0)) else "0";
    or_ln223_1_fu_163_p3 <= (ap_const_lv1_1 & select_ln39_fu_151_p3);
    or_ln223_2_fu_183_p3 <= (ap_const_lv1_1 & select_ln39_1_fu_171_p3);
    or_ln223_3_fu_203_p3 <= (ap_const_lv1_1 & select_ln39_2_fu_191_p3);
    or_ln223_4_fu_223_p3 <= (ap_const_lv1_1 & select_ln39_3_fu_211_p3);
    or_ln223_5_fu_243_p3 <= (ap_const_lv1_1 & select_ln39_4_fu_231_p3);
    or_ln223_6_fu_263_p3 <= (ap_const_lv1_1 & select_ln39_5_fu_251_p3);
    or_ln_fu_143_p3 <= (ap_const_lv1_1 & icmp_ln1547_fu_98_p2);
    select_ln39_1_fu_171_p3 <= 
        or_ln223_1_fu_163_p3 when (icmp_ln1547_4_fu_108_p2(0) = '1') else 
        zext_ln223_1_fu_159_p1;
    select_ln39_2_fu_191_p3 <= 
        or_ln223_2_fu_183_p3 when (icmp_ln1547_5_fu_113_p2(0) = '1') else 
        zext_ln223_2_fu_179_p1;
    select_ln39_3_fu_211_p3 <= 
        or_ln223_3_fu_203_p3 when (icmp_ln1547_2_fu_118_p2(0) = '1') else 
        zext_ln223_3_fu_199_p1;
    select_ln39_4_fu_231_p3 <= 
        or_ln223_4_fu_223_p3 when (icmp_ln1547_6_fu_123_p2(0) = '1') else 
        zext_ln223_4_fu_219_p1;
    select_ln39_5_fu_251_p3 <= 
        or_ln223_5_fu_243_p3 when (icmp_ln1547_3_fu_128_p2(0) = '1') else 
        zext_ln223_5_fu_239_p1;
    select_ln39_fu_151_p3 <= 
        or_ln_fu_143_p3 when (icmp_ln1547_1_fu_103_p2(0) = '1') else 
        zext_ln223_fu_139_p1;
    zext_ln223_1_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_fu_151_p3),3));
    zext_ln223_2_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_1_fu_171_p3),4));
    zext_ln223_3_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_2_fu_191_p3),5));
    zext_ln223_4_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_3_fu_211_p3),6));
    zext_ln223_5_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_4_fu_231_p3),7));
    zext_ln223_6_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_5_fu_251_p3),8));
    zext_ln223_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1547_fu_98_p2),2));
end behav;
