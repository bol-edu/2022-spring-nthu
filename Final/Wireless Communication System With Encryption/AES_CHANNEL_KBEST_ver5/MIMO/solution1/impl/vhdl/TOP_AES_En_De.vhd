-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_AES_En_De is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    TOP_ap_uint_8_ap_uint_8_in_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    TOP_ap_uint_8_ap_uint_8_in_stream_empty_n : IN STD_LOGIC;
    TOP_ap_uint_8_ap_uint_8_in_stream_read : OUT STD_LOGIC;
    TOP_ap_uint_8_ap_uint_8_AES_EN_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n : IN STD_LOGIC;
    TOP_ap_uint_8_ap_uint_8_AES_EN_out_write : OUT STD_LOGIC;
    op : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of TOP_AES_En_De is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal key_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_V_ce0 : STD_LOGIC;
    signal key_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_key_ce0 : STD_LOGIC;
    signal temp_key_we0 : STD_LOGIC;
    signal temp_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce0 : STD_LOGIC;
    signal w_we0 : STD_LOGIC;
    signal w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce1 : STD_LOGIC;
    signal w_we1 : STD_LOGIC;
    signal w_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit128in_buffer_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_0_ce0 : STD_LOGIC;
    signal bit128in_buffer_0_we0 : STD_LOGIC;
    signal bit128in_buffer_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_1_ce0 : STD_LOGIC;
    signal bit128in_buffer_1_we0 : STD_LOGIC;
    signal bit128in_buffer_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_2_ce0 : STD_LOGIC;
    signal bit128in_buffer_2_we0 : STD_LOGIC;
    signal bit128in_buffer_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_3_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_3_ce0 : STD_LOGIC;
    signal bit128in_buffer_3_we0 : STD_LOGIC;
    signal bit128in_buffer_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_4_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_4_ce0 : STD_LOGIC;
    signal bit128in_buffer_4_we0 : STD_LOGIC;
    signal bit128in_buffer_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_5_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_5_ce0 : STD_LOGIC;
    signal bit128in_buffer_5_we0 : STD_LOGIC;
    signal bit128in_buffer_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_6_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_6_ce0 : STD_LOGIC;
    signal bit128in_buffer_6_we0 : STD_LOGIC;
    signal bit128in_buffer_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_7_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_7_ce0 : STD_LOGIC;
    signal bit128in_buffer_7_we0 : STD_LOGIC;
    signal bit128in_buffer_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_8_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_8_ce0 : STD_LOGIC;
    signal bit128in_buffer_8_we0 : STD_LOGIC;
    signal bit128in_buffer_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_9_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_9_ce0 : STD_LOGIC;
    signal bit128in_buffer_9_we0 : STD_LOGIC;
    signal bit128in_buffer_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_10_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_10_ce0 : STD_LOGIC;
    signal bit128in_buffer_10_we0 : STD_LOGIC;
    signal bit128in_buffer_10_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_11_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_11_ce0 : STD_LOGIC;
    signal bit128in_buffer_11_we0 : STD_LOGIC;
    signal bit128in_buffer_11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_12_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_12_ce0 : STD_LOGIC;
    signal bit128in_buffer_12_we0 : STD_LOGIC;
    signal bit128in_buffer_12_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_13_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_13_ce0 : STD_LOGIC;
    signal bit128in_buffer_13_we0 : STD_LOGIC;
    signal bit128in_buffer_13_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_14_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_14_ce0 : STD_LOGIC;
    signal bit128in_buffer_14_we0 : STD_LOGIC;
    signal bit128in_buffer_14_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_15_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal bit128in_buffer_15_ce0 : STD_LOGIC;
    signal bit128in_buffer_15_we0 : STD_LOGIC;
    signal bit128in_buffer_15_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal TOP_ap_uint_8_ap_uint_8_in_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_do_init_phi_fu_330_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal do_init_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal zext_ln510_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln510_reg_541 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_key_addr_reg_551 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_510_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_556 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln510_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln510_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln521_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln521_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal key_char_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_char_ce0 : STD_LOGIC;
    signal key_char_we0 : STD_LOGIC;
    signal key_char_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_char_ce1 : STD_LOGIC;
    signal key_char_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_extendKey_fu_413_ap_start : STD_LOGIC;
    signal grp_extendKey_fu_413_ap_done : STD_LOGIC;
    signal grp_extendKey_fu_413_ap_idle : STD_LOGIC;
    signal grp_extendKey_fu_413_ap_ready : STD_LOGIC;
    signal grp_extendKey_fu_413_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_extendKey_fu_413_key_ce0 : STD_LOGIC;
    signal grp_extendKey_fu_413_key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_extendKey_fu_413_key_ce1 : STD_LOGIC;
    signal grp_extendKey_fu_413_w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_extendKey_fu_413_w_ce0 : STD_LOGIC;
    signal grp_extendKey_fu_413_w_we0 : STD_LOGIC;
    signal grp_extendKey_fu_413_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_extendKey_fu_413_w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_extendKey_fu_413_w_ce1 : STD_LOGIC;
    signal grp_extendKey_fu_413_w_we1 : STD_LOGIC;
    signal grp_extendKey_fu_413_w_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aes_return_fu_424_ap_start : STD_LOGIC;
    signal grp_aes_return_fu_424_ap_done : STD_LOGIC;
    signal grp_aes_return_fu_424_ap_idle : STD_LOGIC;
    signal grp_aes_return_fu_424_ap_ready : STD_LOGIC;
    signal grp_aes_return_fu_424_w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_return_fu_424_w_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_aes_return_fu_424_w_ce1 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_0_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_1_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_2_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_3_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_3_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_4_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_4_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_5_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_5_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_6_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_6_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_7_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_7_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_8_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_8_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_9_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_9_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_10_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_10_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_11_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_11_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_12_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_12_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_13_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_13_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_14_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_14_ce0 : STD_LOGIC;
    signal grp_aes_return_fu_424_bit128in_buffer_15_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_aes_return_fu_424_bit128in_buffer_15_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_ap_start : STD_LOGIC;
    signal grp_deAes_return_fu_464_ap_done : STD_LOGIC;
    signal grp_deAes_return_fu_464_ap_idle : STD_LOGIC;
    signal grp_deAes_return_fu_464_ap_ready : STD_LOGIC;
    signal grp_deAes_return_fu_464_w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_deAes_return_fu_464_w_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_deAes_return_fu_464_w_ce1 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_0_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_1_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_2_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_3_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_3_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_4_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_4_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_5_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_5_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_6_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_6_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_7_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_7_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_8_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_8_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_9_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_9_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_10_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_10_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_11_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_11_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_12_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_12_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_13_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_13_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_14_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_14_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_464_bit128in_buffer_15_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_deAes_return_fu_464_bit128in_buffer_15_ce0 : STD_LOGIC;
    signal op35_phi_reg_387 : STD_LOGIC_VECTOR (0 downto 0);
    signal op35_rewind_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal key_change_flag34_reg_357 : STD_LOGIC_VECTOR (7 downto 0);
    signal i32_reg_372 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state17 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal key_change_flag_reg_399 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln514_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_extendKey_fu_413_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_aes_return_fu_424_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_deAes_return_fu_464_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_block_state22_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_extendKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_we0 : OUT STD_LOGIC;
        w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_we1 : OUT STD_LOGIC;
        w_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_aes_return IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bit128in_buffer_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_0_ce0 : OUT STD_LOGIC;
        bit128in_buffer_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_1_ce0 : OUT STD_LOGIC;
        bit128in_buffer_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_2_ce0 : OUT STD_LOGIC;
        bit128in_buffer_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_3_ce0 : OUT STD_LOGIC;
        bit128in_buffer_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_4_ce0 : OUT STD_LOGIC;
        bit128in_buffer_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_5_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_5_ce0 : OUT STD_LOGIC;
        bit128in_buffer_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_6_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_6_ce0 : OUT STD_LOGIC;
        bit128in_buffer_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_7_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_7_ce0 : OUT STD_LOGIC;
        bit128in_buffer_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_8_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_8_ce0 : OUT STD_LOGIC;
        bit128in_buffer_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_9_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_9_ce0 : OUT STD_LOGIC;
        bit128in_buffer_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_10_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_10_ce0 : OUT STD_LOGIC;
        bit128in_buffer_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_11_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_11_ce0 : OUT STD_LOGIC;
        bit128in_buffer_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_12_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_12_ce0 : OUT STD_LOGIC;
        bit128in_buffer_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_13_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_13_ce0 : OUT STD_LOGIC;
        bit128in_buffer_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_14_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_14_ce0 : OUT STD_LOGIC;
        bit128in_buffer_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_15_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_15_ce0 : OUT STD_LOGIC;
        bit128in_buffer_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_deAes_return IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bit128in_buffer_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_0_ce0 : OUT STD_LOGIC;
        bit128in_buffer_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_1_ce0 : OUT STD_LOGIC;
        bit128in_buffer_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_2_ce0 : OUT STD_LOGIC;
        bit128in_buffer_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_3_ce0 : OUT STD_LOGIC;
        bit128in_buffer_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_4_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_4_ce0 : OUT STD_LOGIC;
        bit128in_buffer_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_5_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_5_ce0 : OUT STD_LOGIC;
        bit128in_buffer_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_6_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_6_ce0 : OUT STD_LOGIC;
        bit128in_buffer_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_7_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_7_ce0 : OUT STD_LOGIC;
        bit128in_buffer_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_8_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_8_ce0 : OUT STD_LOGIC;
        bit128in_buffer_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_9_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_9_ce0 : OUT STD_LOGIC;
        bit128in_buffer_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_10_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_10_ce0 : OUT STD_LOGIC;
        bit128in_buffer_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_11_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_11_ce0 : OUT STD_LOGIC;
        bit128in_buffer_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_12_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_12_ce0 : OUT STD_LOGIC;
        bit128in_buffer_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_13_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_13_ce0 : OUT STD_LOGIC;
        bit128in_buffer_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_14_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_14_ce0 : OUT STD_LOGIC;
        bit128in_buffer_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bit128in_buffer_15_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        bit128in_buffer_15_ce0 : OUT STD_LOGIC;
        bit128in_buffer_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_AES_En_De_key_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_AES_En_De_temp_key_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_AES_En_De_w_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_AES_En_De_key_char_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    key_V_U : component TOP_AES_En_De_key_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => key_V_address0,
        ce0 => key_V_ce0,
        q0 => key_V_q0);

    temp_key_U : component TOP_AES_En_De_temp_key_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_key_address0,
        ce0 => temp_key_ce0,
        we0 => temp_key_we0,
        d0 => key_V_q0,
        q0 => temp_key_q0);

    w_U : component TOP_AES_En_De_w_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_address0,
        ce0 => w_ce0,
        we0 => w_we0,
        d0 => grp_extendKey_fu_413_w_d0,
        q0 => w_q0,
        address1 => w_address1,
        ce1 => w_ce1,
        we1 => w_we1,
        d1 => grp_extendKey_fu_413_w_d1,
        q1 => w_q1);

    bit128in_buffer_0_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_0_address0,
        ce0 => bit128in_buffer_0_ce0,
        we0 => bit128in_buffer_0_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_0_q0);

    bit128in_buffer_1_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_1_address0,
        ce0 => bit128in_buffer_1_ce0,
        we0 => bit128in_buffer_1_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_1_q0);

    bit128in_buffer_2_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_2_address0,
        ce0 => bit128in_buffer_2_ce0,
        we0 => bit128in_buffer_2_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_2_q0);

    bit128in_buffer_3_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_3_address0,
        ce0 => bit128in_buffer_3_ce0,
        we0 => bit128in_buffer_3_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_3_q0);

    bit128in_buffer_4_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_4_address0,
        ce0 => bit128in_buffer_4_ce0,
        we0 => bit128in_buffer_4_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_4_q0);

    bit128in_buffer_5_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_5_address0,
        ce0 => bit128in_buffer_5_ce0,
        we0 => bit128in_buffer_5_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_5_q0);

    bit128in_buffer_6_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_6_address0,
        ce0 => bit128in_buffer_6_ce0,
        we0 => bit128in_buffer_6_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_6_q0);

    bit128in_buffer_7_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_7_address0,
        ce0 => bit128in_buffer_7_ce0,
        we0 => bit128in_buffer_7_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_7_q0);

    bit128in_buffer_8_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_8_address0,
        ce0 => bit128in_buffer_8_ce0,
        we0 => bit128in_buffer_8_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_8_q0);

    bit128in_buffer_9_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_9_address0,
        ce0 => bit128in_buffer_9_ce0,
        we0 => bit128in_buffer_9_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_9_q0);

    bit128in_buffer_10_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_10_address0,
        ce0 => bit128in_buffer_10_ce0,
        we0 => bit128in_buffer_10_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_10_q0);

    bit128in_buffer_11_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_11_address0,
        ce0 => bit128in_buffer_11_ce0,
        we0 => bit128in_buffer_11_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_11_q0);

    bit128in_buffer_12_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_12_address0,
        ce0 => bit128in_buffer_12_ce0,
        we0 => bit128in_buffer_12_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_12_q0);

    bit128in_buffer_13_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_13_address0,
        ce0 => bit128in_buffer_13_ce0,
        we0 => bit128in_buffer_13_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_13_q0);

    bit128in_buffer_14_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_14_address0,
        ce0 => bit128in_buffer_14_ce0,
        we0 => bit128in_buffer_14_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_14_q0);

    bit128in_buffer_15_U : component TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 21600,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit128in_buffer_15_address0,
        ce0 => bit128in_buffer_15_ce0,
        we0 => bit128in_buffer_15_we0,
        d0 => TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        q0 => bit128in_buffer_15_q0);

    key_char_U : component TOP_AES_En_De_key_char_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => key_char_address0,
        ce0 => key_char_ce0,
        we0 => key_char_we0,
        d0 => key_V_q0,
        q0 => key_char_q0,
        address1 => grp_extendKey_fu_413_key_address1,
        ce1 => key_char_ce1,
        q1 => key_char_q1);

    grp_extendKey_fu_413 : component TOP_extendKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extendKey_fu_413_ap_start,
        ap_done => grp_extendKey_fu_413_ap_done,
        ap_idle => grp_extendKey_fu_413_ap_idle,
        ap_ready => grp_extendKey_fu_413_ap_ready,
        key_address0 => grp_extendKey_fu_413_key_address0,
        key_ce0 => grp_extendKey_fu_413_key_ce0,
        key_q0 => key_char_q0,
        key_address1 => grp_extendKey_fu_413_key_address1,
        key_ce1 => grp_extendKey_fu_413_key_ce1,
        key_q1 => key_char_q1,
        w_address0 => grp_extendKey_fu_413_w_address0,
        w_ce0 => grp_extendKey_fu_413_w_ce0,
        w_we0 => grp_extendKey_fu_413_w_we0,
        w_d0 => grp_extendKey_fu_413_w_d0,
        w_q0 => w_q0,
        w_address1 => grp_extendKey_fu_413_w_address1,
        w_ce1 => grp_extendKey_fu_413_w_ce1,
        w_we1 => grp_extendKey_fu_413_w_we1,
        w_d1 => grp_extendKey_fu_413_w_d1,
        w_q1 => w_q1);

    grp_aes_return_fu_424 : component TOP_aes_return
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes_return_fu_424_ap_start,
        ap_done => grp_aes_return_fu_424_ap_done,
        ap_idle => grp_aes_return_fu_424_ap_idle,
        ap_ready => grp_aes_return_fu_424_ap_ready,
        w_address0 => grp_aes_return_fu_424_w_address0,
        w_ce0 => grp_aes_return_fu_424_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_aes_return_fu_424_w_address1,
        w_ce1 => grp_aes_return_fu_424_w_ce1,
        w_q1 => w_q1,
        bit128in_buffer_0_address0 => grp_aes_return_fu_424_bit128in_buffer_0_address0,
        bit128in_buffer_0_ce0 => grp_aes_return_fu_424_bit128in_buffer_0_ce0,
        bit128in_buffer_0_q0 => bit128in_buffer_0_q0,
        bit128in_buffer_1_address0 => grp_aes_return_fu_424_bit128in_buffer_1_address0,
        bit128in_buffer_1_ce0 => grp_aes_return_fu_424_bit128in_buffer_1_ce0,
        bit128in_buffer_1_q0 => bit128in_buffer_1_q0,
        bit128in_buffer_2_address0 => grp_aes_return_fu_424_bit128in_buffer_2_address0,
        bit128in_buffer_2_ce0 => grp_aes_return_fu_424_bit128in_buffer_2_ce0,
        bit128in_buffer_2_q0 => bit128in_buffer_2_q0,
        bit128in_buffer_3_address0 => grp_aes_return_fu_424_bit128in_buffer_3_address0,
        bit128in_buffer_3_ce0 => grp_aes_return_fu_424_bit128in_buffer_3_ce0,
        bit128in_buffer_3_q0 => bit128in_buffer_3_q0,
        bit128in_buffer_4_address0 => grp_aes_return_fu_424_bit128in_buffer_4_address0,
        bit128in_buffer_4_ce0 => grp_aes_return_fu_424_bit128in_buffer_4_ce0,
        bit128in_buffer_4_q0 => bit128in_buffer_4_q0,
        bit128in_buffer_5_address0 => grp_aes_return_fu_424_bit128in_buffer_5_address0,
        bit128in_buffer_5_ce0 => grp_aes_return_fu_424_bit128in_buffer_5_ce0,
        bit128in_buffer_5_q0 => bit128in_buffer_5_q0,
        bit128in_buffer_6_address0 => grp_aes_return_fu_424_bit128in_buffer_6_address0,
        bit128in_buffer_6_ce0 => grp_aes_return_fu_424_bit128in_buffer_6_ce0,
        bit128in_buffer_6_q0 => bit128in_buffer_6_q0,
        bit128in_buffer_7_address0 => grp_aes_return_fu_424_bit128in_buffer_7_address0,
        bit128in_buffer_7_ce0 => grp_aes_return_fu_424_bit128in_buffer_7_ce0,
        bit128in_buffer_7_q0 => bit128in_buffer_7_q0,
        bit128in_buffer_8_address0 => grp_aes_return_fu_424_bit128in_buffer_8_address0,
        bit128in_buffer_8_ce0 => grp_aes_return_fu_424_bit128in_buffer_8_ce0,
        bit128in_buffer_8_q0 => bit128in_buffer_8_q0,
        bit128in_buffer_9_address0 => grp_aes_return_fu_424_bit128in_buffer_9_address0,
        bit128in_buffer_9_ce0 => grp_aes_return_fu_424_bit128in_buffer_9_ce0,
        bit128in_buffer_9_q0 => bit128in_buffer_9_q0,
        bit128in_buffer_10_address0 => grp_aes_return_fu_424_bit128in_buffer_10_address0,
        bit128in_buffer_10_ce0 => grp_aes_return_fu_424_bit128in_buffer_10_ce0,
        bit128in_buffer_10_q0 => bit128in_buffer_10_q0,
        bit128in_buffer_11_address0 => grp_aes_return_fu_424_bit128in_buffer_11_address0,
        bit128in_buffer_11_ce0 => grp_aes_return_fu_424_bit128in_buffer_11_ce0,
        bit128in_buffer_11_q0 => bit128in_buffer_11_q0,
        bit128in_buffer_12_address0 => grp_aes_return_fu_424_bit128in_buffer_12_address0,
        bit128in_buffer_12_ce0 => grp_aes_return_fu_424_bit128in_buffer_12_ce0,
        bit128in_buffer_12_q0 => bit128in_buffer_12_q0,
        bit128in_buffer_13_address0 => grp_aes_return_fu_424_bit128in_buffer_13_address0,
        bit128in_buffer_13_ce0 => grp_aes_return_fu_424_bit128in_buffer_13_ce0,
        bit128in_buffer_13_q0 => bit128in_buffer_13_q0,
        bit128in_buffer_14_address0 => grp_aes_return_fu_424_bit128in_buffer_14_address0,
        bit128in_buffer_14_ce0 => grp_aes_return_fu_424_bit128in_buffer_14_ce0,
        bit128in_buffer_14_q0 => bit128in_buffer_14_q0,
        bit128in_buffer_15_address0 => grp_aes_return_fu_424_bit128in_buffer_15_address0,
        bit128in_buffer_15_ce0 => grp_aes_return_fu_424_bit128in_buffer_15_ce0,
        bit128in_buffer_15_q0 => bit128in_buffer_15_q0);

    grp_deAes_return_fu_464 : component TOP_deAes_return
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_deAes_return_fu_464_ap_start,
        ap_done => grp_deAes_return_fu_464_ap_done,
        ap_idle => grp_deAes_return_fu_464_ap_idle,
        ap_ready => grp_deAes_return_fu_464_ap_ready,
        w_address0 => grp_deAes_return_fu_464_w_address0,
        w_ce0 => grp_deAes_return_fu_464_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_deAes_return_fu_464_w_address1,
        w_ce1 => grp_deAes_return_fu_464_w_ce1,
        w_q1 => w_q1,
        bit128in_buffer_0_address0 => grp_deAes_return_fu_464_bit128in_buffer_0_address0,
        bit128in_buffer_0_ce0 => grp_deAes_return_fu_464_bit128in_buffer_0_ce0,
        bit128in_buffer_0_q0 => bit128in_buffer_0_q0,
        bit128in_buffer_1_address0 => grp_deAes_return_fu_464_bit128in_buffer_1_address0,
        bit128in_buffer_1_ce0 => grp_deAes_return_fu_464_bit128in_buffer_1_ce0,
        bit128in_buffer_1_q0 => bit128in_buffer_1_q0,
        bit128in_buffer_2_address0 => grp_deAes_return_fu_464_bit128in_buffer_2_address0,
        bit128in_buffer_2_ce0 => grp_deAes_return_fu_464_bit128in_buffer_2_ce0,
        bit128in_buffer_2_q0 => bit128in_buffer_2_q0,
        bit128in_buffer_3_address0 => grp_deAes_return_fu_464_bit128in_buffer_3_address0,
        bit128in_buffer_3_ce0 => grp_deAes_return_fu_464_bit128in_buffer_3_ce0,
        bit128in_buffer_3_q0 => bit128in_buffer_3_q0,
        bit128in_buffer_4_address0 => grp_deAes_return_fu_464_bit128in_buffer_4_address0,
        bit128in_buffer_4_ce0 => grp_deAes_return_fu_464_bit128in_buffer_4_ce0,
        bit128in_buffer_4_q0 => bit128in_buffer_4_q0,
        bit128in_buffer_5_address0 => grp_deAes_return_fu_464_bit128in_buffer_5_address0,
        bit128in_buffer_5_ce0 => grp_deAes_return_fu_464_bit128in_buffer_5_ce0,
        bit128in_buffer_5_q0 => bit128in_buffer_5_q0,
        bit128in_buffer_6_address0 => grp_deAes_return_fu_464_bit128in_buffer_6_address0,
        bit128in_buffer_6_ce0 => grp_deAes_return_fu_464_bit128in_buffer_6_ce0,
        bit128in_buffer_6_q0 => bit128in_buffer_6_q0,
        bit128in_buffer_7_address0 => grp_deAes_return_fu_464_bit128in_buffer_7_address0,
        bit128in_buffer_7_ce0 => grp_deAes_return_fu_464_bit128in_buffer_7_ce0,
        bit128in_buffer_7_q0 => bit128in_buffer_7_q0,
        bit128in_buffer_8_address0 => grp_deAes_return_fu_464_bit128in_buffer_8_address0,
        bit128in_buffer_8_ce0 => grp_deAes_return_fu_464_bit128in_buffer_8_ce0,
        bit128in_buffer_8_q0 => bit128in_buffer_8_q0,
        bit128in_buffer_9_address0 => grp_deAes_return_fu_464_bit128in_buffer_9_address0,
        bit128in_buffer_9_ce0 => grp_deAes_return_fu_464_bit128in_buffer_9_ce0,
        bit128in_buffer_9_q0 => bit128in_buffer_9_q0,
        bit128in_buffer_10_address0 => grp_deAes_return_fu_464_bit128in_buffer_10_address0,
        bit128in_buffer_10_ce0 => grp_deAes_return_fu_464_bit128in_buffer_10_ce0,
        bit128in_buffer_10_q0 => bit128in_buffer_10_q0,
        bit128in_buffer_11_address0 => grp_deAes_return_fu_464_bit128in_buffer_11_address0,
        bit128in_buffer_11_ce0 => grp_deAes_return_fu_464_bit128in_buffer_11_ce0,
        bit128in_buffer_11_q0 => bit128in_buffer_11_q0,
        bit128in_buffer_12_address0 => grp_deAes_return_fu_464_bit128in_buffer_12_address0,
        bit128in_buffer_12_ce0 => grp_deAes_return_fu_464_bit128in_buffer_12_ce0,
        bit128in_buffer_12_q0 => bit128in_buffer_12_q0,
        bit128in_buffer_13_address0 => grp_deAes_return_fu_464_bit128in_buffer_13_address0,
        bit128in_buffer_13_ce0 => grp_deAes_return_fu_464_bit128in_buffer_13_ce0,
        bit128in_buffer_13_q0 => bit128in_buffer_13_q0,
        bit128in_buffer_14_address0 => grp_deAes_return_fu_464_bit128in_buffer_14_address0,
        bit128in_buffer_14_ce0 => grp_deAes_return_fu_464_bit128in_buffer_14_ce0,
        bit128in_buffer_14_q0 => bit128in_buffer_14_q0,
        bit128in_buffer_15_address0 => grp_deAes_return_fu_464_bit128in_buffer_15_address0,
        bit128in_buffer_15_ce0 => grp_deAes_return_fu_464_bit128in_buffer_15_ce0,
        bit128in_buffer_15_q0 => bit128in_buffer_15_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes_return_fu_424_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes_return_fu_424_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_aes_return_fu_424_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes_return_fu_424_ap_ready = ap_const_logic_1)) then 
                    grp_aes_return_fu_424_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_deAes_return_fu_464_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_deAes_return_fu_464_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_deAes_return_fu_464_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_deAes_return_fu_464_ap_ready = ap_const_logic_1)) then 
                    grp_deAes_return_fu_464_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_extendKey_fu_413_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extendKey_fu_413_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln521_fu_528_p2 = ap_const_lv1_1) and (icmp_ln510_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_extendKey_fu_413_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extendKey_fu_413_ap_ready = ap_const_logic_1)) then 
                    grp_extendKey_fu_413_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    do_init_reg_325_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln510_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                do_init_reg_325 <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_325 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i32_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln510_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i32_reg_372 <= i_reg_556;
            elsif ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i32_reg_372 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    key_change_flag34_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln510_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                key_change_flag34_reg_357 <= key_change_flag_reg_399;
            elsif ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                key_change_flag34_reg_357 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    key_change_flag_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((icmp_ln514_fu_516_p2 = ap_const_lv1_1)) then 
                    key_change_flag_reg_399 <= key_change_flag34_reg_357;
                elsif ((icmp_ln514_fu_516_p2 = ap_const_lv1_0)) then 
                    key_change_flag_reg_399 <= ap_const_lv8_1;
                end if;
            end if; 
        end if;
    end process;

    op35_phi_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) and (ap_phi_mux_do_init_phi_fu_330_p6 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                op35_phi_reg_387 <= op35_rewind_reg_342;
            elsif ((not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                op35_phi_reg_387 <= op;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_reg_556 <= i_fu_510_p2;
                temp_key_addr_reg_551 <= zext_ln510_fu_504_p1(4 - 1 downto 0);
                    zext_ln510_reg_541(3 downto 0) <= zext_ln510_fu_504_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln510_reg_564 <= icmp_ln510_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln510_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln521_reg_568 <= icmp_ln521_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln510_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                op35_rewind_reg_342 <= op35_phi_reg_387;
            end if;
        end if;
    end process;
    zext_ln510_reg_541(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state2, ap_phi_mux_do_init_phi_fu_330_p6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, do_init_reg_325, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, icmp_ln510_reg_564, ap_CS_fsm_state19, op35_phi_reg_387, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_block_state20_on_subcall_done, ap_block_state22_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) and (ap_phi_mux_do_init_phi_fu_330_p6 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif ((not(((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) and (do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln510_reg_564 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                elsif (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_boolean_0 = ap_block_state22_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n <= TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n;
        else 
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    TOP_ap_uint_8_ap_uint_8_AES_EN_out_din_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, bit128in_buffer_0_q0, bit128in_buffer_1_q0, bit128in_buffer_2_q0, bit128in_buffer_3_q0, bit128in_buffer_4_q0, bit128in_buffer_5_q0, bit128in_buffer_6_q0, bit128in_buffer_7_q0, bit128in_buffer_8_q0, bit128in_buffer_9_q0, bit128in_buffer_10_q0, bit128in_buffer_11_q0, bit128in_buffer_12_q0, bit128in_buffer_13_q0, bit128in_buffer_14_q0, bit128in_buffer_15_q0, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_15_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_14_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_13_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_12_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_11_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_10_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_9_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_8_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_7_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_6_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_5_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_4_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_3_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_2_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_1_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= bit128in_buffer_0_q0;
            else 
                TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= "XXXXXXXX";
            end if;
        else 
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din <= "XXXXXXXX";
        end if; 
    end process;


    TOP_ap_uint_8_ap_uint_8_AES_EN_out_write_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_write <= ap_const_logic_1;
        else 
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_write <= ap_const_logic_0;
        end if; 
    end process;


    TOP_ap_uint_8_ap_uint_8_in_stream_blk_n_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, do_init_reg_325)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            TOP_ap_uint_8_ap_uint_8_in_stream_blk_n <= TOP_ap_uint_8_ap_uint_8_in_stream_empty_n;
        else 
            TOP_ap_uint_8_ap_uint_8_in_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    TOP_ap_uint_8_ap_uint_8_in_stream_read_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, do_init_reg_325)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) and (do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            TOP_ap_uint_8_ap_uint_8_in_stream_read <= ap_const_logic_1;
        else 
            TOP_ap_uint_8_ap_uint_8_in_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, do_init_reg_325)
    begin
        if (((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(ap_block_state20_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state20_on_subcall_done)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(ap_block_state22_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state22_on_subcall_done)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;

    ap_ST_fsm_state25_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, do_init_reg_325)
    begin
        if (((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state30_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state31_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state32_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state33_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state34_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state36_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state37_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state38_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state39_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state40_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)
    begin
        if ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state17_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, do_init_reg_325)
    begin
                ap_block_state17 <= ((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n));
    end process;


    ap_block_state2_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, do_init_reg_325)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_extendKey_fu_413_ap_done = ap_const_logic_0) and (icmp_ln521_reg_568 = ap_const_lv1_1));
    end process;


    ap_block_state22_on_subcall_done_assign_proc : process(grp_aes_return_fu_424_ap_done, grp_deAes_return_fu_464_ap_done, op35_phi_reg_387)
    begin
                ap_block_state22_on_subcall_done <= (((op35_phi_reg_387 = ap_const_lv1_1) and (grp_deAes_return_fu_464_ap_done = ap_const_logic_0)) or ((op35_phi_reg_387 = ap_const_lv1_0) and (grp_aes_return_fu_424_ap_done = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state40)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_do_init_phi_fu_330_p6 <= do_init_reg_325;

    ap_ready_assign_proc : process(TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_0_address0_assign_proc : process(ap_CS_fsm_state2, grp_aes_return_fu_424_bit128in_buffer_0_address0, grp_deAes_return_fu_464_bit128in_buffer_0_address0, op35_phi_reg_387, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bit128in_buffer_0_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_0_address0 <= grp_deAes_return_fu_464_bit128in_buffer_0_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_0_address0 <= grp_aes_return_fu_424_bit128in_buffer_0_address0;
        else 
            bit128in_buffer_0_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_0_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state2, do_init_reg_325, grp_aes_return_fu_424_bit128in_buffer_0_ce0, grp_deAes_return_fu_464_bit128in_buffer_0_ce0, op35_phi_reg_387, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (not(((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            bit128in_buffer_0_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_0_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_0_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_0_ce0 <= grp_aes_return_fu_424_bit128in_buffer_0_ce0;
        else 
            bit128in_buffer_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_0_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state2, do_init_reg_325)
    begin
        if ((not(((ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (do_init_reg_325 = ap_const_lv1_1))) and (do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            bit128in_buffer_0_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_10_address0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state34, grp_aes_return_fu_424_bit128in_buffer_10_address0, grp_deAes_return_fu_464_bit128in_buffer_10_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            bit128in_buffer_10_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_10_address0 <= grp_deAes_return_fu_464_bit128in_buffer_10_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_10_address0 <= grp_aes_return_fu_424_bit128in_buffer_10_address0;
        else 
            bit128in_buffer_10_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_10_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state12, ap_CS_fsm_state34, grp_aes_return_fu_424_bit128in_buffer_10_ce0, grp_deAes_return_fu_464_bit128in_buffer_10_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state34)))) then 
            bit128in_buffer_10_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_10_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_10_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_10_ce0 <= grp_aes_return_fu_424_bit128in_buffer_10_ce0;
        else 
            bit128in_buffer_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_10_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            bit128in_buffer_10_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_11_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state35, grp_aes_return_fu_424_bit128in_buffer_11_address0, grp_deAes_return_fu_464_bit128in_buffer_11_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            bit128in_buffer_11_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_11_address0 <= grp_deAes_return_fu_464_bit128in_buffer_11_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_11_address0 <= grp_aes_return_fu_424_bit128in_buffer_11_address0;
        else 
            bit128in_buffer_11_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_11_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state13, ap_CS_fsm_state35, grp_aes_return_fu_424_bit128in_buffer_11_ce0, grp_deAes_return_fu_464_bit128in_buffer_11_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            bit128in_buffer_11_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_11_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_11_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_11_ce0 <= grp_aes_return_fu_424_bit128in_buffer_11_ce0;
        else 
            bit128in_buffer_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_11_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            bit128in_buffer_11_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_12_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state36, grp_aes_return_fu_424_bit128in_buffer_12_address0, grp_deAes_return_fu_464_bit128in_buffer_12_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bit128in_buffer_12_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_12_address0 <= grp_deAes_return_fu_464_bit128in_buffer_12_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_12_address0 <= grp_aes_return_fu_424_bit128in_buffer_12_address0;
        else 
            bit128in_buffer_12_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_12_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state14, ap_CS_fsm_state36, grp_aes_return_fu_424_bit128in_buffer_12_ce0, grp_deAes_return_fu_464_bit128in_buffer_12_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            bit128in_buffer_12_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_12_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_12_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_12_ce0 <= grp_aes_return_fu_424_bit128in_buffer_12_ce0;
        else 
            bit128in_buffer_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_12_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            bit128in_buffer_12_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_13_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state37, grp_aes_return_fu_424_bit128in_buffer_13_address0, grp_deAes_return_fu_464_bit128in_buffer_13_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            bit128in_buffer_13_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_13_address0 <= grp_deAes_return_fu_464_bit128in_buffer_13_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_13_address0 <= grp_aes_return_fu_424_bit128in_buffer_13_address0;
        else 
            bit128in_buffer_13_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_13_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state15, ap_CS_fsm_state37, grp_aes_return_fu_424_bit128in_buffer_13_ce0, grp_deAes_return_fu_464_bit128in_buffer_13_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            bit128in_buffer_13_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_13_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_13_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_13_ce0 <= grp_aes_return_fu_424_bit128in_buffer_13_ce0;
        else 
            bit128in_buffer_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_13_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            bit128in_buffer_13_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_14_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state38, grp_aes_return_fu_424_bit128in_buffer_14_address0, grp_deAes_return_fu_464_bit128in_buffer_14_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            bit128in_buffer_14_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_14_address0 <= grp_deAes_return_fu_464_bit128in_buffer_14_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_14_address0 <= grp_aes_return_fu_424_bit128in_buffer_14_address0;
        else 
            bit128in_buffer_14_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_14_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state16, ap_CS_fsm_state38, grp_aes_return_fu_424_bit128in_buffer_14_ce0, grp_deAes_return_fu_464_bit128in_buffer_14_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            bit128in_buffer_14_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_14_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_14_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_14_ce0 <= grp_aes_return_fu_424_bit128in_buffer_14_ce0;
        else 
            bit128in_buffer_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_14_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            bit128in_buffer_14_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_15_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state39, grp_aes_return_fu_424_bit128in_buffer_15_address0, grp_deAes_return_fu_464_bit128in_buffer_15_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            bit128in_buffer_15_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_15_address0 <= grp_deAes_return_fu_464_bit128in_buffer_15_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_15_address0 <= grp_aes_return_fu_424_bit128in_buffer_15_address0;
        else 
            bit128in_buffer_15_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_15_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state17, do_init_reg_325, ap_CS_fsm_state39, grp_aes_return_fu_424_bit128in_buffer_15_ce0, grp_deAes_return_fu_464_bit128in_buffer_15_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            bit128in_buffer_15_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_15_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_15_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_15_ce0 <= grp_aes_return_fu_424_bit128in_buffer_15_ce0;
        else 
            bit128in_buffer_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_15_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state17, do_init_reg_325)
    begin
        if ((not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            bit128in_buffer_15_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, grp_aes_return_fu_424_bit128in_buffer_1_address0, grp_deAes_return_fu_464_bit128in_buffer_1_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bit128in_buffer_1_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_1_address0 <= grp_deAes_return_fu_464_bit128in_buffer_1_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_1_address0 <= grp_aes_return_fu_424_bit128in_buffer_1_address0;
        else 
            bit128in_buffer_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_1_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state3, ap_CS_fsm_state25, grp_aes_return_fu_424_bit128in_buffer_1_ce0, grp_deAes_return_fu_464_bit128in_buffer_1_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            bit128in_buffer_1_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_1_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_1_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_1_ce0 <= grp_aes_return_fu_424_bit128in_buffer_1_ce0;
        else 
            bit128in_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_1_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bit128in_buffer_1_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_2_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state26, grp_aes_return_fu_424_bit128in_buffer_2_address0, grp_deAes_return_fu_464_bit128in_buffer_2_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bit128in_buffer_2_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_2_address0 <= grp_deAes_return_fu_464_bit128in_buffer_2_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_2_address0 <= grp_aes_return_fu_424_bit128in_buffer_2_address0;
        else 
            bit128in_buffer_2_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_2_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state4, ap_CS_fsm_state26, grp_aes_return_fu_424_bit128in_buffer_2_ce0, grp_deAes_return_fu_464_bit128in_buffer_2_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state26)))) then 
            bit128in_buffer_2_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_2_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_2_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_2_ce0 <= grp_aes_return_fu_424_bit128in_buffer_2_ce0;
        else 
            bit128in_buffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_2_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bit128in_buffer_2_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_3_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27, grp_aes_return_fu_424_bit128in_buffer_3_address0, grp_deAes_return_fu_464_bit128in_buffer_3_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            bit128in_buffer_3_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_3_address0 <= grp_deAes_return_fu_464_bit128in_buffer_3_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_3_address0 <= grp_aes_return_fu_424_bit128in_buffer_3_address0;
        else 
            bit128in_buffer_3_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_3_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state5, ap_CS_fsm_state27, grp_aes_return_fu_424_bit128in_buffer_3_ce0, grp_deAes_return_fu_464_bit128in_buffer_3_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state27)))) then 
            bit128in_buffer_3_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_3_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_3_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_3_ce0 <= grp_aes_return_fu_424_bit128in_buffer_3_ce0;
        else 
            bit128in_buffer_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_3_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            bit128in_buffer_3_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_4_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state28, grp_aes_return_fu_424_bit128in_buffer_4_address0, grp_deAes_return_fu_464_bit128in_buffer_4_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            bit128in_buffer_4_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_4_address0 <= grp_deAes_return_fu_464_bit128in_buffer_4_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_4_address0 <= grp_aes_return_fu_424_bit128in_buffer_4_address0;
        else 
            bit128in_buffer_4_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_4_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state6, ap_CS_fsm_state28, grp_aes_return_fu_424_bit128in_buffer_4_ce0, grp_deAes_return_fu_464_bit128in_buffer_4_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            bit128in_buffer_4_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_4_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_4_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_4_ce0 <= grp_aes_return_fu_424_bit128in_buffer_4_ce0;
        else 
            bit128in_buffer_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_4_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            bit128in_buffer_4_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_5_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state29, grp_aes_return_fu_424_bit128in_buffer_5_address0, grp_deAes_return_fu_464_bit128in_buffer_5_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            bit128in_buffer_5_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_5_address0 <= grp_deAes_return_fu_464_bit128in_buffer_5_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_5_address0 <= grp_aes_return_fu_424_bit128in_buffer_5_address0;
        else 
            bit128in_buffer_5_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_5_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state7, ap_CS_fsm_state29, grp_aes_return_fu_424_bit128in_buffer_5_ce0, grp_deAes_return_fu_464_bit128in_buffer_5_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            bit128in_buffer_5_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_5_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_5_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_5_ce0 <= grp_aes_return_fu_424_bit128in_buffer_5_ce0;
        else 
            bit128in_buffer_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_5_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            bit128in_buffer_5_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_6_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state30, grp_aes_return_fu_424_bit128in_buffer_6_address0, grp_deAes_return_fu_464_bit128in_buffer_6_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            bit128in_buffer_6_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_6_address0 <= grp_deAes_return_fu_464_bit128in_buffer_6_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_6_address0 <= grp_aes_return_fu_424_bit128in_buffer_6_address0;
        else 
            bit128in_buffer_6_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_6_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state8, ap_CS_fsm_state30, grp_aes_return_fu_424_bit128in_buffer_6_ce0, grp_deAes_return_fu_464_bit128in_buffer_6_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            bit128in_buffer_6_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_6_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_6_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_6_ce0 <= grp_aes_return_fu_424_bit128in_buffer_6_ce0;
        else 
            bit128in_buffer_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_6_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            bit128in_buffer_6_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_7_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state31, grp_aes_return_fu_424_bit128in_buffer_7_address0, grp_deAes_return_fu_464_bit128in_buffer_7_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            bit128in_buffer_7_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_7_address0 <= grp_deAes_return_fu_464_bit128in_buffer_7_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_7_address0 <= grp_aes_return_fu_424_bit128in_buffer_7_address0;
        else 
            bit128in_buffer_7_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_7_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state9, ap_CS_fsm_state31, grp_aes_return_fu_424_bit128in_buffer_7_ce0, grp_deAes_return_fu_464_bit128in_buffer_7_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state31)))) then 
            bit128in_buffer_7_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_7_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_7_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_7_ce0 <= grp_aes_return_fu_424_bit128in_buffer_7_ce0;
        else 
            bit128in_buffer_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_7_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            bit128in_buffer_7_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_8_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state32, grp_aes_return_fu_424_bit128in_buffer_8_address0, grp_deAes_return_fu_464_bit128in_buffer_8_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            bit128in_buffer_8_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_8_address0 <= grp_deAes_return_fu_464_bit128in_buffer_8_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_8_address0 <= grp_aes_return_fu_424_bit128in_buffer_8_address0;
        else 
            bit128in_buffer_8_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_8_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state10, ap_CS_fsm_state32, grp_aes_return_fu_424_bit128in_buffer_8_ce0, grp_deAes_return_fu_464_bit128in_buffer_8_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            bit128in_buffer_8_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_8_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_8_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_8_ce0 <= grp_aes_return_fu_424_bit128in_buffer_8_ce0;
        else 
            bit128in_buffer_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_8_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            bit128in_buffer_8_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_9_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state33, grp_aes_return_fu_424_bit128in_buffer_9_address0, grp_deAes_return_fu_464_bit128in_buffer_9_address0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            bit128in_buffer_9_address0 <= ap_const_lv15_0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_9_address0 <= grp_deAes_return_fu_464_bit128in_buffer_9_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_9_address0 <= grp_aes_return_fu_424_bit128in_buffer_9_address0;
        else 
            bit128in_buffer_9_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    bit128in_buffer_9_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n, ap_CS_fsm_state11, ap_CS_fsm_state33, grp_aes_return_fu_424_bit128in_buffer_9_ce0, grp_deAes_return_fu_464_bit128in_buffer_9_ce0, op35_phi_reg_387, ap_CS_fsm_state22)
    begin
        if ((((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            bit128in_buffer_9_ce0 <= ap_const_logic_1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_9_ce0 <= grp_deAes_return_fu_464_bit128in_buffer_9_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            bit128in_buffer_9_ce0 <= grp_aes_return_fu_424_bit128in_buffer_9_ce0;
        else 
            bit128in_buffer_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit128in_buffer_9_we0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            bit128in_buffer_9_we0 <= ap_const_logic_1;
        else 
            bit128in_buffer_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_aes_return_fu_424_ap_start <= grp_aes_return_fu_424_ap_start_reg;
    grp_deAes_return_fu_464_ap_start <= grp_deAes_return_fu_464_ap_start_reg;
    grp_extendKey_fu_413_ap_start <= grp_extendKey_fu_413_ap_start_reg;
    i_fu_510_p2 <= std_logic_vector(unsigned(i32_reg_372) + unsigned(ap_const_lv4_1));
    icmp_ln510_fu_522_p2 <= "1" when (i32_reg_372 = ap_const_lv4_F) else "0";
    icmp_ln514_fu_516_p2 <= "1" when (temp_key_q0 = key_V_q0) else "0";
    icmp_ln521_fu_528_p2 <= "1" when (key_change_flag_reg_399 = ap_const_lv8_1) else "0";
    key_V_address0 <= zext_ln510_fu_504_p1(4 - 1 downto 0);

    key_V_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state17, do_init_reg_325)
    begin
        if ((not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            key_V_ce0 <= ap_const_logic_1;
        else 
            key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_char_address0_assign_proc : process(zext_ln510_reg_541, ap_CS_fsm_state18, icmp_ln521_reg_568, grp_extendKey_fu_413_key_address0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_char_address0 <= zext_ln510_reg_541(4 - 1 downto 0);
        elsif (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            key_char_address0 <= grp_extendKey_fu_413_key_address0;
        else 
            key_char_address0 <= "XXXX";
        end if; 
    end process;


    key_char_ce0_assign_proc : process(ap_CS_fsm_state18, icmp_ln521_reg_568, grp_extendKey_fu_413_key_ce0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_char_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            key_char_ce0 <= grp_extendKey_fu_413_key_ce0;
        else 
            key_char_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_char_ce1_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_key_ce1, ap_CS_fsm_state20)
    begin
        if (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            key_char_ce1 <= grp_extendKey_fu_413_key_ce1;
        else 
            key_char_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    key_char_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_char_we0 <= ap_const_logic_1;
        else 
            key_char_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_key_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln510_fu_504_p1, temp_key_addr_reg_551, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_key_address0 <= temp_key_addr_reg_551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_key_address0 <= zext_ln510_fu_504_p1(4 - 1 downto 0);
        else 
            temp_key_address0 <= "XXXX";
        end if; 
    end process;


    temp_key_ce0_assign_proc : process(TOP_ap_uint_8_ap_uint_8_in_stream_empty_n, ap_CS_fsm_state17, do_init_reg_325, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (not(((do_init_reg_325 = ap_const_lv1_1) and (ap_const_logic_0 = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            temp_key_ce0 <= ap_const_logic_1;
        else 
            temp_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_key_we0_assign_proc : process(ap_CS_fsm_state18, icmp_ln514_fu_516_p2)
    begin
        if (((icmp_ln514_fu_516_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            temp_key_we0 <= ap_const_logic_1;
        else 
            temp_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_address0_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_w_address0, grp_aes_return_fu_424_w_address0, grp_deAes_return_fu_464_w_address0, op35_phi_reg_387, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_address0 <= grp_deAes_return_fu_464_w_address0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_address0 <= grp_aes_return_fu_424_w_address0;
        elsif (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_address0 <= grp_extendKey_fu_413_w_address0;
        else 
            w_address0 <= "XXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_w_address1, grp_aes_return_fu_424_w_address1, grp_deAes_return_fu_464_w_address1, op35_phi_reg_387, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_address1 <= grp_deAes_return_fu_464_w_address1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_address1 <= grp_aes_return_fu_424_w_address1;
        elsif (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_address1 <= grp_extendKey_fu_413_w_address1;
        else 
            w_address1 <= "XXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_w_ce0, grp_aes_return_fu_424_w_ce0, grp_deAes_return_fu_464_w_ce0, op35_phi_reg_387, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_ce0 <= grp_deAes_return_fu_464_w_ce0;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_ce0 <= grp_aes_return_fu_424_w_ce0;
        elsif (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_ce0 <= grp_extendKey_fu_413_w_ce0;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_w_ce1, grp_aes_return_fu_424_w_ce1, grp_deAes_return_fu_464_w_ce1, op35_phi_reg_387, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if (((op35_phi_reg_387 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_ce1 <= grp_deAes_return_fu_464_w_ce1;
        elsif (((op35_phi_reg_387 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            w_ce1 <= grp_aes_return_fu_424_w_ce1;
        elsif (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_ce1 <= grp_extendKey_fu_413_w_ce1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_we0_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_w_we0, ap_CS_fsm_state20)
    begin
        if (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_we0 <= grp_extendKey_fu_413_w_we0;
        else 
            w_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_we1_assign_proc : process(icmp_ln521_reg_568, grp_extendKey_fu_413_w_we1, ap_CS_fsm_state20)
    begin
        if (((icmp_ln521_reg_568 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_we1 <= grp_extendKey_fu_413_w_we1;
        else 
            w_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln510_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i32_reg_372),64));
end behav;
