-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_deMixColumns is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_we0 : OUT STD_LOGIC;
    array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_r_ce1 : OUT STD_LOGIC;
    array_r_we1 : OUT STD_LOGIC;
    array_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of TOP_deMixColumns is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_GFMul_fu_213_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_GFMul_fu_221_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_GFMul_fu_229_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal array_addr_reg_525 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_addr_1_reg_530 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_addr_2_reg_535 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_addr_3_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_1_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_197_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_205_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_1_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_4_reg_566 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal array_addr_5_reg_571 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_2_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_3_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_2_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_3_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_3_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_6_reg_613 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal array_addr_7_reg_618 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_4_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_5_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_0_1_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_1_reg_644 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_1_1_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_2_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_8_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal array_addr_9_reg_664 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_6_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_7_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_0_2_reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_0_3_reg_686 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_1_2_reg_691 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_1_3_reg_696 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_2_1_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_10_reg_706 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal array_addr_11_reg_711 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_8_reg_716 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_9_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_0_1_reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_1_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_12_reg_751 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal array_addr_13_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_10_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_11_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_0_2_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_0_3_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_2_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_1_3_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_2_1_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_14_reg_798 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal array_addr_15_reg_803 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_load_12_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_13_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_1_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_1_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_3_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_3_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_9_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_9_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_11_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_11_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_17_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_17_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_load_14_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal array_load_15_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_5_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_5_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_7_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_7_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_13_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_13_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_15_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_15_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_19_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_19_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_21_fu_429_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_21_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_23_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_23_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_25_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_25_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_27_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_27_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal xor_ln417_29_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_29_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_31_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_31_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_GFMul_fu_197_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_197_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_197_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_205_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_205_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_205_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_213_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_213_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_213_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_221_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_221_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_221_s : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_GFMul_fu_229_ap_ready : STD_LOGIC;
    signal grp_GFMul_fu_229_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_GFMul_fu_229_s : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal xor_ln417_2_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_6_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_4_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_18_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_16_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_22_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_20_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_33_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_32_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_10_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_8_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_14_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_12_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_26_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_24_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_30_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_28_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_35_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_34_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_37_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_36_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_39_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_38_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_41_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_40_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_43_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_42_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_45_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_44_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_47_fu_513_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln417_46_fu_507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_GFMul IS
    port (
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (3 downto 0);
        s : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_GFMul_fu_197 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_197_ap_ready,
        n => grp_GFMul_fu_197_n,
        s => grp_GFMul_fu_197_s,
        ap_return => grp_GFMul_fu_197_ap_return);

    grp_GFMul_fu_205 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_205_ap_ready,
        n => grp_GFMul_fu_205_n,
        s => grp_GFMul_fu_205_s,
        ap_return => grp_GFMul_fu_205_ap_return);

    grp_GFMul_fu_213 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_213_ap_ready,
        n => grp_GFMul_fu_213_n,
        s => grp_GFMul_fu_213_s,
        ap_return => grp_GFMul_fu_213_ap_return);

    grp_GFMul_fu_221 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_221_ap_ready,
        n => grp_GFMul_fu_221_n,
        s => grp_GFMul_fu_221_s,
        ap_return => grp_GFMul_fu_221_ap_return);

    grp_GFMul_fu_229 : component TOP_GFMul
    port map (
        ap_ready => grp_GFMul_fu_229_ap_ready,
        n => grp_GFMul_fu_229_n,
        s => grp_GFMul_fu_229_s,
        ap_return => grp_GFMul_fu_229_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                array_load_10_reg_761 <= array_r_q1;
                array_load_11_reg_767 <= array_r_q0;
                tmp_6_0_2_reg_773 <= grp_GFMul_fu_197_ap_return;
                tmp_6_0_3_reg_778 <= grp_GFMul_fu_205_ap_return;
                tmp_6_1_2_reg_783 <= grp_GFMul_fu_213_ap_return;
                tmp_6_1_3_reg_788 <= grp_GFMul_fu_221_ap_return;
                tmp_6_2_1_reg_793 <= grp_GFMul_fu_229_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                array_load_12_reg_808 <= array_r_q1;
                array_load_13_reg_813 <= array_r_q0;
                xor_ln417_11_reg_834 <= xor_ln417_11_fu_320_p2;
                xor_ln417_17_reg_839 <= xor_ln417_17_fu_336_p2;
                xor_ln417_1_reg_819 <= xor_ln417_1_fu_273_p2;
                xor_ln417_3_reg_824 <= xor_ln417_3_fu_288_p2;
                xor_ln417_9_reg_829 <= xor_ln417_9_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                array_load_14_reg_844 <= array_r_q1;
                array_load_15_reg_850 <= array_r_q0;
                xor_ln417_13_reg_866 <= xor_ln417_13_fu_381_p2;
                xor_ln417_15_reg_871 <= xor_ln417_15_fu_396_p2;
                xor_ln417_19_reg_876 <= xor_ln417_19_fu_411_p2;
                xor_ln417_5_reg_856 <= xor_ln417_5_fu_351_p2;
                xor_ln417_7_reg_861 <= xor_ln417_7_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                array_load_1_reg_550 <= array_r_q0;
                array_load_reg_545 <= array_r_q1;
                tmp_0_1_reg_561 <= grp_GFMul_fu_205_ap_return;
                tmp_reg_556 <= grp_GFMul_fu_197_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                array_load_2_reg_576 <= array_r_q1;
                array_load_3_reg_582 <= array_r_q0;
                tmp_0_2_reg_588 <= grp_GFMul_fu_197_ap_return;
                tmp_0_3_reg_593 <= grp_GFMul_fu_205_ap_return;
                tmp_1_2_reg_598 <= grp_GFMul_fu_213_ap_return;
                tmp_1_3_reg_603 <= grp_GFMul_fu_221_ap_return;
                tmp_2_1_reg_608 <= grp_GFMul_fu_229_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                array_load_4_reg_623 <= array_r_q1;
                array_load_5_reg_628 <= array_r_q0;
                tmp_5_0_1_reg_639 <= grp_GFMul_fu_205_ap_return;
                tmp_5_1_1_reg_649 <= grp_GFMul_fu_221_ap_return;
                tmp_5_1_reg_644 <= grp_GFMul_fu_213_ap_return;
                tmp_5_2_reg_654 <= grp_GFMul_fu_229_ap_return;
                tmp_5_reg_634 <= grp_GFMul_fu_197_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                array_load_6_reg_669 <= array_r_q1;
                array_load_7_reg_675 <= array_r_q0;
                tmp_5_0_2_reg_681 <= grp_GFMul_fu_197_ap_return;
                tmp_5_0_3_reg_686 <= grp_GFMul_fu_205_ap_return;
                tmp_5_1_2_reg_691 <= grp_GFMul_fu_213_ap_return;
                tmp_5_1_3_reg_696 <= grp_GFMul_fu_221_ap_return;
                tmp_5_2_1_reg_701 <= grp_GFMul_fu_229_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                array_load_8_reg_716 <= array_r_q1;
                array_load_9_reg_721 <= array_r_q0;
                tmp_6_0_1_reg_731 <= grp_GFMul_fu_205_ap_return;
                tmp_6_1_1_reg_741 <= grp_GFMul_fu_221_ap_return;
                tmp_6_1_reg_736 <= grp_GFMul_fu_213_ap_return;
                tmp_6_2_reg_746 <= grp_GFMul_fu_229_ap_return;
                tmp_6_reg_726 <= grp_GFMul_fu_197_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_252 <= grp_GFMul_fu_213_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_256 <= grp_GFMul_fu_221_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_260 <= grp_GFMul_fu_229_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                xor_ln417_21_reg_881 <= xor_ln417_21_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                xor_ln417_23_reg_886 <= xor_ln417_23_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                xor_ln417_25_reg_891 <= xor_ln417_25_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                xor_ln417_27_reg_896 <= xor_ln417_27_fu_483_p2;
                xor_ln417_29_reg_901 <= xor_ln417_29_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                xor_ln417_31_reg_906 <= xor_ln417_31_fu_519_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_addr_10_reg_706 <= ap_const_lv64_A(4 - 1 downto 0);
    array_addr_11_reg_711 <= ap_const_lv64_B(4 - 1 downto 0);
    array_addr_12_reg_751 <= ap_const_lv64_C(4 - 1 downto 0);
    array_addr_13_reg_756 <= ap_const_lv64_D(4 - 1 downto 0);
    array_addr_14_reg_798 <= ap_const_lv64_E(4 - 1 downto 0);
    array_addr_15_reg_803 <= ap_const_lv64_F(4 - 1 downto 0);
    array_addr_1_reg_530 <= ap_const_lv64_1(4 - 1 downto 0);
    array_addr_2_reg_535 <= ap_const_lv64_2(4 - 1 downto 0);
    array_addr_3_reg_540 <= ap_const_lv64_3(4 - 1 downto 0);
    array_addr_4_reg_566 <= ap_const_lv64_4(4 - 1 downto 0);
    array_addr_5_reg_571 <= ap_const_lv64_5(4 - 1 downto 0);
    array_addr_6_reg_613 <= ap_const_lv64_6(4 - 1 downto 0);
    array_addr_7_reg_618 <= ap_const_lv64_7(4 - 1 downto 0);
    array_addr_8_reg_659 <= ap_const_lv64_8(4 - 1 downto 0);
    array_addr_9_reg_664 <= ap_const_lv64_9(4 - 1 downto 0);
    array_addr_reg_525 <= ap_const_lv64_0(4 - 1 downto 0);

    array_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, array_addr_1_reg_530, array_addr_3_reg_540, ap_CS_fsm_state3, array_addr_5_reg_571, ap_CS_fsm_state4, array_addr_7_reg_618, ap_CS_fsm_state5, array_addr_9_reg_664, ap_CS_fsm_state6, array_addr_11_reg_711, ap_CS_fsm_state7, array_addr_13_reg_756, ap_CS_fsm_state8, array_addr_15_reg_803, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_address0 <= array_addr_15_reg_803;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_address0 <= array_addr_13_reg_756;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_address0 <= array_addr_11_reg_711;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_address0 <= array_addr_9_reg_664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_address0 <= array_addr_7_reg_618;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_address0 <= array_addr_5_reg_571;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_address0 <= array_addr_3_reg_540;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_address0 <= array_addr_1_reg_530;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_r_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_r_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_r_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            array_r_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            array_r_address0 <= "XXXX";
        end if; 
    end process;


    array_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, array_addr_reg_525, array_addr_2_reg_535, array_addr_4_reg_566, ap_CS_fsm_state3, array_addr_6_reg_613, ap_CS_fsm_state4, array_addr_8_reg_659, ap_CS_fsm_state5, array_addr_10_reg_706, ap_CS_fsm_state6, array_addr_12_reg_751, ap_CS_fsm_state7, array_addr_14_reg_798, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_address1 <= array_addr_14_reg_798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_address1 <= array_addr_12_reg_751;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_address1 <= array_addr_10_reg_706;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_address1 <= array_addr_8_reg_659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_address1 <= array_addr_6_reg_613;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_address1 <= array_addr_4_reg_566;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_address1 <= array_addr_2_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_address1 <= array_addr_reg_525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_r_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_r_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_r_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            array_r_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            array_r_address1 <= "XXXX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            array_r_ce1 <= ap_const_logic_1;
        else 
            array_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_d0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, xor_ln417_3_reg_824, xor_ln417_11_reg_834, ap_CS_fsm_state9, xor_ln417_7_reg_861, xor_ln417_15_reg_871, xor_ln417_19_reg_876, xor_ln417_23_reg_886, xor_ln417_27_reg_896, ap_CS_fsm_state13, xor_ln417_31_reg_906, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_d0 <= xor_ln417_31_reg_906;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_d0 <= xor_ln417_27_reg_896;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_d0 <= xor_ln417_23_reg_886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_d0 <= xor_ln417_19_reg_876;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_d0 <= xor_ln417_15_reg_871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_d0 <= xor_ln417_11_reg_834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_d0 <= xor_ln417_7_reg_861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_d0 <= xor_ln417_3_reg_824;
        else 
            array_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_r_d1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, xor_ln417_1_reg_819, xor_ln417_9_reg_829, xor_ln417_17_reg_839, ap_CS_fsm_state9, xor_ln417_5_reg_856, xor_ln417_13_reg_866, xor_ln417_21_reg_881, xor_ln417_25_reg_891, ap_CS_fsm_state13, xor_ln417_29_reg_901, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_d1 <= xor_ln417_29_reg_901;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_d1 <= xor_ln417_25_reg_891;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_d1 <= xor_ln417_21_reg_881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_d1 <= xor_ln417_17_reg_839;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_d1 <= xor_ln417_13_reg_866;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_d1 <= xor_ln417_9_reg_829;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_d1 <= xor_ln417_5_reg_856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_d1 <= xor_ln417_1_reg_819;
        else 
            array_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_r_we0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            array_r_we0 <= ap_const_logic_1;
        else 
            array_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_we1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            array_r_we1 <= ap_const_logic_1;
        else 
            array_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_GFMul_fu_197_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_GFMul_fu_197_n <= ap_const_lv4_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_GFMul_fu_197_n <= ap_const_lv4_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_GFMul_fu_197_n <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_197_n <= ap_const_lv4_E;
        else 
            grp_GFMul_fu_197_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_197_s_assign_proc : process(array_r_q1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, array_load_2_reg_576, array_load_3_reg_582, ap_CS_fsm_state4, ap_CS_fsm_state5, array_load_7_reg_675, ap_CS_fsm_state6, array_load_8_reg_716, ap_CS_fsm_state7, ap_CS_fsm_state8, array_load_13_reg_813, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_197_s <= array_load_3_reg_582;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_197_s <= array_load_13_reg_813;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_197_s <= array_load_8_reg_716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_197_s <= array_load_7_reg_675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_197_s <= array_load_2_reg_576;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_197_s <= array_r_q1;
        else 
            grp_GFMul_fu_197_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_GFMul_fu_205_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_GFMul_fu_205_n <= ap_const_lv4_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_GFMul_fu_205_n <= ap_const_lv4_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_GFMul_fu_205_n <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_205_n <= ap_const_lv4_E;
        else 
            grp_GFMul_fu_205_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_205_s_assign_proc : process(array_r_q0, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, array_load_2_reg_576, ap_CS_fsm_state4, ap_CS_fsm_state5, array_load_6_reg_669, array_load_7_reg_675, ap_CS_fsm_state6, ap_CS_fsm_state7, array_load_11_reg_767, ap_CS_fsm_state8, array_load_12_reg_808, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_205_s <= array_load_7_reg_675;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_205_s <= array_load_2_reg_576;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_205_s <= array_load_12_reg_808;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_205_s <= array_load_11_reg_767;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_205_s <= array_load_6_reg_669;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_205_s <= array_r_q0;
        else 
            grp_GFMul_fu_205_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_GFMul_fu_213_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_GFMul_fu_213_n <= ap_const_lv4_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_GFMul_fu_213_n <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_GFMul_fu_213_n <= ap_const_lv4_E;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_213_n <= ap_const_lv4_9;
        else 
            grp_GFMul_fu_213_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_213_s_assign_proc : process(array_r_q1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, array_load_1_reg_550, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, array_load_6_reg_669, ap_CS_fsm_state6, ap_CS_fsm_state7, array_load_10_reg_761, array_load_11_reg_767, ap_CS_fsm_state8, ap_CS_fsm_state9, array_load_15_reg_850, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_213_s <= array_load_11_reg_767;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_213_s <= array_load_6_reg_669;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_213_s <= array_load_1_reg_550;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_213_s <= array_load_15_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_213_s <= array_load_10_reg_761;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_213_s <= array_r_q1;
        else 
            grp_GFMul_fu_213_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_GFMul_fu_221_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_GFMul_fu_221_n <= ap_const_lv4_D;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_GFMul_fu_221_n <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_GFMul_fu_221_n <= ap_const_lv4_E;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_221_n <= ap_const_lv4_9;
        else 
            grp_GFMul_fu_221_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_221_s_assign_proc : process(array_r_q0, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, array_load_reg_545, ap_CS_fsm_state3, ap_CS_fsm_state4, array_load_5_reg_628, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, array_load_10_reg_761, ap_CS_fsm_state8, array_load_14_reg_844, ap_CS_fsm_state9, array_load_15_reg_850, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_GFMul_fu_221_s <= array_load_15_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_221_s <= array_load_10_reg_761;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_GFMul_fu_221_s <= array_load_5_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_221_s <= array_load_reg_545;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_221_s <= array_load_14_reg_844;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_221_s <= array_r_q0;
        else 
            grp_GFMul_fu_221_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_GFMul_fu_229_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_GFMul_fu_229_n <= ap_const_lv4_B;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_GFMul_fu_229_n <= ap_const_lv4_E;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_GFMul_fu_229_n <= ap_const_lv4_9;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_GFMul_fu_229_n <= ap_const_lv4_D;
        else 
            grp_GFMul_fu_229_n <= "XXXX";
        end if; 
    end process;


    grp_GFMul_fu_229_s_assign_proc : process(array_r_q1, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_CS_fsm_state11, ap_CS_fsm_state10, array_load_1_reg_550, ap_CS_fsm_state3, array_load_3_reg_582, ap_CS_fsm_state4, array_load_4_reg_623, array_load_5_reg_628, ap_CS_fsm_state5, ap_CS_fsm_state6, array_load_9_reg_721, ap_CS_fsm_state7, ap_CS_fsm_state8, array_load_13_reg_813, array_load_14_reg_844, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_GFMul_fu_229_s <= array_load_14_reg_844;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_GFMul_fu_229_s <= array_load_4_reg_623;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_GFMul_fu_229_s <= array_load_3_reg_582;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_GFMul_fu_229_s <= array_load_13_reg_813;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_GFMul_fu_229_s <= array_load_9_reg_721;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_GFMul_fu_229_s <= array_load_5_reg_628;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_GFMul_fu_229_s <= array_load_1_reg_550;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_GFMul_fu_229_s <= array_r_q1;
        else 
            grp_GFMul_fu_229_s <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    xor_ln417_10_fu_346_p2 <= (tmp_6_0_2_reg_773 xor grp_GFMul_fu_197_ap_return);
    xor_ln417_11_fu_320_p2 <= (xor_ln417_22_fu_315_p2 xor xor_ln417_20_fu_310_p2);
    xor_ln417_12_fu_357_p2 <= (tmp_5_0_3_reg_686 xor tmp_0_3_reg_593);
    xor_ln417_13_fu_381_p2 <= (xor_ln417_26_fu_376_p2 xor xor_ln417_24_fu_372_p2);
    xor_ln417_14_fu_361_p2 <= (tmp_6_0_3_reg_778 xor grp_GFMul_fu_205_ap_return);
    xor_ln417_15_fu_396_p2 <= (xor_ln417_30_fu_391_p2 xor xor_ln417_28_fu_387_p2);
    xor_ln417_16_fu_294_p2 <= (tmp_5_1_reg_644 xor reg_252);
    xor_ln417_17_fu_336_p2 <= (xor_ln417_33_fu_331_p2 xor xor_ln417_32_fu_326_p2);
    xor_ln417_18_fu_299_p2 <= (tmp_6_1_reg_736 xor grp_GFMul_fu_213_ap_return);
    xor_ln417_19_fu_411_p2 <= (xor_ln417_35_fu_406_p2 xor xor_ln417_34_fu_402_p2);
    xor_ln417_1_fu_273_p2 <= (xor_ln417_fu_264_p2 xor xor_ln417_2_fu_268_p2);
    xor_ln417_20_fu_310_p2 <= (tmp_5_1_1_reg_649 xor reg_256);
    xor_ln417_21_fu_429_p2 <= (xor_ln417_37_fu_423_p2 xor xor_ln417_36_fu_417_p2);
    xor_ln417_22_fu_315_p2 <= (tmp_6_1_1_reg_741 xor grp_GFMul_fu_221_ap_return);
    xor_ln417_23_fu_447_p2 <= (xor_ln417_39_fu_441_p2 xor xor_ln417_38_fu_435_p2);
    xor_ln417_24_fu_372_p2 <= (tmp_5_1_2_reg_691 xor tmp_1_2_reg_598);
    xor_ln417_25_fu_465_p2 <= (xor_ln417_41_fu_459_p2 xor xor_ln417_40_fu_453_p2);
    xor_ln417_26_fu_376_p2 <= (tmp_6_1_2_reg_783 xor grp_GFMul_fu_213_ap_return);
    xor_ln417_27_fu_483_p2 <= (xor_ln417_43_fu_477_p2 xor xor_ln417_42_fu_471_p2);
    xor_ln417_28_fu_387_p2 <= (tmp_5_1_3_reg_696 xor tmp_1_3_reg_603);
    xor_ln417_29_fu_501_p2 <= (xor_ln417_45_fu_495_p2 xor xor_ln417_44_fu_489_p2);
    xor_ln417_2_fu_268_p2 <= (tmp_6_reg_726 xor grp_GFMul_fu_197_ap_return);
    xor_ln417_30_fu_391_p2 <= (tmp_6_1_3_reg_788 xor grp_GFMul_fu_221_ap_return);
    xor_ln417_31_fu_519_p2 <= (xor_ln417_47_fu_513_p2 xor xor_ln417_46_fu_507_p2);
    xor_ln417_32_fu_326_p2 <= (tmp_5_2_reg_654 xor reg_260);
    xor_ln417_33_fu_331_p2 <= (tmp_6_2_reg_746 xor grp_GFMul_fu_229_ap_return);
    xor_ln417_34_fu_402_p2 <= (tmp_5_2_1_reg_701 xor tmp_2_1_reg_608);
    xor_ln417_35_fu_406_p2 <= (tmp_6_2_1_reg_793 xor grp_GFMul_fu_229_ap_return);
    xor_ln417_36_fu_417_p2 <= (grp_GFMul_fu_205_ap_return xor grp_GFMul_fu_197_ap_return);
    xor_ln417_37_fu_423_p2 <= (grp_GFMul_fu_221_ap_return xor grp_GFMul_fu_213_ap_return);
    xor_ln417_38_fu_435_p2 <= (reg_260 xor grp_GFMul_fu_197_ap_return);
    xor_ln417_39_fu_441_p2 <= (grp_GFMul_fu_213_ap_return xor grp_GFMul_fu_205_ap_return);
    xor_ln417_3_fu_288_p2 <= (xor_ln417_6_fu_283_p2 xor xor_ln417_4_fu_279_p2);
    xor_ln417_40_fu_453_p2 <= (reg_260 xor reg_256);
    xor_ln417_41_fu_459_p2 <= (grp_GFMul_fu_205_ap_return xor grp_GFMul_fu_197_ap_return);
    xor_ln417_42_fu_471_p2 <= (reg_256 xor reg_252);
    xor_ln417_43_fu_477_p2 <= (reg_260 xor grp_GFMul_fu_197_ap_return);
    xor_ln417_44_fu_489_p2 <= (grp_GFMul_fu_213_ap_return xor grp_GFMul_fu_205_ap_return);
    xor_ln417_45_fu_495_p2 <= (grp_GFMul_fu_229_ap_return xor grp_GFMul_fu_221_ap_return);
    xor_ln417_46_fu_507_p2 <= (grp_GFMul_fu_205_ap_return xor grp_GFMul_fu_197_ap_return);
    xor_ln417_47_fu_513_p2 <= (grp_GFMul_fu_221_ap_return xor grp_GFMul_fu_213_ap_return);
    xor_ln417_4_fu_279_p2 <= (tmp_5_0_1_reg_639 xor tmp_0_1_reg_561);
    xor_ln417_5_fu_351_p2 <= (xor_ln417_8_fu_342_p2 xor xor_ln417_10_fu_346_p2);
    xor_ln417_6_fu_283_p2 <= (tmp_6_0_1_reg_731 xor grp_GFMul_fu_205_ap_return);
    xor_ln417_7_fu_366_p2 <= (xor_ln417_14_fu_361_p2 xor xor_ln417_12_fu_357_p2);
    xor_ln417_8_fu_342_p2 <= (tmp_5_0_2_reg_681 xor tmp_0_2_reg_588);
    xor_ln417_9_fu_304_p2 <= (xor_ln417_18_fu_299_p2 xor xor_ln417_16_fu_294_p2);
    xor_ln417_fu_264_p2 <= (tmp_reg_556 xor tmp_5_reg_634);
end behav;
