// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_deAes_return_Pipeline_addRoundKey_label0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cArray_address0,
        cArray_ce0,
        cArray_we0,
        cArray_d0,
        cArray_q0,
        cArray_address1,
        cArray_ce1,
        cArray_we1,
        cArray_d1,
        cArray_q1,
        w_address0,
        w_ce0,
        w_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] cArray_address0;
output   cArray_ce0;
output   cArray_we0;
output  [31:0] cArray_d0;
input  [31:0] cArray_q0;
output  [3:0] cArray_address1;
output   cArray_ce1;
output   cArray_we1;
output  [31:0] cArray_d1;
input  [31:0] cArray_q1;
output  [5:0] w_address0;
output   w_ce0;
input  [31:0] w_q0;

reg ap_idle;
reg[3:0] cArray_address0;
reg cArray_ce0;
reg cArray_we0;
reg[31:0] cArray_d0;
reg[3:0] cArray_address1;
reg cArray_ce1;
reg cArray_we1;
reg[31:0] cArray_d1;
reg w_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln178_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [2:0] i_reg_259;
reg   [3:0] cArray_addr_1_reg_267;
wire  signed [2:0] xor_ln183_5_fu_135_p2;
reg  signed [2:0] xor_ln183_5_reg_272;
reg   [3:0] cArray_addr_2_reg_277;
reg   [3:0] cArray_addr_4_reg_287;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [3:0] cArray_addr_5_reg_292;
wire   [7:0] trunc_ln94_fu_180_p1;
reg   [7:0] trunc_ln94_reg_297;
reg   [7:0] trunc_ln2_reg_302;
wire   [31:0] xor_ln183_fu_222_p2;
reg   [31:0] xor_ln183_reg_307;
wire   [31:0] xor_ln183_1_fu_228_p2;
reg   [31:0] xor_ln183_1_reg_312;
wire   [31:0] xor_ln183_2_fu_240_p2;
reg   [31:0] xor_ln183_2_reg_317;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [31:0] xor_ln183_3_fu_246_p2;
reg   [31:0] xor_ln183_3_reg_322;
wire   [63:0] i_2_cast38_fu_130_p1;
wire   [63:0] zext_ln183_3_fu_141_p1;
wire   [63:0] zext_ln180_fu_154_p1;
wire   [63:0] tmp_5_fu_164_p3;
wire   [63:0] zext_ln183_4_fu_175_p1;
reg   [2:0] i_2_fu_52;
wire   [2:0] add_ln178_fu_124_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
wire   [5:0] or_ln_fu_146_p3;
wire  signed [3:0] sext_ln183_fu_172_p1;
wire   [7:0] lshr_ln_fu_184_p4;
wire   [7:0] trunc_ln1_fu_198_p4;
wire   [31:0] zext_ln96_fu_194_p1;
wire   [31:0] zext_ln100_fu_208_p1;
wire   [31:0] zext_ln102_fu_234_p1;
wire   [31:0] zext_ln183_fu_237_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_done_reg = 1'b0;
end

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln178_fu_118_p2 == 1'd0)) begin
            i_2_fu_52 <= add_ln178_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_52 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_fu_118_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        cArray_addr_1_reg_267[2 : 0] <= i_2_cast38_fu_130_p1[2 : 0];
        cArray_addr_2_reg_277[2 : 0] <= zext_ln183_3_fu_141_p1[2 : 0];
        xor_ln183_5_reg_272 <= xor_ln183_5_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cArray_addr_4_reg_287[2 : 0] <= tmp_5_fu_164_p3[2 : 0];
        cArray_addr_5_reg_292 <= zext_ln183_4_fu_175_p1;
        trunc_ln2_reg_302 <= {{w_q0[15:8]}};
        trunc_ln94_reg_297 <= trunc_ln94_fu_180_p1;
        xor_ln183_1_reg_312 <= xor_ln183_1_fu_228_p2;
        xor_ln183_reg_307 <= xor_ln183_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_259 <= ap_sig_allocacmp_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln183_2_reg_317 <= xor_ln183_2_fu_240_p2;
        xor_ln183_3_reg_322 <= xor_ln183_3_fu_246_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln178_fu_118_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_52;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cArray_address0 = cArray_addr_5_reg_292;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cArray_address0 = cArray_addr_2_reg_277;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cArray_address0 = zext_ln183_4_fu_175_p1;
    end else if (((icmp_ln178_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        cArray_address0 = zext_ln183_3_fu_141_p1;
    end else begin
        cArray_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cArray_address1 = cArray_addr_4_reg_287;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cArray_address1 = cArray_addr_1_reg_267;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        cArray_address1 = tmp_5_fu_164_p3;
    end else if (((icmp_ln178_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        cArray_address1 = i_2_cast38_fu_130_p1;
    end else begin
        cArray_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln178_fu_118_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cArray_ce0 = 1'b1;
    end else begin
        cArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((icmp_ln178_fu_118_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        cArray_ce1 = 1'b1;
    end else begin
        cArray_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cArray_d0 = xor_ln183_3_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cArray_d0 = xor_ln183_1_reg_312;
    end else begin
        cArray_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        cArray_d1 = xor_ln183_2_reg_317;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        cArray_d1 = xor_ln183_reg_307;
    end else begin
        cArray_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        cArray_we0 = 1'b1;
    end else begin
        cArray_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        cArray_we1 = 1'b1;
    end else begin
        cArray_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln178_fu_118_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln178_fu_124_p2 = (ap_sig_allocacmp_i + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_cast38_fu_130_p1 = ap_sig_allocacmp_i;

assign icmp_ln178_fu_118_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign lshr_ln_fu_184_p4 = {{w_q0[31:24]}};

assign or_ln_fu_146_p3 = {{3'd5}, {ap_sig_allocacmp_i}};

assign sext_ln183_fu_172_p1 = xor_ln183_5_reg_272;

assign tmp_5_fu_164_p3 = {{61'd1}, {i_reg_259}};

assign trunc_ln1_fu_198_p4 = {{w_q0[23:16]}};

assign trunc_ln94_fu_180_p1 = w_q0[7:0];

assign w_address0 = zext_ln180_fu_154_p1;

assign xor_ln183_1_fu_228_p2 = (zext_ln100_fu_208_p1 ^ cArray_q0);

assign xor_ln183_2_fu_240_p2 = (zext_ln102_fu_234_p1 ^ cArray_q1);

assign xor_ln183_3_fu_246_p2 = (zext_ln183_fu_237_p1 ^ cArray_q0);

assign xor_ln183_5_fu_135_p2 = (ap_sig_allocacmp_i ^ 3'd4);

assign xor_ln183_fu_222_p2 = (zext_ln96_fu_194_p1 ^ cArray_q1);

assign zext_ln100_fu_208_p1 = trunc_ln1_fu_198_p4;

assign zext_ln102_fu_234_p1 = trunc_ln2_reg_302;

assign zext_ln180_fu_154_p1 = or_ln_fu_146_p3;

assign zext_ln183_3_fu_141_p1 = $unsigned(xor_ln183_5_fu_135_p2);

assign zext_ln183_4_fu_175_p1 = $unsigned(sext_ln183_fu_172_p1);

assign zext_ln183_fu_237_p1 = trunc_ln94_reg_297;

assign zext_ln96_fu_194_p1 = lshr_ln_fu_184_p4;

always @ (posedge ap_clk) begin
    cArray_addr_1_reg_267[3] <= 1'b0;
    cArray_addr_2_reg_277[3] <= 1'b0;
    cArray_addr_4_reg_287[3] <= 1'b1;
end

endmodule //TOP_deAes_return_Pipeline_addRoundKey_label0
