// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_260_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        R_din,
        R_full_n,
        R_write,
        p_0_0_033131774_lcssa1956_reload,
        conv_i_i_i23841870_lcssa2020_reload,
        p_0_0_033131771_lcssa1954_reload,
        conv_i_i_i23841867_lcssa2018_reload,
        p_0_0_033131768_lcssa1952_reload,
        conv_i_i_i23841864_lcssa2016_reload,
        p_0_0_033131777_lcssa1958_reload,
        conv_i_i_i23841873_lcssa2022_reload,
        p_0_0_033121822_lcssa1988_reload,
        p_0_0_033131918_lcssa2052_reload,
        p_0_0_033121819_lcssa1986_reload,
        p_0_0_033131915_lcssa2050_reload,
        p_0_0_033121816_lcssa1984_reload,
        p_0_0_033131912_lcssa2048_reload,
        p_0_0_033121825_lcssa1990_reload,
        p_0_0_033131921_lcssa2054_reload,
        p_0_0_033131761_lcssa1948_reload,
        conv_i_i_i23841857_lcssa2012_reload,
        p_0_0_033131758_lcssa1946_reload,
        conv_i_i_i23841854_lcssa2010_reload,
        p_0_0_033131755_lcssa1944_reload,
        conv_i_i_i23841851_lcssa2008_reload,
        p_0_0_033131764_lcssa1950_reload,
        conv_i_i_i23841860_lcssa2014_reload,
        p_0_0_033121809_lcssa1980_reload,
        p_0_0_033131905_lcssa2044_reload,
        p_0_0_033121806_lcssa1978_reload,
        p_0_0_033131902_lcssa2042_reload,
        p_0_0_033121803_lcssa1976_reload,
        p_0_0_033131899_lcssa2040_reload,
        p_0_0_033121812_lcssa1982_reload,
        p_0_0_033131908_lcssa2046_reload,
        p_0_0_033131749_lcssa1940_reload,
        conv_i_i_i23841845_lcssa2004_reload,
        p_0_0_033131746_lcssa1938_reload,
        conv_i_i_i23841842_lcssa2002_reload,
        p_0_0_033131743_lcssa1936_reload,
        conv_i_i_i23841839_lcssa2000_reload,
        p_0_0_033131752_lcssa1942_reload,
        conv_i_i_i23841848_lcssa2006_reload,
        p_0_0_033121797_lcssa1972_reload,
        p_0_0_033131893_lcssa2036_reload,
        p_0_0_033121794_lcssa1970_reload,
        p_0_0_033131890_lcssa2034_reload,
        p_0_0_033121791_lcssa1968_reload,
        p_0_0_033131887_lcssa2032_reload,
        p_0_0_033121800_lcssa1974_reload,
        p_0_0_033131896_lcssa2038_reload,
        p_0_0_033131785_lcssa1964_reload,
        conv_i_i_i23841881_lcssa2028_reload,
        p_0_0_033131782_lcssa1962_reload,
        conv_i_i_i23841878_lcssa2026_reload,
        p_0_0_033131779_lcssa1960_reload,
        conv_i_i_i23841875_lcssa2024_reload,
        p_0_0_033131788_lcssa1966_reload,
        conv_i_i_i23841884_lcssa2030_reload,
        p_0_0_033121833_lcssa1996_reload,
        p_0_0_033131929_lcssa2060_reload,
        p_0_0_033121830_lcssa1994_reload,
        p_0_0_033131926_lcssa2058_reload,
        p_0_0_033121827_lcssa1992_reload,
        p_0_0_033131923_lcssa2056_reload,
        p_0_0_033121836_lcssa1998_reload,
        p_0_0_033131932_lcssa2062_reload
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] R_din;
input   R_full_n;
output   R_write;
input  [15:0] p_0_0_033131774_lcssa1956_reload;
input  [15:0] conv_i_i_i23841870_lcssa2020_reload;
input  [15:0] p_0_0_033131771_lcssa1954_reload;
input  [15:0] conv_i_i_i23841867_lcssa2018_reload;
input  [15:0] p_0_0_033131768_lcssa1952_reload;
input  [15:0] conv_i_i_i23841864_lcssa2016_reload;
input  [15:0] p_0_0_033131777_lcssa1958_reload;
input  [15:0] conv_i_i_i23841873_lcssa2022_reload;
input  [15:0] p_0_0_033121822_lcssa1988_reload;
input  [15:0] p_0_0_033131918_lcssa2052_reload;
input  [15:0] p_0_0_033121819_lcssa1986_reload;
input  [15:0] p_0_0_033131915_lcssa2050_reload;
input  [15:0] p_0_0_033121816_lcssa1984_reload;
input  [15:0] p_0_0_033131912_lcssa2048_reload;
input  [15:0] p_0_0_033121825_lcssa1990_reload;
input  [15:0] p_0_0_033131921_lcssa2054_reload;
input  [15:0] p_0_0_033131761_lcssa1948_reload;
input  [15:0] conv_i_i_i23841857_lcssa2012_reload;
input  [15:0] p_0_0_033131758_lcssa1946_reload;
input  [15:0] conv_i_i_i23841854_lcssa2010_reload;
input  [15:0] p_0_0_033131755_lcssa1944_reload;
input  [15:0] conv_i_i_i23841851_lcssa2008_reload;
input  [15:0] p_0_0_033131764_lcssa1950_reload;
input  [15:0] conv_i_i_i23841860_lcssa2014_reload;
input  [15:0] p_0_0_033121809_lcssa1980_reload;
input  [15:0] p_0_0_033131905_lcssa2044_reload;
input  [15:0] p_0_0_033121806_lcssa1978_reload;
input  [15:0] p_0_0_033131902_lcssa2042_reload;
input  [15:0] p_0_0_033121803_lcssa1976_reload;
input  [15:0] p_0_0_033131899_lcssa2040_reload;
input  [15:0] p_0_0_033121812_lcssa1982_reload;
input  [15:0] p_0_0_033131908_lcssa2046_reload;
input  [15:0] p_0_0_033131749_lcssa1940_reload;
input  [15:0] conv_i_i_i23841845_lcssa2004_reload;
input  [15:0] p_0_0_033131746_lcssa1938_reload;
input  [15:0] conv_i_i_i23841842_lcssa2002_reload;
input  [15:0] p_0_0_033131743_lcssa1936_reload;
input  [15:0] conv_i_i_i23841839_lcssa2000_reload;
input  [15:0] p_0_0_033131752_lcssa1942_reload;
input  [15:0] conv_i_i_i23841848_lcssa2006_reload;
input  [15:0] p_0_0_033121797_lcssa1972_reload;
input  [15:0] p_0_0_033131893_lcssa2036_reload;
input  [15:0] p_0_0_033121794_lcssa1970_reload;
input  [15:0] p_0_0_033131890_lcssa2034_reload;
input  [15:0] p_0_0_033121791_lcssa1968_reload;
input  [15:0] p_0_0_033131887_lcssa2032_reload;
input  [15:0] p_0_0_033121800_lcssa1974_reload;
input  [15:0] p_0_0_033131896_lcssa2038_reload;
input  [15:0] p_0_0_033131785_lcssa1964_reload;
input  [15:0] conv_i_i_i23841881_lcssa2028_reload;
input  [15:0] p_0_0_033131782_lcssa1962_reload;
input  [15:0] conv_i_i_i23841878_lcssa2026_reload;
input  [15:0] p_0_0_033131779_lcssa1960_reload;
input  [15:0] conv_i_i_i23841875_lcssa2024_reload;
input  [15:0] p_0_0_033131788_lcssa1966_reload;
input  [15:0] conv_i_i_i23841884_lcssa2030_reload;
input  [15:0] p_0_0_033121833_lcssa1996_reload;
input  [15:0] p_0_0_033131929_lcssa2060_reload;
input  [15:0] p_0_0_033121830_lcssa1994_reload;
input  [15:0] p_0_0_033131926_lcssa2058_reload;
input  [15:0] p_0_0_033121827_lcssa1992_reload;
input  [15:0] p_0_0_033131923_lcssa2056_reload;
input  [15:0] p_0_0_033121836_lcssa1998_reload;
input  [15:0] p_0_0_033131932_lcssa2062_reload;

reg ap_idle;
reg R_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln259_fu_595_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    R_blk_n;
wire    ap_block_pp0_stage0;
wire   [15:0] p_0_fu_817_p10;
reg   [15:0] p_0_reg_884;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] j_fu_174;
wire   [3:0] add_ln260_fu_839_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_178;
wire   [3:0] select_ln259_fu_633_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten_fu_182;
wire   [6:0] add_ln259_1_fu_601_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln260_fu_619_p2;
wire   [3:0] add_ln259_fu_613_p2;
wire   [3:0] select_ln118_fu_625_p3;
wire   [15:0] tmp_8_fu_641_p10;
wire   [15:0] tmp_9_fu_663_p10;
wire   [15:0] tmp_10_fu_685_p10;
wire   [15:0] tmp_11_fu_707_p10;
wire   [15:0] tmp_12_fu_729_p10;
wire   [15:0] tmp_13_fu_751_p10;
wire   [15:0] tmp_14_fu_773_p10;
wire   [15:0] tmp_15_fu_795_p10;
wire   [3:0] p_0_fu_817_p9;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U331(
    .din0(p_0_0_033131774_lcssa1956_reload),
    .din1(conv_i_i_i23841870_lcssa2020_reload),
    .din2(p_0_0_033131771_lcssa1954_reload),
    .din3(conv_i_i_i23841867_lcssa2018_reload),
    .din4(p_0_0_033131768_lcssa1952_reload),
    .din5(conv_i_i_i23841864_lcssa2016_reload),
    .din6(p_0_0_033131777_lcssa1958_reload),
    .din7(conv_i_i_i23841873_lcssa2022_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_8_fu_641_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U332(
    .din0(p_0_0_033121822_lcssa1988_reload),
    .din1(p_0_0_033131918_lcssa2052_reload),
    .din2(p_0_0_033121819_lcssa1986_reload),
    .din3(p_0_0_033131915_lcssa2050_reload),
    .din4(p_0_0_033121816_lcssa1984_reload),
    .din5(p_0_0_033131912_lcssa2048_reload),
    .din6(p_0_0_033121825_lcssa1990_reload),
    .din7(p_0_0_033131921_lcssa2054_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_9_fu_663_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U333(
    .din0(p_0_0_033131761_lcssa1948_reload),
    .din1(conv_i_i_i23841857_lcssa2012_reload),
    .din2(p_0_0_033131758_lcssa1946_reload),
    .din3(conv_i_i_i23841854_lcssa2010_reload),
    .din4(p_0_0_033131755_lcssa1944_reload),
    .din5(conv_i_i_i23841851_lcssa2008_reload),
    .din6(p_0_0_033131764_lcssa1950_reload),
    .din7(conv_i_i_i23841860_lcssa2014_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_10_fu_685_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U334(
    .din0(p_0_0_033121809_lcssa1980_reload),
    .din1(p_0_0_033131905_lcssa2044_reload),
    .din2(p_0_0_033121806_lcssa1978_reload),
    .din3(p_0_0_033131902_lcssa2042_reload),
    .din4(p_0_0_033121803_lcssa1976_reload),
    .din5(p_0_0_033131899_lcssa2040_reload),
    .din6(p_0_0_033121812_lcssa1982_reload),
    .din7(p_0_0_033131908_lcssa2046_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_11_fu_707_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U335(
    .din0(p_0_0_033131749_lcssa1940_reload),
    .din1(conv_i_i_i23841845_lcssa2004_reload),
    .din2(p_0_0_033131746_lcssa1938_reload),
    .din3(conv_i_i_i23841842_lcssa2002_reload),
    .din4(p_0_0_033131743_lcssa1936_reload),
    .din5(conv_i_i_i23841839_lcssa2000_reload),
    .din6(p_0_0_033131752_lcssa1942_reload),
    .din7(conv_i_i_i23841848_lcssa2006_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_12_fu_729_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U336(
    .din0(p_0_0_033121797_lcssa1972_reload),
    .din1(p_0_0_033131893_lcssa2036_reload),
    .din2(p_0_0_033121794_lcssa1970_reload),
    .din3(p_0_0_033131890_lcssa2034_reload),
    .din4(p_0_0_033121791_lcssa1968_reload),
    .din5(p_0_0_033131887_lcssa2032_reload),
    .din6(p_0_0_033121800_lcssa1974_reload),
    .din7(p_0_0_033131896_lcssa2038_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_13_fu_751_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U337(
    .din0(p_0_0_033131785_lcssa1964_reload),
    .din1(conv_i_i_i23841881_lcssa2028_reload),
    .din2(p_0_0_033131782_lcssa1962_reload),
    .din3(conv_i_i_i23841878_lcssa2026_reload),
    .din4(p_0_0_033131779_lcssa1960_reload),
    .din5(conv_i_i_i23841875_lcssa2024_reload),
    .din6(p_0_0_033131788_lcssa1966_reload),
    .din7(conv_i_i_i23841884_lcssa2030_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_14_fu_773_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U338(
    .din0(p_0_0_033121833_lcssa1996_reload),
    .din1(p_0_0_033131929_lcssa2060_reload),
    .din2(p_0_0_033121830_lcssa1994_reload),
    .din3(p_0_0_033131926_lcssa2058_reload),
    .din4(p_0_0_033121827_lcssa1992_reload),
    .din5(p_0_0_033131923_lcssa2056_reload),
    .din6(p_0_0_033121836_lcssa1998_reload),
    .din7(p_0_0_033131932_lcssa2062_reload),
    .din8(select_ln118_fu_625_p3),
    .dout(tmp_15_fu_795_p10)
);

TOP_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U339(
    .din0(tmp_8_fu_641_p10),
    .din1(tmp_9_fu_663_p10),
    .din2(tmp_10_fu_685_p10),
    .din3(tmp_11_fu_707_p10),
    .din4(tmp_12_fu_729_p10),
    .din5(tmp_13_fu_751_p10),
    .din6(tmp_14_fu_773_p10),
    .din7(tmp_15_fu_795_p10),
    .din8(p_0_fu_817_p9),
    .dout(p_0_fu_817_p10)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln259_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_178 <= select_ln259_fu_633_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_178 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln259_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_182 <= add_ln259_1_fu_601_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_182 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln259_fu_595_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_174 <= add_ln260_fu_839_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_174 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln259_fu_595_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_reg_884 <= p_0_fu_817_p10;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_blk_n = R_full_n;
    end else begin
        R_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        R_write = 1'b1;
    end else begin
        R_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln259_fu_595_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_178;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_182;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_174;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign R_din = p_0_reg_884;

assign add_ln259_1_fu_601_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln259_fu_613_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln260_fu_839_p2 = (select_ln118_fu_625_p3 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == R_full_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == R_full_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == R_full_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == R_full_n);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln259_fu_595_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln260_fu_619_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign p_0_fu_817_p9 = ((icmp_ln260_fu_619_p2[0:0] == 1'b1) ? add_ln259_fu_613_p2 : ap_sig_allocacmp_i_load);

assign select_ln118_fu_625_p3 = ((icmp_ln260_fu_619_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln259_fu_633_p3 = ((icmp_ln260_fu_619_p2[0:0] == 1'b1) ? add_ln259_fu_613_p2 : ap_sig_allocacmp_i_load);

endmodule //TOP_QRD_Pipeline_LOOP_02_VITIS_LOOP_260_6
