// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_channel_mult (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        H_real_spl0_dout,
        H_real_spl0_empty_n,
        H_real_spl0_read,
        H_imag_spl0_dout,
        H_imag_spl0_empty_n,
        H_imag_spl0_read,
        xr_dout,
        xr_empty_n,
        xr_read,
        xi_dout,
        xi_empty_n,
        xi_read,
        channel_out_din,
        channel_out_full_n,
        channel_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] H_real_spl0_dout;
input   H_real_spl0_empty_n;
output   H_real_spl0_read;
input  [15:0] H_imag_spl0_dout;
input   H_imag_spl0_empty_n;
output   H_imag_spl0_read;
input  [15:0] xr_dout;
input   xr_empty_n;
output   xr_read;
input  [15:0] xi_dout;
input   xi_empty_n;
output   xi_read;
output  [15:0] channel_out_din;
input   channel_out_full_n;
output   channel_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg H_real_spl0_read;
reg H_imag_spl0_read;
reg xr_read;
reg xi_read;
reg channel_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [5:0] CHANNEL_V_address0;
reg    CHANNEL_V_ce0;
reg    CHANNEL_V_we0;
wire   [15:0] CHANNEL_V_q0;
reg   [5:0] CHANNEL_V_address1;
reg    CHANNEL_V_ce1;
reg    CHANNEL_V_we1;
wire   [15:0] CHANNEL_V_q1;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_done;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_idle;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_ready;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_H_real_spl0_read;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_H_imag_spl0_read;
wire   [5:0] grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_address0;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_ce0;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_we0;
wire   [15:0] grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_d0;
wire   [5:0] grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_address1;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_ce1;
wire    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_we1;
wire   [15:0] grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_d1;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_idle;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_ready;
wire   [15:0] grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_channel_out_din;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_channel_out_write;
wire   [5:0] grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_address0;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_ce0;
wire   [5:0] grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_address1;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_ce1;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_xr_read;
wire    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_xi_read;
reg    grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start_reg;
reg    ap_block_state1_ignore_call22;
wire    ap_CS_fsm_state2;
reg    grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start_reg = 1'b0;
#0 grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start_reg = 1'b0;
end

TOP_channel_mult_CHANNEL_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
CHANNEL_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(CHANNEL_V_address0),
    .ce0(CHANNEL_V_ce0),
    .we0(CHANNEL_V_we0),
    .d0(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_d0),
    .q0(CHANNEL_V_q0),
    .address1(CHANNEL_V_address1),
    .ce1(CHANNEL_V_ce1),
    .we1(CHANNEL_V_we1),
    .d1(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_d1),
    .q1(CHANNEL_V_q1)
);

TOP_channel_mult_Pipeline_CHANNEL2REAL grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start),
    .ap_done(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_done),
    .ap_idle(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_idle),
    .ap_ready(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_ready),
    .H_real_spl0_dout(H_real_spl0_dout),
    .H_real_spl0_empty_n(H_real_spl0_empty_n),
    .H_real_spl0_read(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_H_real_spl0_read),
    .H_imag_spl0_dout(H_imag_spl0_dout),
    .H_imag_spl0_empty_n(H_imag_spl0_empty_n),
    .H_imag_spl0_read(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_H_imag_spl0_read),
    .CHANNEL_V_address0(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_address0),
    .CHANNEL_V_ce0(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_ce0),
    .CHANNEL_V_we0(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_we0),
    .CHANNEL_V_d0(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_d0),
    .CHANNEL_V_address1(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_address1),
    .CHANNEL_V_ce1(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_ce1),
    .CHANNEL_V_we1(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_we1),
    .CHANNEL_V_d1(grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_d1)
);

TOP_channel_mult_Pipeline_VITIS_LOOP_61_1 grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start),
    .ap_done(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done),
    .ap_idle(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_idle),
    .ap_ready(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_ready),
    .channel_out_din(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_channel_out_din),
    .channel_out_full_n(channel_out_full_n),
    .channel_out_write(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_channel_out_write),
    .CHANNEL_V_address0(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_address0),
    .CHANNEL_V_ce0(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_ce0),
    .CHANNEL_V_q0(CHANNEL_V_q0),
    .CHANNEL_V_address1(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_address1),
    .CHANNEL_V_ce1(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_ce1),
    .CHANNEL_V_q1(CHANNEL_V_q1),
    .xr_dout(xr_dout),
    .xr_empty_n(xr_empty_n),
    .xr_read(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_xr_read),
    .xi_dout(xi_dout),
    .xi_empty_n(xi_empty_n),
    .xi_read(grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_xi_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start_reg <= 1'b0;
    end else begin
        if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start_reg <= 1'b1;
        end else if ((grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_ready == 1'b1)) begin
            grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start_reg <= 1'b1;
        end else if ((grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_ready == 1'b1)) begin
            grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        CHANNEL_V_address0 = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        CHANNEL_V_address0 = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_address0;
    end else begin
        CHANNEL_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        CHANNEL_V_address1 = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        CHANNEL_V_address1 = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_address1;
    end else begin
        CHANNEL_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        CHANNEL_V_ce0 = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        CHANNEL_V_ce0 = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_ce0;
    end else begin
        CHANNEL_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        CHANNEL_V_ce1 = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_CHANNEL_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        CHANNEL_V_ce1 = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_ce1;
    end else begin
        CHANNEL_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        CHANNEL_V_we0 = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_we0;
    end else begin
        CHANNEL_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        CHANNEL_V_we1 = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_CHANNEL_V_we1;
    end else begin
        CHANNEL_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        H_imag_spl0_read = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_H_imag_spl0_read;
    end else begin
        H_imag_spl0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        H_real_spl0_read = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_H_real_spl0_read;
    end else begin
        H_real_spl0_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        channel_out_write = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_channel_out_write;
    end else begin
        channel_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xi_read = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_xi_read;
    end else begin
        xi_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xr_read = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_xr_read;
    end else begin
        xr_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call22 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign channel_out_din = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_channel_out_din;

assign grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start = grp_channel_mult_Pipeline_CHANNEL2REAL_fu_30_ap_start_reg;

assign grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start = grp_channel_mult_Pipeline_VITIS_LOOP_61_1_fu_40_ap_start_reg;

assign start_out = real_start;

endmodule //TOP_channel_mult
