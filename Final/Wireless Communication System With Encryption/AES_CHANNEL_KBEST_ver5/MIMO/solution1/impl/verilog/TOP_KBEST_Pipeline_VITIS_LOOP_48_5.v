// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_KBEST_Pipeline_VITIS_LOOP_48_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln42_61,
        select_ln42_62,
        select_ln42_64,
        select_ln42_67,
        select_ln42_69,
        select_ln42_72,
        select_ln42_75,
        select_ln42_16,
        select_ln42_13,
        select_ln42_12,
        select_ln42_10,
        select_ln42_7,
        select_ln42_5,
        select_ln42_2,
        select_ln42_42,
        select_ln42_43,
        select_ln42_45,
        select_ln42_48,
        select_ln42_50,
        select_ln42_53,
        select_ln42_56,
        select_ln42_35,
        select_ln42_32,
        select_ln42_31,
        select_ln42_29,
        select_ln42_26,
        select_ln42_24,
        select_ln42_21,
        survival_path_address0,
        survival_path_ce0,
        survival_path_q0,
        survival_path_address1,
        survival_path_ce1,
        survival_path_q1,
        zext_ln36,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld,
        p_out12,
        p_out12_ap_vld,
        p_out13,
        p_out13_ap_vld,
        p_out14,
        p_out14_ap_vld,
        p_out15,
        p_out15_ap_vld,
        p_out16,
        p_out16_ap_vld,
        p_out17,
        p_out17_ap_vld,
        p_out18,
        p_out18_ap_vld,
        p_out19,
        p_out19_ap_vld,
        p_out20,
        p_out20_ap_vld,
        p_out21,
        p_out21_ap_vld,
        p_out22,
        p_out22_ap_vld,
        p_out23,
        p_out23_ap_vld,
        p_out24,
        p_out24_ap_vld,
        p_out25,
        p_out25_ap_vld,
        p_out26,
        p_out26_ap_vld,
        p_out27,
        p_out27_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] select_ln42_61;
input  [31:0] select_ln42_62;
input  [31:0] select_ln42_64;
input  [31:0] select_ln42_67;
input  [31:0] select_ln42_69;
input  [31:0] select_ln42_72;
input  [31:0] select_ln42_75;
input  [31:0] select_ln42_16;
input  [31:0] select_ln42_13;
input  [31:0] select_ln42_12;
input  [31:0] select_ln42_10;
input  [31:0] select_ln42_7;
input  [31:0] select_ln42_5;
input  [31:0] select_ln42_2;
input  [31:0] select_ln42_42;
input  [31:0] select_ln42_43;
input  [31:0] select_ln42_45;
input  [31:0] select_ln42_48;
input  [31:0] select_ln42_50;
input  [31:0] select_ln42_53;
input  [31:0] select_ln42_56;
input  [31:0] select_ln42_35;
input  [31:0] select_ln42_32;
input  [31:0] select_ln42_31;
input  [31:0] select_ln42_29;
input  [31:0] select_ln42_26;
input  [31:0] select_ln42_24;
input  [31:0] select_ln42_21;
output  [3:0] survival_path_address0;
output   survival_path_ce0;
input  [31:0] survival_path_q0;
output  [3:0] survival_path_address1;
output   survival_path_ce1;
input  [31:0] survival_path_q1;
input  [2:0] zext_ln36;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] p_out2;
output   p_out2_ap_vld;
output  [31:0] p_out3;
output   p_out3_ap_vld;
output  [31:0] p_out4;
output   p_out4_ap_vld;
output  [31:0] p_out5;
output   p_out5_ap_vld;
output  [31:0] p_out6;
output   p_out6_ap_vld;
output  [31:0] p_out7;
output   p_out7_ap_vld;
output  [31:0] p_out8;
output   p_out8_ap_vld;
output  [31:0] p_out9;
output   p_out9_ap_vld;
output  [31:0] p_out10;
output   p_out10_ap_vld;
output  [31:0] p_out11;
output   p_out11_ap_vld;
output  [31:0] p_out12;
output   p_out12_ap_vld;
output  [31:0] p_out13;
output   p_out13_ap_vld;
output  [31:0] p_out14;
output   p_out14_ap_vld;
output  [31:0] p_out15;
output   p_out15_ap_vld;
output  [31:0] p_out16;
output   p_out16_ap_vld;
output  [31:0] p_out17;
output   p_out17_ap_vld;
output  [31:0] p_out18;
output   p_out18_ap_vld;
output  [31:0] p_out19;
output   p_out19_ap_vld;
output  [31:0] p_out20;
output   p_out20_ap_vld;
output  [31:0] p_out21;
output   p_out21_ap_vld;
output  [31:0] p_out22;
output   p_out22_ap_vld;
output  [31:0] p_out23;
output   p_out23_ap_vld;
output  [31:0] p_out24;
output   p_out24_ap_vld;
output  [31:0] p_out25;
output   p_out25_ap_vld;
output  [31:0] p_out26;
output   p_out26_ap_vld;
output  [31:0] p_out27;
output   p_out27_ap_vld;

reg ap_idle;
reg survival_path_ce0;
reg survival_path_ce1;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;
reg p_out12_ap_vld;
reg p_out13_ap_vld;
reg p_out14_ap_vld;
reg p_out15_ap_vld;
reg p_out16_ap_vld;
reg p_out17_ap_vld;
reg p_out18_ap_vld;
reg p_out19_ap_vld;
reg p_out20_ap_vld;
reg p_out21_ap_vld;
reg p_out22_ap_vld;
reg p_out23_ap_vld;
reg p_out24_ap_vld;
reg p_out25_ap_vld;
reg p_out26_ap_vld;
reg p_out27_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln48_fu_843_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [62:0] zext_ln36_cast_fu_671_p1;
reg   [62:0] zext_ln36_cast_reg_1318;
wire   [2:0] trunc_ln49_1_fu_848_p1;
reg   [2:0] trunc_ln49_1_reg_1336;
wire   [63:0] i_32_cast_fu_823_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln51_fu_838_p1;
reg   [62:0] i_fu_160;
wire   [62:0] add_ln48_fu_852_p2;
wire    ap_loop_init;
reg   [31:0] empty_fu_164;
reg   [31:0] empty_410_fu_168;
reg   [31:0] empty_411_fu_172;
reg   [31:0] empty_412_fu_176;
reg   [31:0] empty_413_fu_180;
reg   [31:0] empty_414_fu_184;
reg   [31:0] empty_415_fu_188;
reg   [31:0] empty_416_fu_192;
reg   [31:0] empty_417_fu_196;
reg   [31:0] empty_418_fu_200;
reg   [31:0] empty_419_fu_204;
reg   [31:0] empty_420_fu_208;
reg   [31:0] empty_421_fu_212;
reg   [31:0] empty_422_fu_216;
reg   [31:0] empty_423_fu_220;
reg   [31:0] empty_424_fu_224;
reg   [31:0] empty_425_fu_228;
reg   [31:0] empty_426_fu_232;
reg   [31:0] empty_427_fu_236;
reg   [31:0] empty_428_fu_240;
reg   [31:0] empty_429_fu_244;
reg   [31:0] empty_430_fu_248;
reg   [31:0] empty_431_fu_252;
reg   [31:0] empty_432_fu_256;
reg   [31:0] empty_433_fu_260;
reg   [31:0] empty_434_fu_264;
reg   [31:0] empty_435_fu_268;
reg   [31:0] empty_436_fu_272;
wire    ap_block_pp0_stage0_01001;
wire   [3:0] trunc_ln49_fu_828_p1;
wire   [3:0] xor_ln51_fu_832_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_509;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_410_fu_168 <= select_ln42_24;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd5))) begin
            empty_410_fu_168 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_411_fu_172 <= select_ln42_26;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd4))) begin
            empty_411_fu_172 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_412_fu_176 <= select_ln42_29;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd3))) begin
            empty_412_fu_176 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_413_fu_180 <= select_ln42_31;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd2))) begin
            empty_413_fu_180 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_414_fu_184 <= select_ln42_32;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd1))) begin
            empty_414_fu_184 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_415_fu_188 <= select_ln42_35;
        end else if ((1'b1 == ap_condition_509)) begin
            empty_415_fu_188 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_416_fu_192 <= select_ln42_56;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd6))) begin
            empty_416_fu_192 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_417_fu_196 <= select_ln42_53;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd5))) begin
            empty_417_fu_196 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_418_fu_200 <= select_ln42_50;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd4))) begin
            empty_418_fu_200 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_419_fu_204 <= select_ln42_48;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd3))) begin
            empty_419_fu_204 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_420_fu_208 <= select_ln42_45;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd2))) begin
            empty_420_fu_208 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_421_fu_212 <= select_ln42_43;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd1))) begin
            empty_421_fu_212 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_422_fu_216 <= select_ln42_42;
        end else if ((1'b1 == ap_condition_509)) begin
            empty_422_fu_216 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_423_fu_220 <= select_ln42_2;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd6))) begin
            empty_423_fu_220 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_424_fu_224 <= select_ln42_5;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd5))) begin
            empty_424_fu_224 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_425_fu_228 <= select_ln42_7;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd4))) begin
            empty_425_fu_228 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_426_fu_232 <= select_ln42_10;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd3))) begin
            empty_426_fu_232 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_427_fu_236 <= select_ln42_12;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd2))) begin
            empty_427_fu_236 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_428_fu_240 <= select_ln42_13;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd1))) begin
            empty_428_fu_240 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_429_fu_244 <= select_ln42_16;
        end else if ((1'b1 == ap_condition_509)) begin
            empty_429_fu_244 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_430_fu_248 <= select_ln42_75;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd6))) begin
            empty_430_fu_248 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_431_fu_252 <= select_ln42_72;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd5))) begin
            empty_431_fu_252 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_432_fu_256 <= select_ln42_69;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd4))) begin
            empty_432_fu_256 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_433_fu_260 <= select_ln42_67;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd3))) begin
            empty_433_fu_260 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_434_fu_264 <= select_ln42_64;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd2))) begin
            empty_434_fu_264 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_435_fu_268 <= select_ln42_62;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd1))) begin
            empty_435_fu_268 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_436_fu_272 <= select_ln42_61;
        end else if ((1'b1 == ap_condition_509)) begin
            empty_436_fu_272 <= survival_path_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_164 <= select_ln42_21;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln49_1_reg_1336 == 3'd6))) begin
            empty_fu_164 <= survival_path_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_160 <= 63'd7;
        end else if (((icmp_ln48_fu_843_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_160 <= add_ln48_fu_852_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_843_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln49_1_reg_1336 <= trunc_ln49_1_fu_848_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln36_cast_reg_1318[2 : 0] <= zext_ln36_cast_fu_671_p1[2 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out12_ap_vld = 1'b1;
    end else begin
        p_out12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out13_ap_vld = 1'b1;
    end else begin
        p_out13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out14_ap_vld = 1'b1;
    end else begin
        p_out14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out15_ap_vld = 1'b1;
    end else begin
        p_out15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out16_ap_vld = 1'b1;
    end else begin
        p_out16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out17_ap_vld = 1'b1;
    end else begin
        p_out17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out18_ap_vld = 1'b1;
    end else begin
        p_out18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out19_ap_vld = 1'b1;
    end else begin
        p_out19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out20_ap_vld = 1'b1;
    end else begin
        p_out20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out21_ap_vld = 1'b1;
    end else begin
        p_out21_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out22_ap_vld = 1'b1;
    end else begin
        p_out22_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out23_ap_vld = 1'b1;
    end else begin
        p_out23_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out24_ap_vld = 1'b1;
    end else begin
        p_out24_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out25_ap_vld = 1'b1;
    end else begin
        p_out25_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out26_ap_vld = 1'b1;
    end else begin
        p_out26_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out27_ap_vld = 1'b1;
    end else begin
        p_out27_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_fu_843_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        survival_path_ce0 = 1'b1;
    end else begin
        survival_path_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        survival_path_ce1 = 1'b1;
    end else begin
        survival_path_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln48_fu_852_p2 = ($signed(i_fu_160) + $signed(63'd9223372036854775807));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_509 = ((ap_enable_reg_pp0_iter2 == 1'b1) & ((trunc_ln49_1_reg_1336 == 3'd0) | (trunc_ln49_1_reg_1336 == 3'd7)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_32_cast_fu_823_p1 = i_fu_160;

assign icmp_ln48_fu_843_p2 = ((i_fu_160 > zext_ln36_cast_reg_1318) ? 1'b1 : 1'b0);

assign p_out = empty_436_fu_272;

assign p_out1 = empty_435_fu_268;

assign p_out10 = empty_426_fu_232;

assign p_out11 = empty_425_fu_228;

assign p_out12 = empty_424_fu_224;

assign p_out13 = empty_423_fu_220;

assign p_out14 = empty_422_fu_216;

assign p_out15 = empty_421_fu_212;

assign p_out16 = empty_420_fu_208;

assign p_out17 = empty_419_fu_204;

assign p_out18 = empty_418_fu_200;

assign p_out19 = empty_417_fu_196;

assign p_out2 = empty_434_fu_264;

assign p_out20 = empty_416_fu_192;

assign p_out21 = empty_415_fu_188;

assign p_out22 = empty_414_fu_184;

assign p_out23 = empty_413_fu_180;

assign p_out24 = empty_412_fu_176;

assign p_out25 = empty_411_fu_172;

assign p_out26 = empty_410_fu_168;

assign p_out27 = empty_fu_164;

assign p_out3 = empty_433_fu_260;

assign p_out4 = empty_432_fu_256;

assign p_out5 = empty_431_fu_252;

assign p_out6 = empty_430_fu_248;

assign p_out7 = empty_429_fu_244;

assign p_out8 = empty_428_fu_240;

assign p_out9 = empty_427_fu_236;

assign survival_path_address0 = zext_ln51_fu_838_p1;

assign survival_path_address1 = i_32_cast_fu_823_p1;

assign trunc_ln49_1_fu_848_p1 = i_fu_160[2:0];

assign trunc_ln49_fu_828_p1 = i_fu_160[3:0];

assign xor_ln51_fu_832_p2 = (trunc_ln49_fu_828_p1 ^ 4'd8);

assign zext_ln36_cast_fu_671_p1 = zext_ln36;

assign zext_ln51_fu_838_p1 = xor_ln51_fu_832_p2;

always @ (posedge ap_clk) begin
    zext_ln36_cast_reg_1318[62:3] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //TOP_KBEST_Pipeline_VITIS_LOOP_48_5
