// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_KBEST_Pipeline_VITIS_LOOP_94_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        survival_path_address0,
        survival_path_ce0,
        survival_path_we0,
        survival_path_d0,
        survival_path_address1,
        survival_path_ce1,
        survival_path_we1,
        survival_path_d1,
        x_guess_62,
        x_guess_51,
        x_guess_50,
        x_guess_49,
        x_guess_48,
        x_guess_47,
        x_guess_46,
        x_guess_52,
        x_guess_63,
        x_guess_58,
        x_guess_57,
        x_guess_56,
        x_guess_55,
        x_guess_54,
        x_guess_53,
        x_guess_59
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] survival_path_address0;
output   survival_path_ce0;
output   survival_path_we0;
output  [31:0] survival_path_d0;
output  [3:0] survival_path_address1;
output   survival_path_ce1;
output   survival_path_we1;
output  [31:0] survival_path_d1;
input  [31:0] x_guess_62;
input  [31:0] x_guess_51;
input  [31:0] x_guess_50;
input  [31:0] x_guess_49;
input  [31:0] x_guess_48;
input  [31:0] x_guess_47;
input  [31:0] x_guess_46;
input  [31:0] x_guess_52;
input  [31:0] x_guess_63;
input  [31:0] x_guess_58;
input  [31:0] x_guess_57;
input  [31:0] x_guess_56;
input  [31:0] x_guess_55;
input  [31:0] x_guess_54;
input  [31:0] x_guess_53;
input  [31:0] x_guess_59;

reg ap_idle;
reg survival_path_ce0;
reg survival_path_we0;
reg survival_path_ce1;
reg survival_path_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln94_fu_197_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_35_cast_fu_209_p1;
wire   [63:0] zext_ln97_fu_220_p1;
reg   [3:0] i_fu_64;
wire   [3:0] add_ln94_fu_203_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_27;
wire   [31:0] tmp_39_fu_225_p10;
wire   [31:0] tmp_40_fu_248_p10;
wire   [3:0] xor_ln97_fu_214_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

TOP_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U1192(
    .din0(x_guess_62),
    .din1(x_guess_51),
    .din2(x_guess_50),
    .din3(x_guess_49),
    .din4(x_guess_48),
    .din5(x_guess_47),
    .din6(x_guess_46),
    .din7(x_guess_52),
    .din8(ap_sig_allocacmp_i_27),
    .dout(tmp_39_fu_225_p10)
);

TOP_mux_84_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
mux_84_32_1_1_U1193(
    .din0(x_guess_63),
    .din1(x_guess_58),
    .din2(x_guess_57),
    .din3(x_guess_56),
    .din4(x_guess_55),
    .din5(x_guess_54),
    .din6(x_guess_53),
    .din7(x_guess_59),
    .din8(ap_sig_allocacmp_i_27),
    .dout(tmp_40_fu_248_p10)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln94_fu_197_p2 == 1'd0)) begin
            i_fu_64 <= add_ln94_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 4'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln94_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_27 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_27 = i_fu_64;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        survival_path_ce0 = 1'b1;
    end else begin
        survival_path_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        survival_path_ce1 = 1'b1;
    end else begin
        survival_path_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln94_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        survival_path_we0 = 1'b1;
    end else begin
        survival_path_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln94_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        survival_path_we1 = 1'b1;
    end else begin
        survival_path_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln94_fu_203_p2 = (ap_sig_allocacmp_i_27 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_35_cast_fu_209_p1 = ap_sig_allocacmp_i_27;

assign icmp_ln94_fu_197_p2 = ((ap_sig_allocacmp_i_27 == 4'd8) ? 1'b1 : 1'b0);

assign survival_path_address0 = zext_ln97_fu_220_p1;

assign survival_path_address1 = i_35_cast_fu_209_p1;

assign survival_path_d0 = tmp_40_fu_248_p10;

assign survival_path_d1 = tmp_39_fu_225_p10;

assign xor_ln97_fu_214_p2 = (ap_sig_allocacmp_i_27 ^ 4'd8);

assign zext_ln97_fu_220_p1 = xor_ln97_fu_214_p2;

endmodule //TOP_KBEST_Pipeline_VITIS_LOOP_94_11
