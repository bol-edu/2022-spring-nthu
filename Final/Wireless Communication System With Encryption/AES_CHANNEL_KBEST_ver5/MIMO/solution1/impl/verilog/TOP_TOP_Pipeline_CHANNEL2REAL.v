// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_TOP_Pipeline_CHANNEL2REAL (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        H_real_spl0_dout,
        H_real_spl0_empty_n,
        H_real_spl0_read,
        H_imag_spl0_dout,
        H_imag_spl0_empty_n,
        H_imag_spl0_read,
        CHANNEL_V_address0,
        CHANNEL_V_ce0,
        CHANNEL_V_we0,
        CHANNEL_V_d0,
        CHANNEL_V_address1,
        CHANNEL_V_ce1,
        CHANNEL_V_we1,
        CHANNEL_V_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] H_real_spl0_dout;
input   H_real_spl0_empty_n;
output   H_real_spl0_read;
input  [15:0] H_imag_spl0_dout;
input   H_imag_spl0_empty_n;
output   H_imag_spl0_read;
output  [5:0] CHANNEL_V_address0;
output   CHANNEL_V_ce0;
output   CHANNEL_V_we0;
output  [15:0] CHANNEL_V_d0;
output  [5:0] CHANNEL_V_address1;
output   CHANNEL_V_ce1;
output   CHANNEL_V_we1;
output  [15:0] CHANNEL_V_d1;

reg ap_idle;
reg H_real_spl0_read;
reg H_imag_spl0_read;
reg[5:0] CHANNEL_V_address0;
reg CHANNEL_V_ce0;
reg CHANNEL_V_we0;
reg[15:0] CHANNEL_V_d0;
reg[5:0] CHANNEL_V_address1;
reg CHANNEL_V_ce1;
reg CHANNEL_V_we1;
reg[15:0] CHANNEL_V_d1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln51_fu_131_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln51_reg_265;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    H_real_spl0_blk_n;
wire    ap_block_pp0_stage1;
reg    H_imag_spl0_blk_n;
reg   [4:0] i_12_reg_258;
wire    ap_block_pp0_stage0_11001;
reg   [15:0] tmp_8_reg_269;
reg    ap_block_pp0_stage1_11001;
wire   [1:0] tmp_44_fu_157_p4;
reg   [1:0] tmp_44_reg_275;
wire   [1:0] trunc_ln54_fu_166_p1;
reg   [1:0] trunc_ln54_reg_280;
wire   [2:0] or_ln55_fu_194_p2;
reg   [2:0] or_ln55_reg_285;
wire   [2:0] or_ln55_1_fu_200_p2;
reg   [2:0] or_ln55_1_reg_290;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln54_fu_189_p1;
wire   [63:0] zext_ln55_fu_214_p1;
wire   [63:0] zext_ln57_fu_227_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln56_fu_240_p1;
reg   [4:0] i_fu_64;
wire   [4:0] i_13_fu_137_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_12;
wire   [15:0] sub_ln712_fu_245_p2;
wire   [5:0] tmp_46_fu_177_p5;
wire   [2:0] trunc_ln5_fu_148_p4;
wire   [2:0] shl_ln_fu_169_p3;
wire   [5:0] tmp_48_fu_206_p3;
wire   [5:0] tmp_47_fu_219_p4;
wire   [5:0] tmp_49_fu_232_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_131_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_64 <= i_13_fu_137_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_64 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_12_reg_258 <= ap_sig_allocacmp_i_12;
        icmp_ln51_reg_265 <= icmp_ln51_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        or_ln55_1_reg_290[2 : 1] <= or_ln55_1_fu_200_p2[2 : 1];
        or_ln55_reg_285[2 : 1] <= or_ln55_fu_194_p2[2 : 1];
        tmp_44_reg_275 <= {{i_12_reg_258[3:2]}};
        tmp_8_reg_269 <= H_imag_spl0_dout;
        trunc_ln54_reg_280 <= trunc_ln54_fu_166_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CHANNEL_V_address0 = zext_ln57_fu_227_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        CHANNEL_V_address0 = zext_ln55_fu_214_p1;
    end else begin
        CHANNEL_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CHANNEL_V_address1 = zext_ln56_fu_240_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        CHANNEL_V_address1 = zext_ln54_fu_189_p1;
    end else begin
        CHANNEL_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        CHANNEL_V_ce0 = 1'b1;
    end else begin
        CHANNEL_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        CHANNEL_V_ce1 = 1'b1;
    end else begin
        CHANNEL_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CHANNEL_V_d0 = tmp_8_reg_269;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        CHANNEL_V_d0 = H_real_spl0_dout;
    end else begin
        CHANNEL_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        CHANNEL_V_d1 = sub_ln712_fu_245_p2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        CHANNEL_V_d1 = H_real_spl0_dout;
    end else begin
        CHANNEL_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        CHANNEL_V_we0 = 1'b1;
    end else begin
        CHANNEL_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        CHANNEL_V_we1 = 1'b1;
    end else begin
        CHANNEL_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        H_imag_spl0_blk_n = H_imag_spl0_empty_n;
    end else begin
        H_imag_spl0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        H_imag_spl0_read = 1'b1;
    end else begin
        H_imag_spl0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        H_real_spl0_blk_n = H_real_spl0_empty_n;
    end else begin
        H_real_spl0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        H_real_spl0_read = 1'b1;
    end else begin
        H_real_spl0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_12 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_12 = i_fu_64;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == H_imag_spl0_empty_n)) | ((icmp_ln51_reg_265 == 1'd0) & (1'b0 == H_real_spl0_empty_n))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == H_imag_spl0_empty_n)) | ((icmp_ln51_reg_265 == 1'd0) & (1'b0 == H_real_spl0_empty_n))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((icmp_ln51_reg_265 == 1'd0) & (1'b0 == H_imag_spl0_empty_n)) | ((icmp_ln51_reg_265 == 1'd0) & (1'b0 == H_real_spl0_empty_n)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_13_fu_137_p2 = (ap_sig_allocacmp_i_12 + 5'd1);

assign icmp_ln51_fu_131_p2 = ((ap_sig_allocacmp_i_12 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln55_1_fu_200_p2 = (shl_ln_fu_169_p3 | 3'd1);

assign or_ln55_fu_194_p2 = (trunc_ln5_fu_148_p4 | 3'd1);

assign shl_ln_fu_169_p3 = {{trunc_ln54_fu_166_p1}, {1'd0}};

assign sub_ln712_fu_245_p2 = (16'd0 - tmp_8_reg_269);

assign tmp_44_fu_157_p4 = {{i_12_reg_258[3:2]}};

assign tmp_46_fu_177_p5 = {{{{tmp_44_fu_157_p4}, {1'd0}}, {trunc_ln54_fu_166_p1}}, {1'd0}};

assign tmp_47_fu_219_p4 = {{{or_ln55_reg_285}, {trunc_ln54_reg_280}}, {1'd0}};

assign tmp_48_fu_206_p3 = {{or_ln55_fu_194_p2}, {or_ln55_1_fu_200_p2}};

assign tmp_49_fu_232_p4 = {{{tmp_44_reg_275}, {1'd0}}, {or_ln55_1_reg_290}};

assign trunc_ln54_fu_166_p1 = i_12_reg_258[1:0];

assign trunc_ln5_fu_148_p4 = {{i_12_reg_258[3:1]}};

assign zext_ln54_fu_189_p1 = tmp_46_fu_177_p5;

assign zext_ln55_fu_214_p1 = tmp_48_fu_206_p3;

assign zext_ln56_fu_240_p1 = tmp_49_fu_232_p4;

assign zext_ln57_fu_227_p1 = tmp_47_fu_219_p4;

always @ (posedge ap_clk) begin
    or_ln55_reg_285[0] <= 1'b1;
    or_ln55_1_reg_290[0] <= 1'b1;
end

endmodule //TOP_TOP_Pipeline_CHANNEL2REAL
