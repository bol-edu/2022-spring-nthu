// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_DeModulation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        KB_out_dout,
        KB_out_empty_n,
        KB_out_read,
        out_data_din,
        out_data_full_n,
        out_data_write
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] KB_out_dout;
input   KB_out_empty_n;
output   KB_out_read;
output  [7:0] out_data_din;
input   out_data_full_n;
output   out_data_write;

reg ap_idle;
reg KB_out_read;
reg out_data_write;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln14_fu_81_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage7;
reg   [0:0] icmp_ln14_reg_287;
reg    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_pp0_stage7_subdone;
reg    out_data_blk_n;
wire    ap_block_pp0_stage0;
reg    KB_out_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] KB_out_read_reg_291;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [15:0] KB_out_read_1_reg_296;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [15:0] KB_out_read_2_reg_301;
reg    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
reg   [15:0] KB_out_read_3_reg_306;
reg    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
reg   [15:0] KB_out_read_4_reg_311;
reg    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
reg   [15:0] KB_out_read_5_reg_316;
reg    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
reg   [15:0] KB_out_read_6_reg_321;
reg    ap_block_pp0_stage7_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [4:0] data_idx_fu_56;
wire   [4:0] data_idx_10_fu_87_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_data_idx_9;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln1547_fu_98_p2;
wire   [0:0] icmp_ln1547_1_fu_103_p2;
wire   [1:0] or_ln_fu_143_p3;
wire   [1:0] zext_ln223_fu_139_p1;
wire   [1:0] select_ln39_fu_151_p3;
wire   [0:0] icmp_ln1547_2_fu_108_p2;
wire   [2:0] or_ln223_1_fu_163_p3;
wire   [2:0] zext_ln223_1_fu_159_p1;
wire   [2:0] select_ln39_1_fu_171_p3;
wire   [0:0] icmp_ln1547_3_fu_113_p2;
wire   [3:0] or_ln223_2_fu_183_p3;
wire   [3:0] zext_ln223_2_fu_179_p1;
wire   [3:0] select_ln39_2_fu_191_p3;
wire   [0:0] icmp_ln1547_4_fu_118_p2;
wire   [4:0] or_ln223_3_fu_203_p3;
wire   [4:0] zext_ln223_3_fu_199_p1;
wire   [4:0] select_ln39_3_fu_211_p3;
wire   [0:0] icmp_ln1547_5_fu_123_p2;
wire   [5:0] or_ln223_4_fu_223_p3;
wire   [5:0] zext_ln223_4_fu_219_p1;
wire   [5:0] select_ln39_4_fu_231_p3;
wire   [0:0] icmp_ln1547_6_fu_128_p2;
wire   [6:0] or_ln223_5_fu_243_p3;
wire   [6:0] zext_ln223_5_fu_239_p1;
wire   [6:0] select_ln39_5_fu_251_p3;
wire   [0:0] icmp_ln1547_7_fu_133_p2;
wire   [7:0] or_ln223_6_fu_263_p3;
wire   [7:0] zext_ln223_6_fu_259_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_237;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

TOP_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_237)) begin
        if ((icmp_ln14_fu_81_p2 == 1'd0)) begin
            data_idx_fu_56 <= data_idx_10_fu_87_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            data_idx_fu_56 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        KB_out_read_1_reg_296 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        KB_out_read_2_reg_301 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        KB_out_read_3_reg_306 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        KB_out_read_4_reg_311 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        KB_out_read_5_reg_316 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        KB_out_read_6_reg_321 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        KB_out_read_reg_291 <= KB_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_287 <= icmp_ln14_fu_81_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        KB_out_blk_n = KB_out_empty_n;
    end else begin
        KB_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        KB_out_read = 1'b1;
    end else begin
        KB_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_81_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_data_idx_9 = 5'd0;
    end else begin
        ap_sig_allocacmp_data_idx_9 = data_idx_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_data_blk_n = out_data_full_n;
    end else begin
        out_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_data_write = 1'b1;
    end else begin
        out_data_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_data_full_n == 1'b0) | (1'b0 == KB_out_empty_n))) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_data_full_n == 1'b0) | (1'b0 == KB_out_empty_n))) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_data_full_n == 1'b0) | (1'b0 == KB_out_empty_n))) | ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_done_reg == 1'b1) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_done_reg == 1'b1) | ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state5_pp0_stage4_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state6_pp0_stage5_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state7_pp0_stage6_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state8_pp0_stage7_iter0 = ((icmp_ln14_reg_287 == 1'd0) & (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((out_data_full_n == 1'b0) | (1'b0 == KB_out_empty_n));
end

always @ (*) begin
    ap_condition_237 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign data_idx_10_fu_87_p2 = (ap_sig_allocacmp_data_idx_9 + 5'd1);

assign icmp_ln14_fu_81_p2 = ((ap_sig_allocacmp_data_idx_9 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln1547_1_fu_103_p2 = (($signed(KB_out_read_1_reg_296) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_2_fu_108_p2 = (($signed(KB_out_read_2_reg_301) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_3_fu_113_p2 = (($signed(KB_out_read_3_reg_306) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_4_fu_118_p2 = (($signed(KB_out_read_4_reg_311) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_5_fu_123_p2 = (($signed(KB_out_read_5_reg_316) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_6_fu_128_p2 = (($signed(KB_out_read_6_reg_321) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_7_fu_133_p2 = (($signed(KB_out_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1547_fu_98_p2 = (($signed(KB_out_read_reg_291) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign or_ln223_1_fu_163_p3 = {{1'd1}, {select_ln39_fu_151_p3}};

assign or_ln223_2_fu_183_p3 = {{1'd1}, {select_ln39_1_fu_171_p3}};

assign or_ln223_3_fu_203_p3 = {{1'd1}, {select_ln39_2_fu_191_p3}};

assign or_ln223_4_fu_223_p3 = {{1'd1}, {select_ln39_3_fu_211_p3}};

assign or_ln223_5_fu_243_p3 = {{1'd1}, {select_ln39_4_fu_231_p3}};

assign or_ln223_6_fu_263_p3 = {{1'd1}, {select_ln39_5_fu_251_p3}};

assign or_ln_fu_143_p3 = {{1'd1}, {icmp_ln1547_fu_98_p2}};

assign out_data_din = ((icmp_ln1547_7_fu_133_p2[0:0] == 1'b1) ? or_ln223_6_fu_263_p3 : zext_ln223_6_fu_259_p1);

assign select_ln39_1_fu_171_p3 = ((icmp_ln1547_2_fu_108_p2[0:0] == 1'b1) ? or_ln223_1_fu_163_p3 : zext_ln223_1_fu_159_p1);

assign select_ln39_2_fu_191_p3 = ((icmp_ln1547_3_fu_113_p2[0:0] == 1'b1) ? or_ln223_2_fu_183_p3 : zext_ln223_2_fu_179_p1);

assign select_ln39_3_fu_211_p3 = ((icmp_ln1547_4_fu_118_p2[0:0] == 1'b1) ? or_ln223_3_fu_203_p3 : zext_ln223_3_fu_199_p1);

assign select_ln39_4_fu_231_p3 = ((icmp_ln1547_5_fu_123_p2[0:0] == 1'b1) ? or_ln223_4_fu_223_p3 : zext_ln223_4_fu_219_p1);

assign select_ln39_5_fu_251_p3 = ((icmp_ln1547_6_fu_128_p2[0:0] == 1'b1) ? or_ln223_5_fu_243_p3 : zext_ln223_5_fu_239_p1);

assign select_ln39_fu_151_p3 = ((icmp_ln1547_1_fu_103_p2[0:0] == 1'b1) ? or_ln_fu_143_p3 : zext_ln223_fu_139_p1);

assign zext_ln223_1_fu_159_p1 = select_ln39_fu_151_p3;

assign zext_ln223_2_fu_179_p1 = select_ln39_1_fu_171_p3;

assign zext_ln223_3_fu_199_p1 = select_ln39_2_fu_191_p3;

assign zext_ln223_4_fu_219_p1 = select_ln39_3_fu_211_p3;

assign zext_ln223_5_fu_239_p1 = select_ln39_4_fu_231_p3;

assign zext_ln223_6_fu_259_p1 = select_ln39_5_fu_251_p3;

assign zext_ln223_fu_139_p1 = icmp_ln1547_fu_98_p2;

endmodule //TOP_DeModulation
