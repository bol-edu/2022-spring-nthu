// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_aes_return_Pipeline_aes_return_label12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pArray_address0,
        pArray_ce0,
        pArray_we0,
        pArray_d0,
        pArray_q0,
        pArray_address1,
        pArray_ce1,
        pArray_we1,
        pArray_d1,
        pArray_q1,
        w_address0,
        w_ce0,
        w_q0,
        w_address1,
        w_ce1,
        w_q1
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] pArray_address0;
output   pArray_ce0;
output   pArray_we0;
output  [31:0] pArray_d0;
input  [31:0] pArray_q0;
output  [3:0] pArray_address1;
output   pArray_ce1;
output   pArray_we1;
output  [31:0] pArray_d1;
input  [31:0] pArray_q1;
output  [5:0] w_address0;
output   w_ce0;
input  [31:0] w_q0;
output  [5:0] w_address1;
output   w_ce1;
input  [31:0] w_q1;

reg ap_idle;
reg[3:0] pArray_address0;
reg pArray_ce0;
reg pArray_we0;
reg[31:0] pArray_d0;
reg[3:0] pArray_address1;
reg pArray_ce1;
reg pArray_we1;
reg[31:0] pArray_d1;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln324_fu_422_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state35;
wire    ap_block_state35_pp0_stage34_iter0;
reg   [7:0] S_address0;
reg    S_ce0;
wire   [7:0] S_q0;
wire   [31:0] grp_GFMul_fu_342_ap_return;
reg   [31:0] reg_378;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_CS_fsm_state15;
wire    ap_block_state15_pp0_stage14_iter0;
wire   [31:0] grp_GFMul_fu_349_ap_return;
reg   [31:0] reg_382;
wire   [31:0] grp_GFMul_fu_356_ap_return;
reg   [31:0] reg_386;
reg   [31:0] reg_390;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_CS_fsm_state16;
wire    ap_block_state16_pp0_stage15_iter0;
reg   [31:0] reg_394;
reg   [31:0] reg_398;
reg   [31:0] reg_402;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_CS_fsm_state17;
wire    ap_block_state17_pp0_stage16_iter0;
reg   [31:0] reg_406;
reg   [31:0] reg_410;
reg   [3:0] i_3_reg_983;
wire   [3:0] pArray_addr_reg_988;
wire   [3:0] pArray_addr_15_reg_1067;
wire   [7:0] trunc_ln58_fu_439_p1;
reg   [7:0] trunc_ln58_reg_1075;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [7:0] trunc_ln58_5_fu_456_p1;
reg   [7:0] trunc_ln58_5_reg_1090;
wire   [7:0] trunc_ln58_10_fu_460_p1;
reg   [7:0] trunc_ln58_10_reg_1095;
wire   [7:0] trunc_ln58_3_fu_478_p1;
reg   [7:0] trunc_ln58_3_reg_1100;
wire   [7:0] trunc_ln58_14_fu_486_p1;
reg   [7:0] trunc_ln58_14_reg_1110;
wire   [7:0] trunc_ln58_4_fu_490_p1;
reg   [7:0] trunc_ln58_4_reg_1115;
wire   [7:0] trunc_ln58_9_fu_498_p1;
reg   [7:0] trunc_ln58_9_reg_1125;
wire   [7:0] trunc_ln58_2_fu_509_p1;
reg   [7:0] trunc_ln58_2_reg_1130;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
wire   [7:0] trunc_ln58_13_fu_520_p1;
reg   [7:0] trunc_ln58_13_reg_1135;
wire   [31:0] xor_ln300_1_fu_540_p2;
reg   [31:0] xor_ln300_1_reg_1145;
wire   [31:0] xor_ln300_9_fu_558_p2;
reg   [31:0] xor_ln300_9_reg_1150;
wire   [7:0] trunc_ln58_8_fu_606_p1;
reg   [7:0] trunc_ln58_8_reg_1160;
wire   [7:0] trunc_ln58_12_fu_610_p1;
reg   [7:0] trunc_ln58_12_reg_1165;
wire   [7:0] trunc_ln58_1_fu_621_p1;
reg   [7:0] trunc_ln58_1_reg_1170;
wire   [7:0] trunc_ln58_7_fu_632_p1;
reg   [7:0] trunc_ln58_7_reg_1175;
wire   [7:0] trunc_ln58_6_fu_644_p1;
reg   [7:0] trunc_ln58_6_reg_1190;
wire   [7:0] trunc_ln58_11_fu_655_p1;
reg   [7:0] trunc_ln58_11_reg_1195;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [31:0] xor_ln300_15_fu_701_p2;
reg   [31:0] xor_ln300_15_reg_1205;
wire   [31:0] xor_ln300_31_fu_738_p2;
reg   [31:0] xor_ln300_31_reg_1210;
wire    ap_CS_fsm_state14;
wire    ap_block_state14_pp0_stage13_iter0;
wire   [31:0] xor_ln300_13_fu_819_p2;
reg   [31:0] xor_ln300_13_reg_1235;
wire   [31:0] xor_ln300_29_fu_856_p2;
reg   [31:0] xor_ln300_29_reg_1240;
wire   [31:0] xor_ln300_19_fu_952_p2;
reg   [31:0] xor_ln300_19_reg_1260;
wire    ap_CS_fsm_state18;
wire    ap_block_state18_pp0_stage17_iter0;
wire   [31:0] xor_ln300_27_fu_970_p2;
reg   [31:0] xor_ln300_27_reg_1265;
wire    grp_GFMul_fu_342_ap_ready;
reg   [3:0] grp_GFMul_fu_342_n;
reg   [31:0] grp_GFMul_fu_342_s;
wire    grp_GFMul_fu_349_ap_ready;
reg   [3:0] grp_GFMul_fu_349_n;
reg   [31:0] grp_GFMul_fu_349_s;
wire    grp_GFMul_fu_356_ap_ready;
reg   [3:0] grp_GFMul_fu_356_n;
reg   [31:0] grp_GFMul_fu_356_s;
wire    grp_addRoundKey_fu_369_ap_start;
wire    grp_addRoundKey_fu_369_ap_done;
wire    grp_addRoundKey_fu_369_ap_idle;
wire    grp_addRoundKey_fu_369_ap_ready;
wire   [3:0] grp_addRoundKey_fu_369_array_r_address0;
wire    grp_addRoundKey_fu_369_array_r_ce0;
wire    grp_addRoundKey_fu_369_array_r_we0;
wire   [31:0] grp_addRoundKey_fu_369_array_r_d0;
wire   [3:0] grp_addRoundKey_fu_369_array_r_address1;
wire    grp_addRoundKey_fu_369_array_r_ce1;
wire    grp_addRoundKey_fu_369_array_r_we1;
wire   [31:0] grp_addRoundKey_fu_369_array_r_d1;
wire   [5:0] grp_addRoundKey_fu_369_w_address0;
wire    grp_addRoundKey_fu_369_w_ce0;
wire   [5:0] grp_addRoundKey_fu_369_w_address1;
wire    grp_addRoundKey_fu_369_w_ce1;
wire   [31:0] zext_ln193_15_fu_464_p1;
wire   [31:0] zext_ln193_fu_471_p1;
wire   [31:0] zext_ln193_10_fu_502_p1;
wire   [31:0] zext_ln193_5_fu_513_p1;
wire   [31:0] zext_ln193_14_fu_614_p1;
wire   [31:0] zext_ln193_3_fu_625_p1;
wire   [31:0] zext_ln193_9_fu_648_p1;
wire   [31:0] zext_ln193_4_fu_659_p1;
wire   [31:0] zext_ln193_13_fu_748_p1;
wire   [31:0] zext_ln193_2_fu_755_p1;
wire   [31:0] zext_ln193_8_fu_770_p1;
wire   [31:0] zext_ln193_7_fu_781_p1;
wire   [31:0] zext_ln193_1_fu_862_p1;
wire   [31:0] zext_ln193_6_fu_873_p1;
wire   [31:0] zext_ln193_11_fu_884_p1;
wire   [31:0] zext_ln193_12_fu_895_p1;
reg    grp_addRoundKey_fu_369_ap_start_reg;
wire    ap_CS_fsm_state19;
reg   [34:0] ap_NS_fsm;
wire    ap_NS_fsm_state20;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [63:0] zext_ln58_18_fu_447_p1;
wire   [63:0] zext_ln58_fu_452_p1;
wire   [63:0] zext_ln58_13_fu_482_p1;
wire   [63:0] zext_ln58_8_fu_494_p1;
wire   [63:0] zext_ln58_17_fu_524_p1;
wire   [63:0] zext_ln58_6_fu_602_p1;
wire   [63:0] zext_ln58_12_fu_636_p1;
wire   [63:0] zext_ln58_7_fu_640_p1;
wire   [63:0] zext_ln58_16_fu_666_p1;
wire   [63:0] zext_ln58_5_fu_744_p1;
wire   [63:0] zext_ln58_11_fu_762_p1;
wire   [63:0] zext_ln58_10_fu_766_p1;
wire   [63:0] zext_ln58_4_fu_777_p1;
wire   [63:0] zext_ln58_9_fu_869_p1;
wire   [63:0] zext_ln58_14_fu_880_p1;
wire   [63:0] zext_ln58_15_fu_891_p1;
reg   [3:0] i_fu_66;
wire   [3:0] i_4_fu_428_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_3;
wire   [31:0] xor_ln300_17_fu_576_p2;
wire   [31:0] xor_ln300_25_fu_595_p2;
wire   [31:0] xor_ln300_7_fu_682_p2;
wire   [31:0] xor_ln300_23_fu_719_p2;
wire   [31:0] xor_ln300_5_fu_800_p2;
wire   [31:0] xor_ln300_21_fu_837_p2;
wire   [31:0] xor_ln300_3_fu_914_p2;
wire   [31:0] xor_ln300_11_fu_933_p2;
wire    ap_block_state19_pp0_stage18_iter0;
wire   [7:0] trunc_ln58_15_fu_443_p1;
wire   [31:0] xor_ln300_2_fu_534_p2;
wire   [31:0] xor_ln300_fu_528_p2;
wire   [31:0] xor_ln300_18_fu_552_p2;
wire   [31:0] xor_ln300_16_fu_546_p2;
wire   [31:0] xor_ln300_33_fu_570_p2;
wire   [31:0] xor_ln300_32_fu_564_p2;
wire   [31:0] xor_ln300_41_fu_589_p2;
wire   [31:0] xor_ln300_40_fu_583_p2;
wire   [31:0] xor_ln300_14_fu_676_p2;
wire   [31:0] xor_ln300_12_fu_670_p2;
wire   [31:0] xor_ln300_30_fu_695_p2;
wire   [31:0] xor_ln300_28_fu_689_p2;
wire   [31:0] xor_ln300_39_fu_713_p2;
wire   [31:0] xor_ln300_38_fu_707_p2;
wire   [31:0] xor_ln300_47_fu_732_p2;
wire   [31:0] xor_ln300_46_fu_726_p2;
wire   [31:0] xor_ln300_10_fu_794_p2;
wire   [31:0] xor_ln300_8_fu_788_p2;
wire   [31:0] xor_ln300_26_fu_813_p2;
wire   [31:0] xor_ln300_24_fu_807_p2;
wire   [31:0] xor_ln300_37_fu_831_p2;
wire   [31:0] xor_ln300_36_fu_825_p2;
wire   [31:0] xor_ln300_45_fu_850_p2;
wire   [31:0] xor_ln300_44_fu_844_p2;
wire   [31:0] xor_ln300_6_fu_908_p2;
wire   [31:0] xor_ln300_4_fu_902_p2;
wire   [31:0] xor_ln300_22_fu_927_p2;
wire   [31:0] xor_ln300_20_fu_921_p2;
wire   [31:0] xor_ln300_35_fu_946_p2;
wire   [31:0] xor_ln300_34_fu_940_p2;
wire   [31:0] xor_ln300_43_fu_964_p2;
wire   [31:0] xor_ln300_42_fu_958_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_ST_fsm_state20_blk;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_ST_fsm_state21_blk;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_ST_fsm_state22_blk;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_ST_fsm_state23_blk;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_ST_fsm_state24_blk;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_ST_fsm_state25_blk;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_ST_fsm_state26_blk;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_ST_fsm_state27_blk;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_ST_fsm_state28_blk;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_ST_fsm_state29_blk;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_ST_fsm_state30_blk;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_ST_fsm_state31_blk;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_ST_fsm_state32_blk;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_ST_fsm_state33_blk;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 grp_addRoundKey_fu_369_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_extendKey_Pipeline_extendKey_label0_S_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
S_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(S_address0),
    .ce0(S_ce0),
    .q0(S_q0)
);

TOP_GFMul grp_GFMul_fu_342(
    .ap_ready(grp_GFMul_fu_342_ap_ready),
    .n(grp_GFMul_fu_342_n),
    .s(grp_GFMul_fu_342_s),
    .ap_return(grp_GFMul_fu_342_ap_return)
);

TOP_GFMul grp_GFMul_fu_349(
    .ap_ready(grp_GFMul_fu_349_ap_ready),
    .n(grp_GFMul_fu_349_n),
    .s(grp_GFMul_fu_349_s),
    .ap_return(grp_GFMul_fu_349_ap_return)
);

TOP_GFMul grp_GFMul_fu_356(
    .ap_ready(grp_GFMul_fu_356_ap_ready),
    .n(grp_GFMul_fu_356_n),
    .s(grp_GFMul_fu_356_s),
    .ap_return(grp_GFMul_fu_356_ap_return)
);

TOP_addRoundKey grp_addRoundKey_fu_369(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_addRoundKey_fu_369_ap_start),
    .ap_done(grp_addRoundKey_fu_369_ap_done),
    .ap_idle(grp_addRoundKey_fu_369_ap_idle),
    .ap_ready(grp_addRoundKey_fu_369_ap_ready),
    .array_r_address0(grp_addRoundKey_fu_369_array_r_address0),
    .array_r_ce0(grp_addRoundKey_fu_369_array_r_ce0),
    .array_r_we0(grp_addRoundKey_fu_369_array_r_we0),
    .array_r_d0(grp_addRoundKey_fu_369_array_r_d0),
    .array_r_q0(pArray_q0),
    .array_r_address1(grp_addRoundKey_fu_369_array_r_address1),
    .array_r_ce1(grp_addRoundKey_fu_369_array_r_ce1),
    .array_r_we1(grp_addRoundKey_fu_369_array_r_we1),
    .array_r_d1(grp_addRoundKey_fu_369_array_r_d1),
    .array_r_q1(pArray_q1),
    .round(i_3_reg_983),
    .w_address0(grp_addRoundKey_fu_369_w_address0),
    .w_ce0(grp_addRoundKey_fu_369_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_addRoundKey_fu_369_w_address1),
    .w_ce1(grp_addRoundKey_fu_369_w_ce1),
    .w_q1(w_q1),
    .ap_ce(1'b1)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_addRoundKey_fu_369_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state20) & (1'b1 == ap_CS_fsm_state19))) begin
            grp_addRoundKey_fu_369_ap_start_reg <= 1'b1;
        end else if ((grp_addRoundKey_fu_369_ap_ready == 1'b1)) begin
            grp_addRoundKey_fu_369_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln324_fu_422_p2 == 1'd0)) begin
            i_fu_66 <= i_4_fu_428_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_66 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_3_reg_983 <= ap_sig_allocacmp_i_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_378 <= grp_GFMul_fu_342_ap_return;
        reg_382 <= grp_GFMul_fu_349_ap_return;
        reg_386 <= grp_GFMul_fu_356_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_390 <= grp_GFMul_fu_342_ap_return;
        reg_394 <= grp_GFMul_fu_349_ap_return;
        reg_398 <= grp_GFMul_fu_356_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_402 <= grp_GFMul_fu_342_ap_return;
        reg_406 <= grp_GFMul_fu_349_ap_return;
        reg_410 <= grp_GFMul_fu_356_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln58_10_reg_1095 <= trunc_ln58_10_fu_460_p1;
        trunc_ln58_5_reg_1090 <= trunc_ln58_5_fu_456_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln58_11_reg_1195 <= trunc_ln58_11_fu_655_p1;
        trunc_ln58_6_reg_1190 <= trunc_ln58_6_fu_644_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln58_12_reg_1165 <= trunc_ln58_12_fu_610_p1;
        trunc_ln58_8_reg_1160 <= trunc_ln58_8_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln58_13_reg_1135 <= trunc_ln58_13_fu_520_p1;
        trunc_ln58_2_reg_1130 <= trunc_ln58_2_fu_509_p1;
        xor_ln300_1_reg_1145 <= xor_ln300_1_fu_540_p2;
        xor_ln300_9_reg_1150 <= xor_ln300_9_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        trunc_ln58_14_reg_1110 <= trunc_ln58_14_fu_486_p1;
        trunc_ln58_3_reg_1100 <= trunc_ln58_3_fu_478_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln58_1_reg_1170 <= trunc_ln58_1_fu_621_p1;
        trunc_ln58_7_reg_1175 <= trunc_ln58_7_fu_632_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln58_4_reg_1115 <= trunc_ln58_4_fu_490_p1;
        trunc_ln58_9_reg_1125 <= trunc_ln58_9_fu_498_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln58_reg_1075 <= trunc_ln58_fu_439_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        xor_ln300_13_reg_1235 <= xor_ln300_13_fu_819_p2;
        xor_ln300_29_reg_1240 <= xor_ln300_29_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        xor_ln300_15_reg_1205 <= xor_ln300_15_fu_701_p2;
        xor_ln300_31_reg_1210 <= xor_ln300_31_fu_738_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        xor_ln300_19_reg_1260 <= xor_ln300_19_fu_952_p2;
        xor_ln300_27_reg_1265 <= xor_ln300_27_fu_970_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        S_address0 = zext_ln58_15_fu_891_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        S_address0 = zext_ln58_14_fu_880_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        S_address0 = zext_ln58_9_fu_869_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        S_address0 = zext_ln58_4_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        S_address0 = zext_ln58_10_fu_766_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        S_address0 = zext_ln58_11_fu_762_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        S_address0 = zext_ln58_5_fu_744_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        S_address0 = zext_ln58_16_fu_666_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        S_address0 = zext_ln58_7_fu_640_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        S_address0 = zext_ln58_12_fu_636_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        S_address0 = zext_ln58_6_fu_602_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        S_address0 = zext_ln58_17_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        S_address0 = zext_ln58_8_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        S_address0 = zext_ln58_13_fu_482_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        S_address0 = zext_ln58_fu_452_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        S_address0 = zext_ln58_18_fu_447_p1;
    end else begin
        S_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        S_ce0 = 1'b1;
    end else begin
        S_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln324_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 4'd1;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_66;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_GFMul_fu_342_n = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_GFMul_fu_342_n = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_GFMul_fu_342_n = 4'd1;
    end else begin
        grp_GFMul_fu_342_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_GFMul_fu_342_s = zext_ln193_12_fu_895_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_GFMul_fu_342_s = zext_ln193_11_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_GFMul_fu_342_s = zext_ln193_6_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_GFMul_fu_342_s = zext_ln193_1_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_GFMul_fu_342_s = zext_ln193_7_fu_781_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_GFMul_fu_342_s = zext_ln193_8_fu_770_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_GFMul_fu_342_s = zext_ln193_2_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_GFMul_fu_342_s = zext_ln193_13_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_GFMul_fu_342_s = zext_ln193_4_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_GFMul_fu_342_s = zext_ln193_9_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_GFMul_fu_342_s = zext_ln193_3_fu_625_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_GFMul_fu_342_s = zext_ln193_14_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_GFMul_fu_342_s = zext_ln193_5_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_GFMul_fu_342_s = zext_ln193_10_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_GFMul_fu_342_s = zext_ln193_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_GFMul_fu_342_s = zext_ln193_15_fu_464_p1;
    end else begin
        grp_GFMul_fu_342_s = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_GFMul_fu_349_n = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_GFMul_fu_349_n = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_GFMul_fu_349_n = 4'd3;
    end else begin
        grp_GFMul_fu_349_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_GFMul_fu_349_s = zext_ln193_12_fu_895_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_GFMul_fu_349_s = zext_ln193_11_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_GFMul_fu_349_s = zext_ln193_6_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_GFMul_fu_349_s = zext_ln193_1_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_GFMul_fu_349_s = zext_ln193_7_fu_781_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_GFMul_fu_349_s = zext_ln193_8_fu_770_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_GFMul_fu_349_s = zext_ln193_2_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_GFMul_fu_349_s = zext_ln193_13_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_GFMul_fu_349_s = zext_ln193_4_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_GFMul_fu_349_s = zext_ln193_9_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_GFMul_fu_349_s = zext_ln193_3_fu_625_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_GFMul_fu_349_s = zext_ln193_14_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_GFMul_fu_349_s = zext_ln193_5_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_GFMul_fu_349_s = zext_ln193_10_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_GFMul_fu_349_s = zext_ln193_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_GFMul_fu_349_s = zext_ln193_15_fu_464_p1;
    end else begin
        grp_GFMul_fu_349_s = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_GFMul_fu_356_n = 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_GFMul_fu_356_n = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_GFMul_fu_356_n = 4'd2;
    end else begin
        grp_GFMul_fu_356_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_GFMul_fu_356_s = zext_ln193_12_fu_895_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_GFMul_fu_356_s = zext_ln193_11_fu_884_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_GFMul_fu_356_s = zext_ln193_6_fu_873_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_GFMul_fu_356_s = zext_ln193_1_fu_862_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_GFMul_fu_356_s = zext_ln193_7_fu_781_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_GFMul_fu_356_s = zext_ln193_8_fu_770_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_GFMul_fu_356_s = zext_ln193_2_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_GFMul_fu_356_s = zext_ln193_13_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_GFMul_fu_356_s = zext_ln193_4_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_GFMul_fu_356_s = zext_ln193_9_fu_648_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_GFMul_fu_356_s = zext_ln193_3_fu_625_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_GFMul_fu_356_s = zext_ln193_14_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_GFMul_fu_356_s = zext_ln193_5_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_GFMul_fu_356_s = zext_ln193_10_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_GFMul_fu_356_s = zext_ln193_fu_471_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_GFMul_fu_356_s = zext_ln193_15_fu_464_p1;
    end else begin
        grp_GFMul_fu_356_s = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        pArray_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pArray_address0 = pArray_addr_reg_988;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pArray_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        pArray_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        pArray_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pArray_address0 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state5))) begin
        pArray_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pArray_address0 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state3))) begin
        pArray_address0 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state2))) begin
        pArray_address0 = 64'd10;
    end else if (((icmp_ln324_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pArray_address0 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_address0 = grp_addRoundKey_fu_369_array_r_address0;
    end else begin
        pArray_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        pArray_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pArray_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pArray_address1 = pArray_addr_15_reg_1067;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state15))) begin
        pArray_address1 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state7))) begin
        pArray_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pArray_address1 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state5))) begin
        pArray_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        pArray_address1 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3))) begin
        pArray_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        pArray_address1 = 64'd5;
    end else if (((icmp_ln324_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        pArray_address1 = 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_address1 = grp_addRoundKey_fu_369_array_r_address1;
    end else begin
        pArray_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((ap_start_int == 1'b1) & (icmp_ln324_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pArray_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_ce0 = grp_addRoundKey_fu_369_array_r_ce0;
    end else begin
        pArray_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((ap_start_int == 1'b1) & (icmp_ln324_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        pArray_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_ce1 = grp_addRoundKey_fu_369_array_r_ce1;
    end else begin
        pArray_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        pArray_d0 = xor_ln300_27_reg_1265;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        pArray_d0 = xor_ln300_11_fu_933_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        pArray_d0 = xor_ln300_29_reg_1240;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        pArray_d0 = xor_ln300_21_fu_837_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pArray_d0 = xor_ln300_31_reg_1210;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pArray_d0 = xor_ln300_23_fu_719_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pArray_d0 = xor_ln300_9_reg_1150;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pArray_d0 = xor_ln300_25_fu_595_p2;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_d0 = grp_addRoundKey_fu_369_array_r_d0;
    end else begin
        pArray_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        pArray_d1 = xor_ln300_19_reg_1260;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        pArray_d1 = xor_ln300_3_fu_914_p2;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        pArray_d1 = xor_ln300_13_reg_1235;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        pArray_d1 = xor_ln300_5_fu_800_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        pArray_d1 = xor_ln300_15_reg_1205;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        pArray_d1 = xor_ln300_7_fu_682_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        pArray_d1 = xor_ln300_1_reg_1145;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        pArray_d1 = xor_ln300_17_fu_576_p2;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_d1 = grp_addRoundKey_fu_369_array_r_d1;
    end else begin
        pArray_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        pArray_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_we0 = grp_addRoundKey_fu_369_array_r_we0;
    end else begin
        pArray_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11))) begin
        pArray_we1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20))) begin
        pArray_we1 = grp_addRoundKey_fu_369_array_r_we1;
    end else begin
        pArray_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln324_fu_422_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state20 = ap_NS_fsm[32'd19];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_addRoundKey_fu_369_ap_start = grp_addRoundKey_fu_369_ap_start_reg;

assign i_4_fu_428_p2 = (ap_sig_allocacmp_i_3 + 4'd1);

assign icmp_ln324_fu_422_p2 = ((ap_sig_allocacmp_i_3 == 4'd10) ? 1'b1 : 1'b0);

assign pArray_addr_15_reg_1067 = 64'd0;

assign pArray_addr_reg_988 = 64'd15;

assign trunc_ln58_10_fu_460_p1 = pArray_q0[7:0];

assign trunc_ln58_11_fu_655_p1 = pArray_q0[7:0];

assign trunc_ln58_12_fu_610_p1 = pArray_q0[7:0];

assign trunc_ln58_13_fu_520_p1 = pArray_q0[7:0];

assign trunc_ln58_14_fu_486_p1 = pArray_q0[7:0];

assign trunc_ln58_15_fu_443_p1 = pArray_q0[7:0];

assign trunc_ln58_1_fu_621_p1 = pArray_q1[7:0];

assign trunc_ln58_2_fu_509_p1 = pArray_q1[7:0];

assign trunc_ln58_3_fu_478_p1 = pArray_q1[7:0];

assign trunc_ln58_4_fu_490_p1 = pArray_q1[7:0];

assign trunc_ln58_5_fu_456_p1 = pArray_q1[7:0];

assign trunc_ln58_6_fu_644_p1 = pArray_q1[7:0];

assign trunc_ln58_7_fu_632_p1 = pArray_q0[7:0];

assign trunc_ln58_8_fu_606_p1 = pArray_q1[7:0];

assign trunc_ln58_9_fu_498_p1 = pArray_q0[7:0];

assign trunc_ln58_fu_439_p1 = pArray_q1[7:0];

assign w_address0 = grp_addRoundKey_fu_369_w_address0;

assign w_address1 = grp_addRoundKey_fu_369_w_address1;

assign w_ce0 = grp_addRoundKey_fu_369_w_ce0;

assign w_ce1 = grp_addRoundKey_fu_369_w_ce1;

assign xor_ln300_10_fu_794_p2 = (reg_402 ^ reg_378);

assign xor_ln300_11_fu_933_p2 = (xor_ln300_22_fu_927_p2 ^ xor_ln300_20_fu_921_p2);

assign xor_ln300_12_fu_670_p2 = (reg_390 ^ grp_GFMul_fu_342_ap_return);

assign xor_ln300_13_fu_819_p2 = (xor_ln300_26_fu_813_p2 ^ xor_ln300_24_fu_807_p2);

assign xor_ln300_14_fu_676_p2 = (reg_402 ^ reg_378);

assign xor_ln300_15_fu_701_p2 = (xor_ln300_30_fu_695_p2 ^ xor_ln300_28_fu_689_p2);

assign xor_ln300_16_fu_546_p2 = (reg_394 ^ grp_GFMul_fu_349_ap_return);

assign xor_ln300_17_fu_576_p2 = (xor_ln300_33_fu_570_p2 ^ xor_ln300_32_fu_564_p2);

assign xor_ln300_18_fu_552_p2 = (reg_406 ^ reg_378);

assign xor_ln300_19_fu_952_p2 = (xor_ln300_35_fu_946_p2 ^ xor_ln300_34_fu_940_p2);

assign xor_ln300_1_fu_540_p2 = (xor_ln300_fu_528_p2 ^ xor_ln300_2_fu_534_p2);

assign xor_ln300_20_fu_921_p2 = (reg_394 ^ reg_382);

assign xor_ln300_21_fu_837_p2 = (xor_ln300_37_fu_831_p2 ^ xor_ln300_36_fu_825_p2);

assign xor_ln300_22_fu_927_p2 = (reg_406 ^ grp_GFMul_fu_342_ap_return);

assign xor_ln300_23_fu_719_p2 = (xor_ln300_39_fu_713_p2 ^ xor_ln300_38_fu_707_p2);

assign xor_ln300_24_fu_807_p2 = (reg_394 ^ grp_GFMul_fu_349_ap_return);

assign xor_ln300_25_fu_595_p2 = (xor_ln300_41_fu_589_p2 ^ xor_ln300_40_fu_583_p2);

assign xor_ln300_26_fu_813_p2 = (reg_406 ^ reg_378);

assign xor_ln300_27_fu_970_p2 = (xor_ln300_43_fu_964_p2 ^ xor_ln300_42_fu_958_p2);

assign xor_ln300_28_fu_689_p2 = (reg_394 ^ grp_GFMul_fu_349_ap_return);

assign xor_ln300_29_fu_856_p2 = (xor_ln300_45_fu_850_p2 ^ xor_ln300_44_fu_844_p2);

assign xor_ln300_2_fu_534_p2 = (reg_402 ^ reg_378);

assign xor_ln300_30_fu_695_p2 = (reg_406 ^ reg_378);

assign xor_ln300_31_fu_738_p2 = (xor_ln300_47_fu_732_p2 ^ xor_ln300_46_fu_726_p2);

assign xor_ln300_32_fu_564_p2 = (reg_394 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_33_fu_570_p2 = (reg_410 ^ reg_382);

assign xor_ln300_34_fu_940_p2 = (reg_398 ^ reg_382);

assign xor_ln300_35_fu_946_p2 = (reg_410 ^ grp_GFMul_fu_349_ap_return);

assign xor_ln300_36_fu_825_p2 = (reg_394 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_37_fu_831_p2 = (reg_410 ^ reg_382);

assign xor_ln300_38_fu_707_p2 = (reg_394 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_39_fu_713_p2 = (reg_410 ^ reg_382);

assign xor_ln300_3_fu_914_p2 = (xor_ln300_6_fu_908_p2 ^ xor_ln300_4_fu_902_p2);

assign xor_ln300_40_fu_583_p2 = (reg_398 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_41_fu_589_p2 = (reg_402 ^ reg_386);

assign xor_ln300_42_fu_958_p2 = (reg_398 ^ reg_386);

assign xor_ln300_43_fu_964_p2 = (reg_402 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_44_fu_844_p2 = (reg_398 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_45_fu_850_p2 = (reg_402 ^ reg_386);

assign xor_ln300_46_fu_726_p2 = (reg_398 ^ grp_GFMul_fu_356_ap_return);

assign xor_ln300_47_fu_732_p2 = (reg_402 ^ reg_386);

assign xor_ln300_4_fu_902_p2 = (reg_390 ^ reg_378);

assign xor_ln300_5_fu_800_p2 = (xor_ln300_8_fu_788_p2 ^ xor_ln300_10_fu_794_p2);

assign xor_ln300_6_fu_908_p2 = (reg_402 ^ grp_GFMul_fu_342_ap_return);

assign xor_ln300_7_fu_682_p2 = (xor_ln300_14_fu_676_p2 ^ xor_ln300_12_fu_670_p2);

assign xor_ln300_8_fu_788_p2 = (reg_390 ^ grp_GFMul_fu_342_ap_return);

assign xor_ln300_9_fu_558_p2 = (xor_ln300_18_fu_552_p2 ^ xor_ln300_16_fu_546_p2);

assign xor_ln300_fu_528_p2 = (reg_390 ^ grp_GFMul_fu_342_ap_return);

assign zext_ln193_10_fu_502_p1 = S_q0;

assign zext_ln193_11_fu_884_p1 = S_q0;

assign zext_ln193_12_fu_895_p1 = S_q0;

assign zext_ln193_13_fu_748_p1 = S_q0;

assign zext_ln193_14_fu_614_p1 = S_q0;

assign zext_ln193_15_fu_464_p1 = S_q0;

assign zext_ln193_1_fu_862_p1 = S_q0;

assign zext_ln193_2_fu_755_p1 = S_q0;

assign zext_ln193_3_fu_625_p1 = S_q0;

assign zext_ln193_4_fu_659_p1 = S_q0;

assign zext_ln193_5_fu_513_p1 = S_q0;

assign zext_ln193_6_fu_873_p1 = S_q0;

assign zext_ln193_7_fu_781_p1 = S_q0;

assign zext_ln193_8_fu_770_p1 = S_q0;

assign zext_ln193_9_fu_648_p1 = S_q0;

assign zext_ln193_fu_471_p1 = S_q0;

assign zext_ln58_10_fu_766_p1 = trunc_ln58_7_reg_1175;

assign zext_ln58_11_fu_762_p1 = trunc_ln58_8_reg_1160;

assign zext_ln58_12_fu_636_p1 = trunc_ln58_9_reg_1125;

assign zext_ln58_13_fu_482_p1 = trunc_ln58_10_reg_1095;

assign zext_ln58_14_fu_880_p1 = trunc_ln58_11_reg_1195;

assign zext_ln58_15_fu_891_p1 = trunc_ln58_12_reg_1165;

assign zext_ln58_16_fu_666_p1 = trunc_ln58_13_reg_1135;

assign zext_ln58_17_fu_524_p1 = trunc_ln58_14_reg_1110;

assign zext_ln58_18_fu_447_p1 = trunc_ln58_15_fu_443_p1;

assign zext_ln58_4_fu_777_p1 = trunc_ln58_1_reg_1170;

assign zext_ln58_5_fu_744_p1 = trunc_ln58_2_reg_1130;

assign zext_ln58_6_fu_602_p1 = trunc_ln58_3_reg_1100;

assign zext_ln58_7_fu_640_p1 = trunc_ln58_4_reg_1115;

assign zext_ln58_8_fu_494_p1 = trunc_ln58_5_reg_1090;

assign zext_ln58_9_fu_869_p1 = trunc_ln58_6_reg_1190;

assign zext_ln58_fu_452_p1 = trunc_ln58_reg_1075;

endmodule //TOP_aes_return_Pipeline_aes_return_label12
