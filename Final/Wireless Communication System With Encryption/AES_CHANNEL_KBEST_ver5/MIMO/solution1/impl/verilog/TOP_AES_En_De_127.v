// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_AES_En_De_127 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_data_din,
        out_data_full_n,
        out_data_write,
        demod_out_dout,
        demod_out_empty_n,
        demod_out_read
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] out_data_din;
input   out_data_full_n;
output   out_data_write;
input  [7:0] demod_out_dout;
input   demod_out_empty_n;
output   demod_out_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] out_data_din;
reg out_data_write;
reg demod_out_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] key_V_address0;
reg    key_V_ce0;
wire   [7:0] key_V_q0;
reg    out_data_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg    demod_out_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_do_init_phi_fu_129_p6;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [0:0] do_init_reg_124;
reg   [7:0] bit128in_buffer_reg_714;
reg   [7:0] bit128in_buffer_16_reg_719;
reg   [7:0] bit128in_buffer_17_reg_724;
reg   [7:0] bit128in_buffer_18_reg_729;
reg   [7:0] bit128in_buffer_19_reg_734;
reg   [7:0] bit128in_buffer_20_reg_739;
reg   [7:0] bit128in_buffer_21_reg_744;
reg   [7:0] bit128in_buffer_22_reg_749;
reg   [7:0] bit128in_buffer_23_reg_754;
reg   [7:0] bit128in_buffer_24_reg_759;
reg   [7:0] bit128in_buffer_25_reg_764;
reg   [7:0] bit128in_buffer_26_reg_769;
reg   [7:0] bit128in_buffer_27_reg_774;
reg   [7:0] bit128in_buffer_28_reg_779;
reg   [7:0] bit128in_buffer_29_reg_784;
wire   [63:0] zext_ln508_fu_682_p1;
reg   [63:0] zext_ln508_reg_794;
reg   [3:0] temp_key_addr_reg_804;
wire   [3:0] i_fu_688_p2;
reg   [3:0] i_reg_809;
wire   [0:0] icmp_ln508_fu_700_p2;
reg   [0:0] icmp_ln508_reg_817;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln519_fu_706_p2;
reg   [0:0] icmp_ln519_reg_821;
wire    ap_CS_fsm_state19;
reg   [3:0] temp_key_address0;
reg    temp_key_ce0;
reg    temp_key_we0;
wire   [7:0] temp_key_q0;
reg   [5:0] w_address0;
reg    w_ce0;
reg    w_we0;
wire   [31:0] w_q0;
reg   [5:0] w_address1;
reg    w_ce1;
reg    w_we1;
wire   [31:0] w_q1;
reg   [3:0] key_char_address0;
reg    key_char_ce0;
reg    key_char_we0;
wire   [7:0] key_char_q0;
reg    key_char_ce1;
wire   [7:0] key_char_q1;
wire    grp_extendKey_fu_633_ap_start;
wire    grp_extendKey_fu_633_ap_done;
wire    grp_extendKey_fu_633_ap_idle;
wire    grp_extendKey_fu_633_ap_ready;
wire   [3:0] grp_extendKey_fu_633_key_address0;
wire    grp_extendKey_fu_633_key_ce0;
wire   [3:0] grp_extendKey_fu_633_key_address1;
wire    grp_extendKey_fu_633_key_ce1;
wire   [5:0] grp_extendKey_fu_633_w_address0;
wire    grp_extendKey_fu_633_w_ce0;
wire    grp_extendKey_fu_633_w_we0;
wire   [31:0] grp_extendKey_fu_633_w_d0;
wire   [5:0] grp_extendKey_fu_633_w_address1;
wire    grp_extendKey_fu_633_w_ce1;
wire    grp_extendKey_fu_633_w_we1;
wire   [31:0] grp_extendKey_fu_633_w_d1;
wire    grp_deAes_return_fu_643_ap_start;
wire    grp_deAes_return_fu_643_ap_done;
wire    grp_deAes_return_fu_643_ap_idle;
wire    grp_deAes_return_fu_643_ap_ready;
wire   [5:0] grp_deAes_return_fu_643_w_address0;
wire    grp_deAes_return_fu_643_w_ce0;
wire   [5:0] grp_deAes_return_fu_643_w_address1;
wire    grp_deAes_return_fu_643_w_ce1;
reg    ap_block_state1;
reg   [7:0] p_0_phi_reg_411;
reg   [7:0] p_0_rewind_reg_141;
reg   [7:0] p_062_phi_reg_424;
reg   [7:0] p_062_rewind_reg_156;
reg   [7:0] p_061_phi_reg_437;
reg   [7:0] p_061_rewind_reg_171;
reg   [7:0] p_060_phi_reg_450;
reg   [7:0] p_060_rewind_reg_186;
reg   [7:0] p_059_phi_reg_463;
reg   [7:0] p_059_rewind_reg_201;
reg   [7:0] p_058_phi_reg_476;
reg   [7:0] p_058_rewind_reg_216;
reg   [7:0] p_057_phi_reg_489;
reg   [7:0] p_057_rewind_reg_231;
reg   [7:0] p_056_phi_reg_502;
reg   [7:0] p_056_rewind_reg_246;
reg   [7:0] p_055_phi_reg_515;
reg   [7:0] p_055_rewind_reg_261;
reg   [7:0] p_054_phi_reg_528;
reg   [7:0] p_054_rewind_reg_276;
reg   [7:0] p_053_phi_reg_541;
reg   [7:0] p_053_rewind_reg_291;
reg   [7:0] p_052_phi_reg_554;
reg   [7:0] p_052_rewind_reg_306;
reg   [7:0] p_051_phi_reg_567;
reg   [7:0] p_051_rewind_reg_321;
reg   [7:0] p_050_phi_reg_580;
reg   [7:0] p_050_rewind_reg_336;
reg   [7:0] p_049_phi_reg_593;
reg   [7:0] p_049_rewind_reg_351;
reg   [7:0] p_048_phi_reg_606;
reg   [7:0] p_048_rewind_reg_366;
reg   [7:0] key_change_flag17_reg_381;
reg   [3:0] i15_reg_396;
reg    ap_block_state17;
reg    ap_block_state2;
reg   [7:0] key_change_flag_reg_619;
wire   [0:0] icmp_ln512_fu_694_p2;
reg    grp_extendKey_fu_633_ap_start_reg;
reg    grp_deAes_return_fu_643_ap_start_reg;
reg    ap_block_state20_on_subcall_done;
reg   [34:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 35'd1;
#0 grp_extendKey_fu_633_ap_start_reg = 1'b0;
#0 grp_deAes_return_fu_643_ap_start_reg = 1'b0;
end

TOP_AES_En_De26_key_V30_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
key_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_V_address0),
    .ce0(key_V_ce0),
    .q0(key_V_q0)
);

TOP_AES_En_De26_temp_key_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_key_address0),
    .ce0(temp_key_ce0),
    .we0(temp_key_we0),
    .d0(key_V_q0),
    .q0(temp_key_q0)
);

TOP_AES_En_De_127_w_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_address0),
    .ce0(w_ce0),
    .we0(w_we0),
    .d0(grp_extendKey_fu_633_w_d0),
    .q0(w_q0),
    .address1(w_address1),
    .ce1(w_ce1),
    .we1(w_we1),
    .d1(grp_extendKey_fu_633_w_d1),
    .q1(w_q1)
);

TOP_AES_En_De26_key_char_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
key_char_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_char_address0),
    .ce0(key_char_ce0),
    .we0(key_char_we0),
    .d0(key_V_q0),
    .q0(key_char_q0),
    .address1(grp_extendKey_fu_633_key_address1),
    .ce1(key_char_ce1),
    .q1(key_char_q1)
);

TOP_extendKey grp_extendKey_fu_633(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_extendKey_fu_633_ap_start),
    .ap_done(grp_extendKey_fu_633_ap_done),
    .ap_idle(grp_extendKey_fu_633_ap_idle),
    .ap_ready(grp_extendKey_fu_633_ap_ready),
    .key_address0(grp_extendKey_fu_633_key_address0),
    .key_ce0(grp_extendKey_fu_633_key_ce0),
    .key_q0(key_char_q0),
    .key_address1(grp_extendKey_fu_633_key_address1),
    .key_ce1(grp_extendKey_fu_633_key_ce1),
    .key_q1(key_char_q1),
    .w_address0(grp_extendKey_fu_633_w_address0),
    .w_ce0(grp_extendKey_fu_633_w_ce0),
    .w_we0(grp_extendKey_fu_633_w_we0),
    .w_d0(grp_extendKey_fu_633_w_d0),
    .w_q0(w_q0),
    .w_address1(grp_extendKey_fu_633_w_address1),
    .w_ce1(grp_extendKey_fu_633_w_ce1),
    .w_we1(grp_extendKey_fu_633_w_we1),
    .w_d1(grp_extendKey_fu_633_w_d1),
    .w_q1(w_q1)
);

TOP_deAes_return grp_deAes_return_fu_643(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_deAes_return_fu_643_ap_start),
    .ap_done(grp_deAes_return_fu_643_ap_done),
    .ap_idle(grp_deAes_return_fu_643_ap_idle),
    .ap_ready(grp_deAes_return_fu_643_ap_ready),
    .p_read(p_048_phi_reg_606),
    .p_read1(p_049_phi_reg_593),
    .p_read2(p_050_phi_reg_580),
    .p_read3(p_051_phi_reg_567),
    .p_read4(p_052_phi_reg_554),
    .p_read5(p_053_phi_reg_541),
    .p_read6(p_054_phi_reg_528),
    .p_read7(p_055_phi_reg_515),
    .p_read8(p_056_phi_reg_502),
    .p_read9(p_057_phi_reg_489),
    .p_read10(p_058_phi_reg_476),
    .p_read11(p_059_phi_reg_463),
    .p_read12(p_060_phi_reg_450),
    .p_read13(p_061_phi_reg_437),
    .p_read14(p_062_phi_reg_424),
    .p_read15(p_0_phi_reg_411),
    .w_address0(grp_deAes_return_fu_643_w_address0),
    .w_ce0(grp_deAes_return_fu_643_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_deAes_return_fu_643_w_address1),
    .w_ce1(grp_deAes_return_fu_643_w_ce1),
    .w_q1(w_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_deAes_return_fu_643_ap_start_reg <= 1'b0;
    end else begin
        if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
            grp_deAes_return_fu_643_ap_start_reg <= 1'b1;
        end else if ((grp_deAes_return_fu_643_ap_ready == 1'b1)) begin
            grp_deAes_return_fu_643_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_extendKey_fu_633_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln519_fu_706_p2 == 1'd1) & (icmp_ln508_reg_817 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
            grp_extendKey_fu_633_ap_start_reg <= 1'b1;
        end else if ((grp_extendKey_fu_633_ap_ready == 1'b1)) begin
            grp_extendKey_fu_633_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln508_reg_817 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        do_init_reg_124 <= 1'd0;
    end else if ((((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_124 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln508_reg_817 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i15_reg_396 <= i_reg_809;
    end else if ((((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i15_reg_396 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln508_reg_817 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        key_change_flag17_reg_381 <= key_change_flag_reg_619;
    end else if ((((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_change_flag17_reg_381 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        if ((icmp_ln512_fu_694_p2 == 1'd1)) begin
            key_change_flag_reg_619 <= key_change_flag17_reg_381;
        end else if ((icmp_ln512_fu_694_p2 == 1'd0)) begin
            key_change_flag_reg_619 <= 8'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_048_phi_reg_606 <= p_048_rewind_reg_366;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_048_phi_reg_606 <= bit128in_buffer_reg_714;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_049_phi_reg_593 <= p_049_rewind_reg_351;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_049_phi_reg_593 <= bit128in_buffer_16_reg_719;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_050_phi_reg_580 <= p_050_rewind_reg_336;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_050_phi_reg_580 <= bit128in_buffer_17_reg_724;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_051_phi_reg_567 <= p_051_rewind_reg_321;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_051_phi_reg_567 <= bit128in_buffer_18_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_052_phi_reg_554 <= p_052_rewind_reg_306;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_052_phi_reg_554 <= bit128in_buffer_19_reg_734;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_053_phi_reg_541 <= p_053_rewind_reg_291;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_053_phi_reg_541 <= bit128in_buffer_20_reg_739;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_054_phi_reg_528 <= p_054_rewind_reg_276;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_054_phi_reg_528 <= bit128in_buffer_21_reg_744;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_055_phi_reg_515 <= p_055_rewind_reg_261;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_055_phi_reg_515 <= bit128in_buffer_22_reg_749;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_056_phi_reg_502 <= p_056_rewind_reg_246;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_056_phi_reg_502 <= bit128in_buffer_23_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_057_phi_reg_489 <= p_057_rewind_reg_231;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_057_phi_reg_489 <= bit128in_buffer_24_reg_759;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_058_phi_reg_476 <= p_058_rewind_reg_216;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_058_phi_reg_476 <= bit128in_buffer_25_reg_764;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_059_phi_reg_463 <= p_059_rewind_reg_201;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_059_phi_reg_463 <= bit128in_buffer_26_reg_769;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_060_phi_reg_450 <= p_060_rewind_reg_186;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_060_phi_reg_450 <= bit128in_buffer_27_reg_774;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_061_phi_reg_437 <= p_061_rewind_reg_171;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_061_phi_reg_437 <= bit128in_buffer_28_reg_779;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_062_phi_reg_424 <= p_062_rewind_reg_156;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_062_phi_reg_424 <= bit128in_buffer_29_reg_784;
    end
end

always @ (posedge ap_clk) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
        p_0_phi_reg_411 <= p_0_rewind_reg_141;
    end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_0_phi_reg_411 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bit128in_buffer_16_reg_719 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bit128in_buffer_17_reg_724 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bit128in_buffer_18_reg_729 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        bit128in_buffer_19_reg_734 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bit128in_buffer_20_reg_739 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bit128in_buffer_21_reg_744 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bit128in_buffer_22_reg_749 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bit128in_buffer_23_reg_754 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bit128in_buffer_24_reg_759 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bit128in_buffer_25_reg_764 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        bit128in_buffer_26_reg_769 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bit128in_buffer_27_reg_774 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bit128in_buffer_28_reg_779 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bit128in_buffer_29_reg_784 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (do_init_reg_124 == 1'd1))) begin
        bit128in_buffer_reg_714 <= demod_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_809 <= i_fu_688_p2;
        temp_key_addr_reg_804 <= zext_ln508_fu_682_p1;
        zext_ln508_reg_794[3 : 0] <= zext_ln508_fu_682_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        icmp_ln508_reg_817 <= icmp_ln508_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln508_reg_817 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        icmp_ln519_reg_821 <= icmp_ln519_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln508_reg_817 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        p_048_rewind_reg_366 <= p_048_phi_reg_606;
        p_049_rewind_reg_351 <= p_049_phi_reg_593;
        p_050_rewind_reg_336 <= p_050_phi_reg_580;
        p_051_rewind_reg_321 <= p_051_phi_reg_567;
        p_052_rewind_reg_306 <= p_052_phi_reg_554;
        p_053_rewind_reg_291 <= p_053_phi_reg_541;
        p_054_rewind_reg_276 <= p_054_phi_reg_528;
        p_055_rewind_reg_261 <= p_055_phi_reg_515;
        p_056_rewind_reg_246 <= p_056_phi_reg_502;
        p_057_rewind_reg_231 <= p_057_phi_reg_489;
        p_058_rewind_reg_216 <= p_058_phi_reg_476;
        p_059_rewind_reg_201 <= p_059_phi_reg_463;
        p_060_rewind_reg_186 <= p_060_phi_reg_450;
        p_061_rewind_reg_171 <= p_061_phi_reg_437;
        p_062_rewind_reg_156 <= p_062_phi_reg_424;
        p_0_rewind_reg_141 <= p_0_phi_reg_411;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1))) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_data_full_n == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done))) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_data_full_n == 1'b0) | (grp_deAes_return_fu_643_ap_done == 1'b0))) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if (((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((out_data_full_n == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((demod_out_empty_n == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == ap_CS_fsm_state2) & (do_init_reg_124 == 1'd1)))) begin
        demod_out_blk_n = demod_out_empty_n;
    end else begin
        demod_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (do_init_reg_124 == 1'd1)) | (~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (do_init_reg_124 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        demod_out_read = 1'b1;
    end else begin
        demod_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state17))) begin
        key_V_ce0 = 1'b1;
    end else begin
        key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_char_address0 = zext_ln508_reg_794;
    end else if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        key_char_address0 = grp_extendKey_fu_633_key_address0;
    end else begin
        key_char_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_char_ce0 = 1'b1;
    end else if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        key_char_ce0 = grp_extendKey_fu_633_key_ce0;
    end else begin
        key_char_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        key_char_ce1 = grp_extendKey_fu_633_key_ce1;
    end else begin
        key_char_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_char_we0 = 1'b1;
    end else begin
        key_char_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        out_data_blk_n = out_data_full_n;
    end else begin
        out_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        out_data_din = p_0_phi_reg_411;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        out_data_din = p_062_phi_reg_424;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        out_data_din = p_061_phi_reg_437;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        out_data_din = p_060_phi_reg_450;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        out_data_din = p_059_phi_reg_463;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
        out_data_din = p_058_phi_reg_476;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        out_data_din = p_057_phi_reg_489;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        out_data_din = p_056_phi_reg_502;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        out_data_din = p_055_phi_reg_515;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        out_data_din = p_054_phi_reg_528;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
        out_data_din = p_053_phi_reg_541;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        out_data_din = p_052_phi_reg_554;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
        out_data_din = p_051_phi_reg_567;
    end else if ((~((out_data_full_n == 1'b0) | (grp_deAes_return_fu_643_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
        out_data_din = p_050_phi_reg_580;
    end else if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
        out_data_din = p_049_phi_reg_593;
    end else if ((~((out_data_full_n == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20))) begin
        out_data_din = p_048_phi_reg_606;
    end else begin
        out_data_din = 'bx;
    end
end

always @ (*) begin
    if (((~((out_data_full_n == 1'b0) | (grp_deAes_return_fu_643_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((out_data_full_n == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state32)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state31)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state30)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25)) | ((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24)))) begin
        out_data_write = 1'b1;
    end else begin
        out_data_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_key_address0 = temp_key_addr_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_key_address0 = zext_ln508_fu_682_p1;
    end else begin
        temp_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state17)))) begin
        temp_key_ce0 = 1'b1;
    end else begin
        temp_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln512_fu_694_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        temp_key_we0 = 1'b1;
    end else begin
        temp_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_address0 = grp_deAes_return_fu_643_w_address0;
    end else if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_address0 = grp_extendKey_fu_633_w_address0;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_address1 = grp_deAes_return_fu_643_w_address1;
    end else if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_address1 = grp_extendKey_fu_633_w_address1;
    end else begin
        w_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_ce0 = grp_deAes_return_fu_643_w_ce0;
    end else if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_ce0 = grp_extendKey_fu_633_w_ce0;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        w_ce1 = grp_deAes_return_fu_643_w_ce1;
    end else if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_ce1 = grp_extendKey_fu_633_w_ce1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_we0 = grp_extendKey_fu_633_w_we0;
    end else begin
        w_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln519_reg_821 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_we1 = grp_extendKey_fu_633_w_we1;
    end else begin
        w_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_do_init_phi_fu_129_p6 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state2) & (do_init_reg_124 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((demod_out_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln508_reg_817 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((out_data_full_n == 1'b0) | (1'b1 == ap_block_state20_on_subcall_done)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((out_data_full_n == 1'b0) | (grp_deAes_return_fu_643_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((out_data_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state17 = ((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1));
end

always @ (*) begin
    ap_block_state2 = ((demod_out_empty_n == 1'b0) & (do_init_reg_124 == 1'd1));
end

always @ (*) begin
    ap_block_state20_on_subcall_done = ((grp_extendKey_fu_633_ap_done == 1'b0) & (icmp_ln519_reg_821 == 1'd1));
end

assign ap_phi_mux_do_init_phi_fu_129_p6 = do_init_reg_124;

assign grp_deAes_return_fu_643_ap_start = grp_deAes_return_fu_643_ap_start_reg;

assign grp_extendKey_fu_633_ap_start = grp_extendKey_fu_633_ap_start_reg;

assign i_fu_688_p2 = (i15_reg_396 + 4'd1);

assign icmp_ln508_fu_700_p2 = ((i15_reg_396 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln512_fu_694_p2 = ((temp_key_q0 == key_V_q0) ? 1'b1 : 1'b0);

assign icmp_ln519_fu_706_p2 = ((key_change_flag_reg_619 == 8'd1) ? 1'b1 : 1'b0);

assign key_V_address0 = zext_ln508_fu_682_p1;

assign zext_ln508_fu_682_p1 = i15_reg_396;

always @ (posedge ap_clk) begin
    zext_ln508_reg_794[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //TOP_AES_En_De_127
