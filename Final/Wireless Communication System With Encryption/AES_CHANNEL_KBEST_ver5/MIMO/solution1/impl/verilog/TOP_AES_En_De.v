// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_AES_En_De (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        TOP_ap_uint_8_ap_uint_8_in_stream_dout,
        TOP_ap_uint_8_ap_uint_8_in_stream_empty_n,
        TOP_ap_uint_8_ap_uint_8_in_stream_read,
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_din,
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n,
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_write,
        op
);

parameter    ap_ST_fsm_state1 = 40'd1;
parameter    ap_ST_fsm_state2 = 40'd2;
parameter    ap_ST_fsm_state3 = 40'd4;
parameter    ap_ST_fsm_state4 = 40'd8;
parameter    ap_ST_fsm_state5 = 40'd16;
parameter    ap_ST_fsm_state6 = 40'd32;
parameter    ap_ST_fsm_state7 = 40'd64;
parameter    ap_ST_fsm_state8 = 40'd128;
parameter    ap_ST_fsm_state9 = 40'd256;
parameter    ap_ST_fsm_state10 = 40'd512;
parameter    ap_ST_fsm_state11 = 40'd1024;
parameter    ap_ST_fsm_state12 = 40'd2048;
parameter    ap_ST_fsm_state13 = 40'd4096;
parameter    ap_ST_fsm_state14 = 40'd8192;
parameter    ap_ST_fsm_state15 = 40'd16384;
parameter    ap_ST_fsm_state16 = 40'd32768;
parameter    ap_ST_fsm_state17 = 40'd65536;
parameter    ap_ST_fsm_state18 = 40'd131072;
parameter    ap_ST_fsm_state19 = 40'd262144;
parameter    ap_ST_fsm_state20 = 40'd524288;
parameter    ap_ST_fsm_state21 = 40'd1048576;
parameter    ap_ST_fsm_state22 = 40'd2097152;
parameter    ap_ST_fsm_state23 = 40'd4194304;
parameter    ap_ST_fsm_state24 = 40'd8388608;
parameter    ap_ST_fsm_state25 = 40'd16777216;
parameter    ap_ST_fsm_state26 = 40'd33554432;
parameter    ap_ST_fsm_state27 = 40'd67108864;
parameter    ap_ST_fsm_state28 = 40'd134217728;
parameter    ap_ST_fsm_state29 = 40'd268435456;
parameter    ap_ST_fsm_state30 = 40'd536870912;
parameter    ap_ST_fsm_state31 = 40'd1073741824;
parameter    ap_ST_fsm_state32 = 40'd2147483648;
parameter    ap_ST_fsm_state33 = 40'd4294967296;
parameter    ap_ST_fsm_state34 = 40'd8589934592;
parameter    ap_ST_fsm_state35 = 40'd17179869184;
parameter    ap_ST_fsm_state36 = 40'd34359738368;
parameter    ap_ST_fsm_state37 = 40'd68719476736;
parameter    ap_ST_fsm_state38 = 40'd137438953472;
parameter    ap_ST_fsm_state39 = 40'd274877906944;
parameter    ap_ST_fsm_state40 = 40'd549755813888;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] TOP_ap_uint_8_ap_uint_8_in_stream_dout;
input   TOP_ap_uint_8_ap_uint_8_in_stream_empty_n;
output   TOP_ap_uint_8_ap_uint_8_in_stream_read;
output  [7:0] TOP_ap_uint_8_ap_uint_8_AES_EN_out_din;
input   TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n;
output   TOP_ap_uint_8_ap_uint_8_AES_EN_out_write;
input  [0:0] op;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg TOP_ap_uint_8_ap_uint_8_in_stream_read;
reg[7:0] TOP_ap_uint_8_ap_uint_8_AES_EN_out_din;
reg TOP_ap_uint_8_ap_uint_8_AES_EN_out_write;

(* fsm_encoding = "none" *) reg   [39:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] key_V_address0;
reg    key_V_ce0;
wire   [7:0] key_V_q0;
reg   [3:0] temp_key_address0;
reg    temp_key_ce0;
reg    temp_key_we0;
wire   [7:0] temp_key_q0;
reg   [5:0] w_address0;
reg    w_ce0;
reg    w_we0;
wire   [31:0] w_q0;
reg   [5:0] w_address1;
reg    w_ce1;
reg    w_we1;
wire   [31:0] w_q1;
reg   [14:0] bit128in_buffer_0_address0;
reg    bit128in_buffer_0_ce0;
reg    bit128in_buffer_0_we0;
wire   [7:0] bit128in_buffer_0_q0;
reg   [14:0] bit128in_buffer_1_address0;
reg    bit128in_buffer_1_ce0;
reg    bit128in_buffer_1_we0;
wire   [7:0] bit128in_buffer_1_q0;
reg   [14:0] bit128in_buffer_2_address0;
reg    bit128in_buffer_2_ce0;
reg    bit128in_buffer_2_we0;
wire   [7:0] bit128in_buffer_2_q0;
reg   [14:0] bit128in_buffer_3_address0;
reg    bit128in_buffer_3_ce0;
reg    bit128in_buffer_3_we0;
wire   [7:0] bit128in_buffer_3_q0;
reg   [14:0] bit128in_buffer_4_address0;
reg    bit128in_buffer_4_ce0;
reg    bit128in_buffer_4_we0;
wire   [7:0] bit128in_buffer_4_q0;
reg   [14:0] bit128in_buffer_5_address0;
reg    bit128in_buffer_5_ce0;
reg    bit128in_buffer_5_we0;
wire   [7:0] bit128in_buffer_5_q0;
reg   [14:0] bit128in_buffer_6_address0;
reg    bit128in_buffer_6_ce0;
reg    bit128in_buffer_6_we0;
wire   [7:0] bit128in_buffer_6_q0;
reg   [14:0] bit128in_buffer_7_address0;
reg    bit128in_buffer_7_ce0;
reg    bit128in_buffer_7_we0;
wire   [7:0] bit128in_buffer_7_q0;
reg   [14:0] bit128in_buffer_8_address0;
reg    bit128in_buffer_8_ce0;
reg    bit128in_buffer_8_we0;
wire   [7:0] bit128in_buffer_8_q0;
reg   [14:0] bit128in_buffer_9_address0;
reg    bit128in_buffer_9_ce0;
reg    bit128in_buffer_9_we0;
wire   [7:0] bit128in_buffer_9_q0;
reg   [14:0] bit128in_buffer_10_address0;
reg    bit128in_buffer_10_ce0;
reg    bit128in_buffer_10_we0;
wire   [7:0] bit128in_buffer_10_q0;
reg   [14:0] bit128in_buffer_11_address0;
reg    bit128in_buffer_11_ce0;
reg    bit128in_buffer_11_we0;
wire   [7:0] bit128in_buffer_11_q0;
reg   [14:0] bit128in_buffer_12_address0;
reg    bit128in_buffer_12_ce0;
reg    bit128in_buffer_12_we0;
wire   [7:0] bit128in_buffer_12_q0;
reg   [14:0] bit128in_buffer_13_address0;
reg    bit128in_buffer_13_ce0;
reg    bit128in_buffer_13_we0;
wire   [7:0] bit128in_buffer_13_q0;
reg   [14:0] bit128in_buffer_14_address0;
reg    bit128in_buffer_14_ce0;
reg    bit128in_buffer_14_we0;
wire   [7:0] bit128in_buffer_14_q0;
reg   [14:0] bit128in_buffer_15_address0;
reg    bit128in_buffer_15_ce0;
reg    bit128in_buffer_15_we0;
wire   [7:0] bit128in_buffer_15_q0;
reg    TOP_ap_uint_8_ap_uint_8_in_stream_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] ap_phi_mux_do_init_phi_fu_330_p6;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [0:0] do_init_reg_325;
reg    TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire   [63:0] zext_ln510_fu_504_p1;
reg   [63:0] zext_ln510_reg_541;
reg   [3:0] temp_key_addr_reg_551;
wire   [3:0] i_fu_510_p2;
reg   [3:0] i_reg_556;
wire   [0:0] icmp_ln510_fu_522_p2;
reg   [0:0] icmp_ln510_reg_564;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln521_fu_528_p2;
reg   [0:0] icmp_ln521_reg_568;
wire    ap_CS_fsm_state19;
reg   [3:0] key_char_address0;
reg    key_char_ce0;
reg    key_char_we0;
wire   [7:0] key_char_q0;
reg    key_char_ce1;
wire   [7:0] key_char_q1;
wire    grp_extendKey_fu_413_ap_start;
wire    grp_extendKey_fu_413_ap_done;
wire    grp_extendKey_fu_413_ap_idle;
wire    grp_extendKey_fu_413_ap_ready;
wire   [3:0] grp_extendKey_fu_413_key_address0;
wire    grp_extendKey_fu_413_key_ce0;
wire   [3:0] grp_extendKey_fu_413_key_address1;
wire    grp_extendKey_fu_413_key_ce1;
wire   [5:0] grp_extendKey_fu_413_w_address0;
wire    grp_extendKey_fu_413_w_ce0;
wire    grp_extendKey_fu_413_w_we0;
wire   [31:0] grp_extendKey_fu_413_w_d0;
wire   [5:0] grp_extendKey_fu_413_w_address1;
wire    grp_extendKey_fu_413_w_ce1;
wire    grp_extendKey_fu_413_w_we1;
wire   [31:0] grp_extendKey_fu_413_w_d1;
wire    grp_aes_return_fu_424_ap_start;
wire    grp_aes_return_fu_424_ap_done;
wire    grp_aes_return_fu_424_ap_idle;
wire    grp_aes_return_fu_424_ap_ready;
wire   [5:0] grp_aes_return_fu_424_w_address0;
wire    grp_aes_return_fu_424_w_ce0;
wire   [5:0] grp_aes_return_fu_424_w_address1;
wire    grp_aes_return_fu_424_w_ce1;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_0_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_0_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_1_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_1_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_2_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_2_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_3_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_3_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_4_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_4_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_5_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_5_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_6_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_6_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_7_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_7_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_8_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_8_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_9_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_9_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_10_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_10_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_11_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_11_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_12_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_12_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_13_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_13_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_14_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_14_ce0;
wire   [14:0] grp_aes_return_fu_424_bit128in_buffer_15_address0;
wire    grp_aes_return_fu_424_bit128in_buffer_15_ce0;
wire    grp_deAes_return_fu_464_ap_start;
wire    grp_deAes_return_fu_464_ap_done;
wire    grp_deAes_return_fu_464_ap_idle;
wire    grp_deAes_return_fu_464_ap_ready;
wire   [5:0] grp_deAes_return_fu_464_w_address0;
wire    grp_deAes_return_fu_464_w_ce0;
wire   [5:0] grp_deAes_return_fu_464_w_address1;
wire    grp_deAes_return_fu_464_w_ce1;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_0_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_0_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_1_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_1_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_2_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_2_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_3_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_3_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_4_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_4_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_5_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_5_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_6_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_6_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_7_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_7_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_8_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_8_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_9_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_9_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_10_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_10_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_11_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_11_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_12_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_12_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_13_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_13_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_14_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_14_ce0;
wire   [14:0] grp_deAes_return_fu_464_bit128in_buffer_15_address0;
wire    grp_deAes_return_fu_464_bit128in_buffer_15_ce0;
reg   [0:0] op35_phi_reg_387;
reg   [0:0] op35_rewind_reg_342;
reg   [7:0] key_change_flag34_reg_357;
reg   [3:0] i32_reg_372;
reg    ap_block_state17;
reg    ap_block_state2;
reg   [7:0] key_change_flag_reg_399;
wire   [0:0] icmp_ln514_fu_516_p2;
reg    grp_extendKey_fu_413_ap_start_reg;
wire    ap_CS_fsm_state20;
reg    grp_aes_return_fu_424_ap_start_reg;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
reg    grp_deAes_return_fu_464_ap_start_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg   [39:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
reg    ap_block_state20_on_subcall_done;
reg    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
reg    ap_block_state22_on_subcall_done;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 40'd1;
#0 grp_extendKey_fu_413_ap_start_reg = 1'b0;
#0 grp_aes_return_fu_424_ap_start_reg = 1'b0;
#0 grp_deAes_return_fu_464_ap_start_reg = 1'b0;
end

TOP_AES_En_De_key_V_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
key_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_V_address0),
    .ce0(key_V_ce0),
    .q0(key_V_q0)
);

TOP_AES_En_De_temp_key_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_key_address0),
    .ce0(temp_key_ce0),
    .we0(temp_key_we0),
    .d0(key_V_q0),
    .q0(temp_key_q0)
);

TOP_AES_En_De_w_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_address0),
    .ce0(w_ce0),
    .we0(w_we0),
    .d0(grp_extendKey_fu_413_w_d0),
    .q0(w_q0),
    .address1(w_address1),
    .ce1(w_ce1),
    .we1(w_we1),
    .d1(grp_extendKey_fu_413_w_d1),
    .q1(w_q1)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_0_address0),
    .ce0(bit128in_buffer_0_ce0),
    .we0(bit128in_buffer_0_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_0_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_1_address0),
    .ce0(bit128in_buffer_1_ce0),
    .we0(bit128in_buffer_1_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_1_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_2_address0),
    .ce0(bit128in_buffer_2_ce0),
    .we0(bit128in_buffer_2_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_2_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_3_address0),
    .ce0(bit128in_buffer_3_ce0),
    .we0(bit128in_buffer_3_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_3_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_4_address0),
    .ce0(bit128in_buffer_4_ce0),
    .we0(bit128in_buffer_4_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_4_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_5_address0),
    .ce0(bit128in_buffer_5_ce0),
    .we0(bit128in_buffer_5_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_5_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_6_address0),
    .ce0(bit128in_buffer_6_ce0),
    .we0(bit128in_buffer_6_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_6_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_7_address0),
    .ce0(bit128in_buffer_7_ce0),
    .we0(bit128in_buffer_7_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_7_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_8_address0),
    .ce0(bit128in_buffer_8_ce0),
    .we0(bit128in_buffer_8_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_8_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_9_address0),
    .ce0(bit128in_buffer_9_ce0),
    .we0(bit128in_buffer_9_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_9_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_10_address0),
    .ce0(bit128in_buffer_10_ce0),
    .we0(bit128in_buffer_10_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_10_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_11_address0),
    .ce0(bit128in_buffer_11_ce0),
    .we0(bit128in_buffer_11_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_11_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_12_address0),
    .ce0(bit128in_buffer_12_ce0),
    .we0(bit128in_buffer_12_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_12_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_13_address0),
    .ce0(bit128in_buffer_13_ce0),
    .we0(bit128in_buffer_13_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_13_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_14_address0),
    .ce0(bit128in_buffer_14_ce0),
    .we0(bit128in_buffer_14_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_14_q0)
);

TOP_AES_En_De_bit128in_buffer_0_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 21600 ),
    .AddressWidth( 15 ))
bit128in_buffer_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit128in_buffer_15_address0),
    .ce0(bit128in_buffer_15_ce0),
    .we0(bit128in_buffer_15_we0),
    .d0(TOP_ap_uint_8_ap_uint_8_in_stream_dout),
    .q0(bit128in_buffer_15_q0)
);

TOP_AES_En_De_key_char_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
key_char_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(key_char_address0),
    .ce0(key_char_ce0),
    .we0(key_char_we0),
    .d0(key_V_q0),
    .q0(key_char_q0),
    .address1(grp_extendKey_fu_413_key_address1),
    .ce1(key_char_ce1),
    .q1(key_char_q1)
);

TOP_extendKey grp_extendKey_fu_413(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_extendKey_fu_413_ap_start),
    .ap_done(grp_extendKey_fu_413_ap_done),
    .ap_idle(grp_extendKey_fu_413_ap_idle),
    .ap_ready(grp_extendKey_fu_413_ap_ready),
    .key_address0(grp_extendKey_fu_413_key_address0),
    .key_ce0(grp_extendKey_fu_413_key_ce0),
    .key_q0(key_char_q0),
    .key_address1(grp_extendKey_fu_413_key_address1),
    .key_ce1(grp_extendKey_fu_413_key_ce1),
    .key_q1(key_char_q1),
    .w_address0(grp_extendKey_fu_413_w_address0),
    .w_ce0(grp_extendKey_fu_413_w_ce0),
    .w_we0(grp_extendKey_fu_413_w_we0),
    .w_d0(grp_extendKey_fu_413_w_d0),
    .w_q0(w_q0),
    .w_address1(grp_extendKey_fu_413_w_address1),
    .w_ce1(grp_extendKey_fu_413_w_ce1),
    .w_we1(grp_extendKey_fu_413_w_we1),
    .w_d1(grp_extendKey_fu_413_w_d1),
    .w_q1(w_q1)
);

TOP_aes_return grp_aes_return_fu_424(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes_return_fu_424_ap_start),
    .ap_done(grp_aes_return_fu_424_ap_done),
    .ap_idle(grp_aes_return_fu_424_ap_idle),
    .ap_ready(grp_aes_return_fu_424_ap_ready),
    .w_address0(grp_aes_return_fu_424_w_address0),
    .w_ce0(grp_aes_return_fu_424_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_aes_return_fu_424_w_address1),
    .w_ce1(grp_aes_return_fu_424_w_ce1),
    .w_q1(w_q1),
    .bit128in_buffer_0_address0(grp_aes_return_fu_424_bit128in_buffer_0_address0),
    .bit128in_buffer_0_ce0(grp_aes_return_fu_424_bit128in_buffer_0_ce0),
    .bit128in_buffer_0_q0(bit128in_buffer_0_q0),
    .bit128in_buffer_1_address0(grp_aes_return_fu_424_bit128in_buffer_1_address0),
    .bit128in_buffer_1_ce0(grp_aes_return_fu_424_bit128in_buffer_1_ce0),
    .bit128in_buffer_1_q0(bit128in_buffer_1_q0),
    .bit128in_buffer_2_address0(grp_aes_return_fu_424_bit128in_buffer_2_address0),
    .bit128in_buffer_2_ce0(grp_aes_return_fu_424_bit128in_buffer_2_ce0),
    .bit128in_buffer_2_q0(bit128in_buffer_2_q0),
    .bit128in_buffer_3_address0(grp_aes_return_fu_424_bit128in_buffer_3_address0),
    .bit128in_buffer_3_ce0(grp_aes_return_fu_424_bit128in_buffer_3_ce0),
    .bit128in_buffer_3_q0(bit128in_buffer_3_q0),
    .bit128in_buffer_4_address0(grp_aes_return_fu_424_bit128in_buffer_4_address0),
    .bit128in_buffer_4_ce0(grp_aes_return_fu_424_bit128in_buffer_4_ce0),
    .bit128in_buffer_4_q0(bit128in_buffer_4_q0),
    .bit128in_buffer_5_address0(grp_aes_return_fu_424_bit128in_buffer_5_address0),
    .bit128in_buffer_5_ce0(grp_aes_return_fu_424_bit128in_buffer_5_ce0),
    .bit128in_buffer_5_q0(bit128in_buffer_5_q0),
    .bit128in_buffer_6_address0(grp_aes_return_fu_424_bit128in_buffer_6_address0),
    .bit128in_buffer_6_ce0(grp_aes_return_fu_424_bit128in_buffer_6_ce0),
    .bit128in_buffer_6_q0(bit128in_buffer_6_q0),
    .bit128in_buffer_7_address0(grp_aes_return_fu_424_bit128in_buffer_7_address0),
    .bit128in_buffer_7_ce0(grp_aes_return_fu_424_bit128in_buffer_7_ce0),
    .bit128in_buffer_7_q0(bit128in_buffer_7_q0),
    .bit128in_buffer_8_address0(grp_aes_return_fu_424_bit128in_buffer_8_address0),
    .bit128in_buffer_8_ce0(grp_aes_return_fu_424_bit128in_buffer_8_ce0),
    .bit128in_buffer_8_q0(bit128in_buffer_8_q0),
    .bit128in_buffer_9_address0(grp_aes_return_fu_424_bit128in_buffer_9_address0),
    .bit128in_buffer_9_ce0(grp_aes_return_fu_424_bit128in_buffer_9_ce0),
    .bit128in_buffer_9_q0(bit128in_buffer_9_q0),
    .bit128in_buffer_10_address0(grp_aes_return_fu_424_bit128in_buffer_10_address0),
    .bit128in_buffer_10_ce0(grp_aes_return_fu_424_bit128in_buffer_10_ce0),
    .bit128in_buffer_10_q0(bit128in_buffer_10_q0),
    .bit128in_buffer_11_address0(grp_aes_return_fu_424_bit128in_buffer_11_address0),
    .bit128in_buffer_11_ce0(grp_aes_return_fu_424_bit128in_buffer_11_ce0),
    .bit128in_buffer_11_q0(bit128in_buffer_11_q0),
    .bit128in_buffer_12_address0(grp_aes_return_fu_424_bit128in_buffer_12_address0),
    .bit128in_buffer_12_ce0(grp_aes_return_fu_424_bit128in_buffer_12_ce0),
    .bit128in_buffer_12_q0(bit128in_buffer_12_q0),
    .bit128in_buffer_13_address0(grp_aes_return_fu_424_bit128in_buffer_13_address0),
    .bit128in_buffer_13_ce0(grp_aes_return_fu_424_bit128in_buffer_13_ce0),
    .bit128in_buffer_13_q0(bit128in_buffer_13_q0),
    .bit128in_buffer_14_address0(grp_aes_return_fu_424_bit128in_buffer_14_address0),
    .bit128in_buffer_14_ce0(grp_aes_return_fu_424_bit128in_buffer_14_ce0),
    .bit128in_buffer_14_q0(bit128in_buffer_14_q0),
    .bit128in_buffer_15_address0(grp_aes_return_fu_424_bit128in_buffer_15_address0),
    .bit128in_buffer_15_ce0(grp_aes_return_fu_424_bit128in_buffer_15_ce0),
    .bit128in_buffer_15_q0(bit128in_buffer_15_q0)
);

TOP_deAes_return grp_deAes_return_fu_464(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_deAes_return_fu_464_ap_start),
    .ap_done(grp_deAes_return_fu_464_ap_done),
    .ap_idle(grp_deAes_return_fu_464_ap_idle),
    .ap_ready(grp_deAes_return_fu_464_ap_ready),
    .w_address0(grp_deAes_return_fu_464_w_address0),
    .w_ce0(grp_deAes_return_fu_464_w_ce0),
    .w_q0(w_q0),
    .w_address1(grp_deAes_return_fu_464_w_address1),
    .w_ce1(grp_deAes_return_fu_464_w_ce1),
    .w_q1(w_q1),
    .bit128in_buffer_0_address0(grp_deAes_return_fu_464_bit128in_buffer_0_address0),
    .bit128in_buffer_0_ce0(grp_deAes_return_fu_464_bit128in_buffer_0_ce0),
    .bit128in_buffer_0_q0(bit128in_buffer_0_q0),
    .bit128in_buffer_1_address0(grp_deAes_return_fu_464_bit128in_buffer_1_address0),
    .bit128in_buffer_1_ce0(grp_deAes_return_fu_464_bit128in_buffer_1_ce0),
    .bit128in_buffer_1_q0(bit128in_buffer_1_q0),
    .bit128in_buffer_2_address0(grp_deAes_return_fu_464_bit128in_buffer_2_address0),
    .bit128in_buffer_2_ce0(grp_deAes_return_fu_464_bit128in_buffer_2_ce0),
    .bit128in_buffer_2_q0(bit128in_buffer_2_q0),
    .bit128in_buffer_3_address0(grp_deAes_return_fu_464_bit128in_buffer_3_address0),
    .bit128in_buffer_3_ce0(grp_deAes_return_fu_464_bit128in_buffer_3_ce0),
    .bit128in_buffer_3_q0(bit128in_buffer_3_q0),
    .bit128in_buffer_4_address0(grp_deAes_return_fu_464_bit128in_buffer_4_address0),
    .bit128in_buffer_4_ce0(grp_deAes_return_fu_464_bit128in_buffer_4_ce0),
    .bit128in_buffer_4_q0(bit128in_buffer_4_q0),
    .bit128in_buffer_5_address0(grp_deAes_return_fu_464_bit128in_buffer_5_address0),
    .bit128in_buffer_5_ce0(grp_deAes_return_fu_464_bit128in_buffer_5_ce0),
    .bit128in_buffer_5_q0(bit128in_buffer_5_q0),
    .bit128in_buffer_6_address0(grp_deAes_return_fu_464_bit128in_buffer_6_address0),
    .bit128in_buffer_6_ce0(grp_deAes_return_fu_464_bit128in_buffer_6_ce0),
    .bit128in_buffer_6_q0(bit128in_buffer_6_q0),
    .bit128in_buffer_7_address0(grp_deAes_return_fu_464_bit128in_buffer_7_address0),
    .bit128in_buffer_7_ce0(grp_deAes_return_fu_464_bit128in_buffer_7_ce0),
    .bit128in_buffer_7_q0(bit128in_buffer_7_q0),
    .bit128in_buffer_8_address0(grp_deAes_return_fu_464_bit128in_buffer_8_address0),
    .bit128in_buffer_8_ce0(grp_deAes_return_fu_464_bit128in_buffer_8_ce0),
    .bit128in_buffer_8_q0(bit128in_buffer_8_q0),
    .bit128in_buffer_9_address0(grp_deAes_return_fu_464_bit128in_buffer_9_address0),
    .bit128in_buffer_9_ce0(grp_deAes_return_fu_464_bit128in_buffer_9_ce0),
    .bit128in_buffer_9_q0(bit128in_buffer_9_q0),
    .bit128in_buffer_10_address0(grp_deAes_return_fu_464_bit128in_buffer_10_address0),
    .bit128in_buffer_10_ce0(grp_deAes_return_fu_464_bit128in_buffer_10_ce0),
    .bit128in_buffer_10_q0(bit128in_buffer_10_q0),
    .bit128in_buffer_11_address0(grp_deAes_return_fu_464_bit128in_buffer_11_address0),
    .bit128in_buffer_11_ce0(grp_deAes_return_fu_464_bit128in_buffer_11_ce0),
    .bit128in_buffer_11_q0(bit128in_buffer_11_q0),
    .bit128in_buffer_12_address0(grp_deAes_return_fu_464_bit128in_buffer_12_address0),
    .bit128in_buffer_12_ce0(grp_deAes_return_fu_464_bit128in_buffer_12_ce0),
    .bit128in_buffer_12_q0(bit128in_buffer_12_q0),
    .bit128in_buffer_13_address0(grp_deAes_return_fu_464_bit128in_buffer_13_address0),
    .bit128in_buffer_13_ce0(grp_deAes_return_fu_464_bit128in_buffer_13_ce0),
    .bit128in_buffer_13_q0(bit128in_buffer_13_q0),
    .bit128in_buffer_14_address0(grp_deAes_return_fu_464_bit128in_buffer_14_address0),
    .bit128in_buffer_14_ce0(grp_deAes_return_fu_464_bit128in_buffer_14_ce0),
    .bit128in_buffer_14_q0(bit128in_buffer_14_q0),
    .bit128in_buffer_15_address0(grp_deAes_return_fu_464_bit128in_buffer_15_address0),
    .bit128in_buffer_15_ce0(grp_deAes_return_fu_464_bit128in_buffer_15_ce0),
    .bit128in_buffer_15_q0(bit128in_buffer_15_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes_return_fu_424_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_aes_return_fu_424_ap_start_reg <= 1'b1;
        end else if ((grp_aes_return_fu_424_ap_ready == 1'b1)) begin
            grp_aes_return_fu_424_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_deAes_return_fu_464_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_deAes_return_fu_464_ap_start_reg <= 1'b1;
        end else if ((grp_deAes_return_fu_464_ap_ready == 1'b1)) begin
            grp_deAes_return_fu_464_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_extendKey_fu_413_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln521_fu_528_p2 == 1'd1) & (icmp_ln510_reg_564 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
            grp_extendKey_fu_413_ap_start_reg <= 1'b1;
        end else if ((grp_extendKey_fu_413_ap_ready == 1'b1)) begin
            grp_extendKey_fu_413_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln510_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        do_init_reg_325 <= 1'd0;
    end else if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_325 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln510_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        i32_reg_372 <= i_reg_556;
    end else if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i32_reg_372 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln510_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        key_change_flag34_reg_357 <= key_change_flag_reg_399;
    end else if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        key_change_flag34_reg_357 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        if ((icmp_ln514_fu_516_p2 == 1'd1)) begin
            key_change_flag_reg_399 <= key_change_flag34_reg_357;
        end else if ((icmp_ln514_fu_516_p2 == 1'd0)) begin
            key_change_flag_reg_399 <= 8'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1)) & (ap_phi_mux_do_init_phi_fu_330_p6 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        op35_phi_reg_387 <= op35_rewind_reg_342;
    end else if ((~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        op35_phi_reg_387 <= op;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_reg_556 <= i_fu_510_p2;
        temp_key_addr_reg_551 <= zext_ln510_fu_504_p1;
        zext_ln510_reg_541[3 : 0] <= zext_ln510_fu_504_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        icmp_ln510_reg_564 <= icmp_ln510_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln510_reg_564 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        icmp_ln521_reg_568 <= icmp_ln521_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln510_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        op35_rewind_reg_342 <= op35_phi_reg_387;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25))) begin
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n = TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n;
    end else begin
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        if ((1'b1 == ap_CS_fsm_state40)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_15_q0;
        end else if ((1'b1 == ap_CS_fsm_state39)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_14_q0;
        end else if ((1'b1 == ap_CS_fsm_state38)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_13_q0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_12_q0;
        end else if ((1'b1 == ap_CS_fsm_state36)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_11_q0;
        end else if ((1'b1 == ap_CS_fsm_state35)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_10_q0;
        end else if ((1'b1 == ap_CS_fsm_state34)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_9_q0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_8_q0;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_7_q0;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_6_q0;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_5_q0;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_4_q0;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_3_q0;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_2_q0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_1_q0;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = bit128in_buffer_0_q0;
        end else begin
            TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = 'bx;
        end
    end else begin
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state39)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state38)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state37)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state36)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state35)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state34)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state32)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state30)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state29)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state28)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state25)))) begin
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_write = 1'b1;
    end else begin
        TOP_ap_uint_8_ap_uint_8_AES_EN_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state17)) | ((do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        TOP_ap_uint_8_ap_uint_8_in_stream_blk_n = TOP_ap_uint_8_ap_uint_8_in_stream_empty_n;
    end else begin
        TOP_ap_uint_8_ap_uint_8_in_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state3)) | (~((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1)) & (do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | (~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state17)))) begin
        TOP_ap_uint_8_ap_uint_8_in_stream_read = 1'b1;
    end else begin
        TOP_ap_uint_8_ap_uint_8_in_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if (((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n))) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state20_on_subcall_done)) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

assign ap_ST_fsm_state21_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state22_on_subcall_done)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state2))) begin
        bit128in_buffer_0_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_0_address0 = grp_deAes_return_fu_464_bit128in_buffer_0_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_0_address0 = grp_aes_return_fu_424_bit128in_buffer_0_address0;
    end else begin
        bit128in_buffer_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (~((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1)) & (1'b1 == ap_CS_fsm_state2)))) begin
        bit128in_buffer_0_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_0_ce0 = grp_deAes_return_fu_464_bit128in_buffer_0_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_0_ce0 = grp_aes_return_fu_424_bit128in_buffer_0_ce0;
    end else begin
        bit128in_buffer_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1)) & (do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        bit128in_buffer_0_we0 = 1'b1;
    end else begin
        bit128in_buffer_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state12))) begin
        bit128in_buffer_10_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_10_address0 = grp_deAes_return_fu_464_bit128in_buffer_10_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_10_address0 = grp_aes_return_fu_424_bit128in_buffer_10_address0;
    end else begin
        bit128in_buffer_10_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state12)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state34)))) begin
        bit128in_buffer_10_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_10_ce0 = grp_deAes_return_fu_464_bit128in_buffer_10_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_10_ce0 = grp_aes_return_fu_424_bit128in_buffer_10_ce0;
    end else begin
        bit128in_buffer_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state12))) begin
        bit128in_buffer_10_we0 = 1'b1;
    end else begin
        bit128in_buffer_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state13))) begin
        bit128in_buffer_11_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_11_address0 = grp_deAes_return_fu_464_bit128in_buffer_11_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_11_address0 = grp_aes_return_fu_424_bit128in_buffer_11_address0;
    end else begin
        bit128in_buffer_11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state13)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state35)))) begin
        bit128in_buffer_11_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_11_ce0 = grp_deAes_return_fu_464_bit128in_buffer_11_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_11_ce0 = grp_aes_return_fu_424_bit128in_buffer_11_ce0;
    end else begin
        bit128in_buffer_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state13))) begin
        bit128in_buffer_11_we0 = 1'b1;
    end else begin
        bit128in_buffer_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state14))) begin
        bit128in_buffer_12_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_12_address0 = grp_deAes_return_fu_464_bit128in_buffer_12_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_12_address0 = grp_aes_return_fu_424_bit128in_buffer_12_address0;
    end else begin
        bit128in_buffer_12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state14)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state36)))) begin
        bit128in_buffer_12_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_12_ce0 = grp_deAes_return_fu_464_bit128in_buffer_12_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_12_ce0 = grp_aes_return_fu_424_bit128in_buffer_12_ce0;
    end else begin
        bit128in_buffer_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state14))) begin
        bit128in_buffer_12_we0 = 1'b1;
    end else begin
        bit128in_buffer_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state15))) begin
        bit128in_buffer_13_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_13_address0 = grp_deAes_return_fu_464_bit128in_buffer_13_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_13_address0 = grp_aes_return_fu_424_bit128in_buffer_13_address0;
    end else begin
        bit128in_buffer_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state15)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state37)))) begin
        bit128in_buffer_13_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_13_ce0 = grp_deAes_return_fu_464_bit128in_buffer_13_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_13_ce0 = grp_aes_return_fu_424_bit128in_buffer_13_ce0;
    end else begin
        bit128in_buffer_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state15))) begin
        bit128in_buffer_13_we0 = 1'b1;
    end else begin
        bit128in_buffer_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state16))) begin
        bit128in_buffer_14_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_14_address0 = grp_deAes_return_fu_464_bit128in_buffer_14_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_14_address0 = grp_aes_return_fu_424_bit128in_buffer_14_address0;
    end else begin
        bit128in_buffer_14_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state16)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state38)))) begin
        bit128in_buffer_14_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_14_ce0 = grp_deAes_return_fu_464_bit128in_buffer_14_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_14_ce0 = grp_aes_return_fu_424_bit128in_buffer_14_ce0;
    end else begin
        bit128in_buffer_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state16))) begin
        bit128in_buffer_14_we0 = 1'b1;
    end else begin
        bit128in_buffer_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state17))) begin
        bit128in_buffer_15_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_15_address0 = grp_deAes_return_fu_464_bit128in_buffer_15_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_15_address0 = grp_aes_return_fu_424_bit128in_buffer_15_address0;
    end else begin
        bit128in_buffer_15_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (1'b1 == ap_CS_fsm_state17)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state39)))) begin
        bit128in_buffer_15_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_15_ce0 = grp_deAes_return_fu_464_bit128in_buffer_15_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_15_ce0 = grp_aes_return_fu_424_bit128in_buffer_15_ce0;
    end else begin
        bit128in_buffer_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        bit128in_buffer_15_we0 = 1'b1;
    end else begin
        bit128in_buffer_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state3))) begin
        bit128in_buffer_1_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_1_address0 = grp_deAes_return_fu_464_bit128in_buffer_1_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_1_address0 = grp_aes_return_fu_424_bit128in_buffer_1_address0;
    end else begin
        bit128in_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state25)))) begin
        bit128in_buffer_1_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_1_ce0 = grp_deAes_return_fu_464_bit128in_buffer_1_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_1_ce0 = grp_aes_return_fu_424_bit128in_buffer_1_ce0;
    end else begin
        bit128in_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state3))) begin
        bit128in_buffer_1_we0 = 1'b1;
    end else begin
        bit128in_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state4))) begin
        bit128in_buffer_2_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_2_address0 = grp_deAes_return_fu_464_bit128in_buffer_2_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_2_address0 = grp_aes_return_fu_424_bit128in_buffer_2_address0;
    end else begin
        bit128in_buffer_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state26)))) begin
        bit128in_buffer_2_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_2_ce0 = grp_deAes_return_fu_464_bit128in_buffer_2_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_2_ce0 = grp_aes_return_fu_424_bit128in_buffer_2_ce0;
    end else begin
        bit128in_buffer_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state4))) begin
        bit128in_buffer_2_we0 = 1'b1;
    end else begin
        bit128in_buffer_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state5))) begin
        bit128in_buffer_3_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_3_address0 = grp_deAes_return_fu_464_bit128in_buffer_3_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_3_address0 = grp_aes_return_fu_424_bit128in_buffer_3_address0;
    end else begin
        bit128in_buffer_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state27)))) begin
        bit128in_buffer_3_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_3_ce0 = grp_deAes_return_fu_464_bit128in_buffer_3_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_3_ce0 = grp_aes_return_fu_424_bit128in_buffer_3_ce0;
    end else begin
        bit128in_buffer_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state5))) begin
        bit128in_buffer_3_we0 = 1'b1;
    end else begin
        bit128in_buffer_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state6))) begin
        bit128in_buffer_4_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_4_address0 = grp_deAes_return_fu_464_bit128in_buffer_4_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_4_address0 = grp_aes_return_fu_424_bit128in_buffer_4_address0;
    end else begin
        bit128in_buffer_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state28)))) begin
        bit128in_buffer_4_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_4_ce0 = grp_deAes_return_fu_464_bit128in_buffer_4_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_4_ce0 = grp_aes_return_fu_424_bit128in_buffer_4_ce0;
    end else begin
        bit128in_buffer_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state6))) begin
        bit128in_buffer_4_we0 = 1'b1;
    end else begin
        bit128in_buffer_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7))) begin
        bit128in_buffer_5_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_5_address0 = grp_deAes_return_fu_464_bit128in_buffer_5_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_5_address0 = grp_aes_return_fu_424_bit128in_buffer_5_address0;
    end else begin
        bit128in_buffer_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state29)))) begin
        bit128in_buffer_5_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_5_ce0 = grp_deAes_return_fu_464_bit128in_buffer_5_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_5_ce0 = grp_aes_return_fu_424_bit128in_buffer_5_ce0;
    end else begin
        bit128in_buffer_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state7))) begin
        bit128in_buffer_5_we0 = 1'b1;
    end else begin
        bit128in_buffer_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state8))) begin
        bit128in_buffer_6_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_6_address0 = grp_deAes_return_fu_464_bit128in_buffer_6_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_6_address0 = grp_aes_return_fu_424_bit128in_buffer_6_address0;
    end else begin
        bit128in_buffer_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state8)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state30)))) begin
        bit128in_buffer_6_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_6_ce0 = grp_deAes_return_fu_464_bit128in_buffer_6_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_6_ce0 = grp_aes_return_fu_424_bit128in_buffer_6_ce0;
    end else begin
        bit128in_buffer_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state8))) begin
        bit128in_buffer_6_we0 = 1'b1;
    end else begin
        bit128in_buffer_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state9))) begin
        bit128in_buffer_7_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_7_address0 = grp_deAes_return_fu_464_bit128in_buffer_7_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_7_address0 = grp_aes_return_fu_424_bit128in_buffer_7_address0;
    end else begin
        bit128in_buffer_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state31)))) begin
        bit128in_buffer_7_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_7_ce0 = grp_deAes_return_fu_464_bit128in_buffer_7_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_7_ce0 = grp_aes_return_fu_424_bit128in_buffer_7_ce0;
    end else begin
        bit128in_buffer_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state9))) begin
        bit128in_buffer_7_we0 = 1'b1;
    end else begin
        bit128in_buffer_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state10))) begin
        bit128in_buffer_8_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_8_address0 = grp_deAes_return_fu_464_bit128in_buffer_8_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_8_address0 = grp_aes_return_fu_424_bit128in_buffer_8_address0;
    end else begin
        bit128in_buffer_8_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state32)))) begin
        bit128in_buffer_8_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_8_ce0 = grp_deAes_return_fu_464_bit128in_buffer_8_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_8_ce0 = grp_aes_return_fu_424_bit128in_buffer_8_ce0;
    end else begin
        bit128in_buffer_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state10))) begin
        bit128in_buffer_8_we0 = 1'b1;
    end else begin
        bit128in_buffer_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state11))) begin
        bit128in_buffer_9_address0 = 15'd0;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_9_address0 = grp_deAes_return_fu_464_bit128in_buffer_9_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_9_address0 = grp_aes_return_fu_424_bit128in_buffer_9_address0;
    end else begin
        bit128in_buffer_9_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state33)))) begin
        bit128in_buffer_9_ce0 = 1'b1;
    end else if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_9_ce0 = grp_deAes_return_fu_464_bit128in_buffer_9_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        bit128in_buffer_9_ce0 = grp_aes_return_fu_424_bit128in_buffer_9_ce0;
    end else begin
        bit128in_buffer_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
        bit128in_buffer_9_we0 = 1'b1;
    end else begin
        bit128in_buffer_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (1'b1 == ap_CS_fsm_state17))) begin
        key_V_ce0 = 1'b1;
    end else begin
        key_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_char_address0 = zext_ln510_reg_541;
    end else if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        key_char_address0 = grp_extendKey_fu_413_key_address0;
    end else begin
        key_char_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_char_ce0 = 1'b1;
    end else if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        key_char_ce0 = grp_extendKey_fu_413_key_ce0;
    end else begin
        key_char_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        key_char_ce1 = grp_extendKey_fu_413_key_ce1;
    end else begin
        key_char_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        key_char_we0 = 1'b1;
    end else begin
        key_char_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_key_address0 = temp_key_addr_reg_551;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        temp_key_address0 = zext_ln510_fu_504_p1;
    end else begin
        temp_key_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (1'b1 == ap_CS_fsm_state17)))) begin
        temp_key_ce0 = 1'b1;
    end else begin
        temp_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln514_fu_516_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        temp_key_we0 = 1'b1;
    end else begin
        temp_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        w_address0 = grp_deAes_return_fu_464_w_address0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        w_address0 = grp_aes_return_fu_424_w_address0;
    end else if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_address0 = grp_extendKey_fu_413_w_address0;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        w_address1 = grp_deAes_return_fu_464_w_address1;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        w_address1 = grp_aes_return_fu_424_w_address1;
    end else if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_address1 = grp_extendKey_fu_413_w_address1;
    end else begin
        w_address1 = 'bx;
    end
end

always @ (*) begin
    if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        w_ce0 = grp_deAes_return_fu_464_w_ce0;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        w_ce0 = grp_aes_return_fu_424_w_ce0;
    end else if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_ce0 = grp_extendKey_fu_413_w_ce0;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        w_ce1 = grp_deAes_return_fu_464_w_ce1;
    end else if (((op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state22))) begin
        w_ce1 = grp_aes_return_fu_424_w_ce1;
    end else if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_ce1 = grp_extendKey_fu_413_w_ce1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_we0 = grp_extendKey_fu_413_w_we0;
    end else begin
        w_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln521_reg_568 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        w_we1 = grp_extendKey_fu_413_w_we1;
    end else begin
        w_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1)) & (ap_phi_mux_do_init_phi_fu_330_p6 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else if ((~((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1)) & (do_init_reg_325 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln510_reg_564 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b0 == ap_block_state20_on_subcall_done) & (op35_phi_reg_387 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else if (((1'b0 == ap_block_state20_on_subcall_done) & (op35_phi_reg_387 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b0 == ap_block_state22_on_subcall_done) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == TOP_ap_uint_8_ap_uint_8_AES_EN_out_full_n) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state17 = ((do_init_reg_325 == 1'd1) & (1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n));
end

always @ (*) begin
    ap_block_state2 = ((1'b0 == TOP_ap_uint_8_ap_uint_8_in_stream_empty_n) & (do_init_reg_325 == 1'd1));
end

always @ (*) begin
    ap_block_state20_on_subcall_done = ((grp_extendKey_fu_413_ap_done == 1'b0) & (icmp_ln521_reg_568 == 1'd1));
end

always @ (*) begin
    ap_block_state22_on_subcall_done = (((op35_phi_reg_387 == 1'd1) & (grp_deAes_return_fu_464_ap_done == 1'b0)) | ((op35_phi_reg_387 == 1'd0) & (grp_aes_return_fu_424_ap_done == 1'b0)));
end

assign ap_phi_mux_do_init_phi_fu_330_p6 = do_init_reg_325;

assign grp_aes_return_fu_424_ap_start = grp_aes_return_fu_424_ap_start_reg;

assign grp_deAes_return_fu_464_ap_start = grp_deAes_return_fu_464_ap_start_reg;

assign grp_extendKey_fu_413_ap_start = grp_extendKey_fu_413_ap_start_reg;

assign i_fu_510_p2 = (i32_reg_372 + 4'd1);

assign icmp_ln510_fu_522_p2 = ((i32_reg_372 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln514_fu_516_p2 = ((temp_key_q0 == key_V_q0) ? 1'b1 : 1'b0);

assign icmp_ln521_fu_528_p2 = ((key_change_flag_reg_399 == 8'd1) ? 1'b1 : 1'b0);

assign key_V_address0 = zext_ln510_fu_504_p1;

assign zext_ln510_fu_504_p1 = i32_reg_372;

always @ (posedge ap_clk) begin
    zext_ln510_reg_541[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //TOP_AES_En_De
