-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_AES_En_De_128 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_data_full_n : IN STD_LOGIC;
    out_data_write : OUT STD_LOGIC;
    demod_out_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    demod_out_empty_n : IN STD_LOGIC;
    demod_out_read : OUT STD_LOGIC );
end;


architecture behav of TOP_AES_En_De_128 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal key_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_V_ce0 : STD_LOGIC;
    signal key_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal demod_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_phi_mux_do_init_phi_fu_129_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal do_init_reg_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit128in_buffer_reg_714 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_16_reg_719 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_17_reg_724 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_18_reg_729 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_19_reg_734 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_20_reg_739 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_21_reg_744 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_22_reg_749 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_23_reg_754 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_24_reg_759 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_25_reg_764 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_26_reg_769 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_27_reg_774 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_28_reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit128in_buffer_29_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln508_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln508_reg_794 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_key_addr_reg_804 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_688_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_809 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln508_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln508_reg_817 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln519_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln519_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal temp_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_key_ce0 : STD_LOGIC;
    signal temp_key_we0 : STD_LOGIC;
    signal temp_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce0 : STD_LOGIC;
    signal w_we0 : STD_LOGIC;
    signal w_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_ce1 : STD_LOGIC;
    signal w_we1 : STD_LOGIC;
    signal w_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_char_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal key_char_ce0 : STD_LOGIC;
    signal key_char_we0 : STD_LOGIC;
    signal key_char_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_char_ce1 : STD_LOGIC;
    signal key_char_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_extendKey_fu_633_ap_start : STD_LOGIC;
    signal grp_extendKey_fu_633_ap_done : STD_LOGIC;
    signal grp_extendKey_fu_633_ap_idle : STD_LOGIC;
    signal grp_extendKey_fu_633_ap_ready : STD_LOGIC;
    signal grp_extendKey_fu_633_key_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_extendKey_fu_633_key_ce0 : STD_LOGIC;
    signal grp_extendKey_fu_633_key_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_extendKey_fu_633_key_ce1 : STD_LOGIC;
    signal grp_extendKey_fu_633_w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_extendKey_fu_633_w_ce0 : STD_LOGIC;
    signal grp_extendKey_fu_633_w_we0 : STD_LOGIC;
    signal grp_extendKey_fu_633_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_extendKey_fu_633_w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_extendKey_fu_633_w_ce1 : STD_LOGIC;
    signal grp_extendKey_fu_633_w_we1 : STD_LOGIC;
    signal grp_extendKey_fu_633_w_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_deAes_return_fu_643_ap_start : STD_LOGIC;
    signal grp_deAes_return_fu_643_ap_done : STD_LOGIC;
    signal grp_deAes_return_fu_643_ap_idle : STD_LOGIC;
    signal grp_deAes_return_fu_643_ap_ready : STD_LOGIC;
    signal grp_deAes_return_fu_643_w_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_deAes_return_fu_643_w_ce0 : STD_LOGIC;
    signal grp_deAes_return_fu_643_w_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_deAes_return_fu_643_w_ce1 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal p_0_phi_reg_411 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_rewind_reg_141 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_062_phi_reg_424 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_062_rewind_reg_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_061_phi_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_061_rewind_reg_171 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_060_phi_reg_450 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_060_rewind_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_059_phi_reg_463 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_059_rewind_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_058_phi_reg_476 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_058_rewind_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_057_phi_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_057_rewind_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_056_phi_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_056_rewind_reg_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_055_phi_reg_515 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_055_rewind_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_054_phi_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_054_rewind_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_053_phi_reg_541 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_053_rewind_reg_291 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_052_phi_reg_554 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_052_rewind_reg_306 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_051_phi_reg_567 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_051_rewind_reg_321 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_050_phi_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_050_rewind_reg_336 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_049_phi_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_049_rewind_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_048_phi_reg_606 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_048_rewind_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_change_flag17_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal i15_reg_396 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state17 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal key_change_flag_reg_619 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln512_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_extendKey_fu_633_ap_start_reg : STD_LOGIC := '0';
    signal grp_deAes_return_fu_643_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_extendKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        key_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        key_ce1 : OUT STD_LOGIC;
        key_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_we0 : OUT STD_LOGIC;
        w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_we1 : OUT STD_LOGIC;
        w_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_deAes_return IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (7 downto 0);
        w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce0 : OUT STD_LOGIC;
        w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        w_ce1 : OUT STD_LOGIC;
        w_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_AES_En_De27_key_V31_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_AES_En_De27_temp_key_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component TOP_AES_En_De_128_w_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_AES_En_De27_key_char_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    key_V_U : component TOP_AES_En_De27_key_V31_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => key_V_address0,
        ce0 => key_V_ce0,
        q0 => key_V_q0);

    temp_key_U : component TOP_AES_En_De27_temp_key_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_key_address0,
        ce0 => temp_key_ce0,
        we0 => temp_key_we0,
        d0 => key_V_q0,
        q0 => temp_key_q0);

    w_U : component TOP_AES_En_De_128_w_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 44,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_address0,
        ce0 => w_ce0,
        we0 => w_we0,
        d0 => grp_extendKey_fu_633_w_d0,
        q0 => w_q0,
        address1 => w_address1,
        ce1 => w_ce1,
        we1 => w_we1,
        d1 => grp_extendKey_fu_633_w_d1,
        q1 => w_q1);

    key_char_U : component TOP_AES_En_De27_key_char_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => key_char_address0,
        ce0 => key_char_ce0,
        we0 => key_char_we0,
        d0 => key_V_q0,
        q0 => key_char_q0,
        address1 => grp_extendKey_fu_633_key_address1,
        ce1 => key_char_ce1,
        q1 => key_char_q1);

    grp_extendKey_fu_633 : component TOP_extendKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extendKey_fu_633_ap_start,
        ap_done => grp_extendKey_fu_633_ap_done,
        ap_idle => grp_extendKey_fu_633_ap_idle,
        ap_ready => grp_extendKey_fu_633_ap_ready,
        key_address0 => grp_extendKey_fu_633_key_address0,
        key_ce0 => grp_extendKey_fu_633_key_ce0,
        key_q0 => key_char_q0,
        key_address1 => grp_extendKey_fu_633_key_address1,
        key_ce1 => grp_extendKey_fu_633_key_ce1,
        key_q1 => key_char_q1,
        w_address0 => grp_extendKey_fu_633_w_address0,
        w_ce0 => grp_extendKey_fu_633_w_ce0,
        w_we0 => grp_extendKey_fu_633_w_we0,
        w_d0 => grp_extendKey_fu_633_w_d0,
        w_q0 => w_q0,
        w_address1 => grp_extendKey_fu_633_w_address1,
        w_ce1 => grp_extendKey_fu_633_w_ce1,
        w_we1 => grp_extendKey_fu_633_w_we1,
        w_d1 => grp_extendKey_fu_633_w_d1,
        w_q1 => w_q1);

    grp_deAes_return_fu_643 : component TOP_deAes_return
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_deAes_return_fu_643_ap_start,
        ap_done => grp_deAes_return_fu_643_ap_done,
        ap_idle => grp_deAes_return_fu_643_ap_idle,
        ap_ready => grp_deAes_return_fu_643_ap_ready,
        p_read => p_048_phi_reg_606,
        p_read1 => p_049_phi_reg_593,
        p_read2 => p_050_phi_reg_580,
        p_read3 => p_051_phi_reg_567,
        p_read4 => p_052_phi_reg_554,
        p_read5 => p_053_phi_reg_541,
        p_read6 => p_054_phi_reg_528,
        p_read7 => p_055_phi_reg_515,
        p_read8 => p_056_phi_reg_502,
        p_read9 => p_057_phi_reg_489,
        p_read10 => p_058_phi_reg_476,
        p_read11 => p_059_phi_reg_463,
        p_read12 => p_060_phi_reg_450,
        p_read13 => p_061_phi_reg_437,
        p_read14 => p_062_phi_reg_424,
        p_read15 => p_0_phi_reg_411,
        w_address0 => grp_deAes_return_fu_643_w_address0,
        w_ce0 => grp_deAes_return_fu_643_w_ce0,
        w_q0 => w_q0,
        w_address1 => grp_deAes_return_fu_643_w_address1,
        w_ce1 => grp_deAes_return_fu_643_w_ce1,
        w_q1 => w_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_deAes_return_fu_643_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_deAes_return_fu_643_ap_start_reg <= ap_const_logic_0;
            else
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    grp_deAes_return_fu_643_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_deAes_return_fu_643_ap_ready = ap_const_logic_1)) then 
                    grp_deAes_return_fu_643_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_extendKey_fu_633_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extendKey_fu_633_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln519_fu_706_p2 = ap_const_lv1_1) and (icmp_ln508_reg_817 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_extendKey_fu_633_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extendKey_fu_633_ap_ready = ap_const_logic_1)) then 
                    grp_extendKey_fu_633_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    do_init_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln508_reg_817 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                do_init_reg_124 <= ap_const_lv1_0;
            elsif ((((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_124 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i15_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln508_reg_817 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i15_reg_396 <= i_reg_809;
            elsif ((((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i15_reg_396 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    key_change_flag17_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln508_reg_817 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                key_change_flag17_reg_381 <= key_change_flag_reg_619;
            elsif ((((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                key_change_flag17_reg_381 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    key_change_flag_reg_619_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                if ((icmp_ln512_fu_694_p2 = ap_const_lv1_1)) then 
                    key_change_flag_reg_619 <= key_change_flag17_reg_381;
                elsif ((icmp_ln512_fu_694_p2 = ap_const_lv1_0)) then 
                    key_change_flag_reg_619 <= ap_const_lv8_1;
                end if;
            end if; 
        end if;
    end process;

    p_048_phi_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_048_phi_reg_606 <= p_048_rewind_reg_366;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_048_phi_reg_606 <= bit128in_buffer_reg_714;
            end if; 
        end if;
    end process;

    p_049_phi_reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_049_phi_reg_593 <= p_049_rewind_reg_351;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_049_phi_reg_593 <= bit128in_buffer_16_reg_719;
            end if; 
        end if;
    end process;

    p_050_phi_reg_580_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_050_phi_reg_580 <= p_050_rewind_reg_336;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_050_phi_reg_580 <= bit128in_buffer_17_reg_724;
            end if; 
        end if;
    end process;

    p_051_phi_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_051_phi_reg_567 <= p_051_rewind_reg_321;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_051_phi_reg_567 <= bit128in_buffer_18_reg_729;
            end if; 
        end if;
    end process;

    p_052_phi_reg_554_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_052_phi_reg_554 <= p_052_rewind_reg_306;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_052_phi_reg_554 <= bit128in_buffer_19_reg_734;
            end if; 
        end if;
    end process;

    p_053_phi_reg_541_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_053_phi_reg_541 <= p_053_rewind_reg_291;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_053_phi_reg_541 <= bit128in_buffer_20_reg_739;
            end if; 
        end if;
    end process;

    p_054_phi_reg_528_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_054_phi_reg_528 <= p_054_rewind_reg_276;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_054_phi_reg_528 <= bit128in_buffer_21_reg_744;
            end if; 
        end if;
    end process;

    p_055_phi_reg_515_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_055_phi_reg_515 <= p_055_rewind_reg_261;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_055_phi_reg_515 <= bit128in_buffer_22_reg_749;
            end if; 
        end if;
    end process;

    p_056_phi_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_056_phi_reg_502 <= p_056_rewind_reg_246;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_056_phi_reg_502 <= bit128in_buffer_23_reg_754;
            end if; 
        end if;
    end process;

    p_057_phi_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_057_phi_reg_489 <= p_057_rewind_reg_231;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_057_phi_reg_489 <= bit128in_buffer_24_reg_759;
            end if; 
        end if;
    end process;

    p_058_phi_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_058_phi_reg_476 <= p_058_rewind_reg_216;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_058_phi_reg_476 <= bit128in_buffer_25_reg_764;
            end if; 
        end if;
    end process;

    p_059_phi_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_059_phi_reg_463 <= p_059_rewind_reg_201;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_059_phi_reg_463 <= bit128in_buffer_26_reg_769;
            end if; 
        end if;
    end process;

    p_060_phi_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_060_phi_reg_450 <= p_060_rewind_reg_186;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_060_phi_reg_450 <= bit128in_buffer_27_reg_774;
            end if; 
        end if;
    end process;

    p_061_phi_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_061_phi_reg_437 <= p_061_rewind_reg_171;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_061_phi_reg_437 <= bit128in_buffer_28_reg_779;
            end if; 
        end if;
    end process;

    p_062_phi_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_062_phi_reg_424 <= p_062_rewind_reg_156;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_062_phi_reg_424 <= bit128in_buffer_29_reg_784;
            end if; 
        end if;
    end process;

    p_0_phi_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then 
                p_0_phi_reg_411 <= p_0_rewind_reg_141;
            elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                p_0_phi_reg_411 <= demod_out_dout;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bit128in_buffer_16_reg_719 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                bit128in_buffer_17_reg_724 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bit128in_buffer_18_reg_729 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bit128in_buffer_19_reg_734 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                bit128in_buffer_20_reg_739 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                bit128in_buffer_21_reg_744 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                bit128in_buffer_22_reg_749 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                bit128in_buffer_23_reg_754 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                bit128in_buffer_24_reg_759 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                bit128in_buffer_25_reg_764 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                bit128in_buffer_26_reg_769 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                bit128in_buffer_27_reg_774 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                bit128in_buffer_28_reg_779 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                bit128in_buffer_29_reg_784 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (do_init_reg_124 = ap_const_lv1_1))) then
                bit128in_buffer_reg_714 <= demod_out_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_reg_809 <= i_fu_688_p2;
                temp_key_addr_reg_804 <= zext_ln508_fu_682_p1(4 - 1 downto 0);
                    zext_ln508_reg_794(3 downto 0) <= zext_ln508_fu_682_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln508_reg_817 <= icmp_ln508_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln508_reg_817 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                icmp_ln519_reg_821 <= icmp_ln519_fu_706_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln508_reg_817 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                p_048_rewind_reg_366 <= p_048_phi_reg_606;
                p_049_rewind_reg_351 <= p_049_phi_reg_593;
                p_050_rewind_reg_336 <= p_050_phi_reg_580;
                p_051_rewind_reg_321 <= p_051_phi_reg_567;
                p_052_rewind_reg_306 <= p_052_phi_reg_554;
                p_053_rewind_reg_291 <= p_053_phi_reg_541;
                p_054_rewind_reg_276 <= p_054_phi_reg_528;
                p_055_rewind_reg_261 <= p_055_phi_reg_515;
                p_056_rewind_reg_246 <= p_056_phi_reg_502;
                p_057_rewind_reg_231 <= p_057_phi_reg_489;
                p_058_rewind_reg_216 <= p_058_phi_reg_476;
                p_059_rewind_reg_201 <= p_059_phi_reg_463;
                p_060_rewind_reg_186 <= p_060_phi_reg_450;
                p_061_rewind_reg_171 <= p_061_phi_reg_437;
                p_062_rewind_reg_156 <= p_062_phi_reg_424;
                p_0_rewind_reg_141 <= p_0_phi_reg_411;
            end if;
        end if;
    end process;
    zext_ln508_reg_794(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_data_full_n, demod_out_empty_n, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state2, ap_phi_mux_do_init_phi_fu_129_p6, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, do_init_reg_124, icmp_ln508_reg_817, ap_CS_fsm_state19, grp_deAes_return_fu_643_ap_done, ap_block_state20_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_phi_mux_do_init_phi_fu_129_p6 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                elsif ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (do_init_reg_124 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln508_reg_817 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state20 => 
                if ((not(((out_data_full_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((out_data_full_n = ap_const_logic_0) or (grp_deAes_return_fu_643_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(demod_out_empty_n, do_init_reg_124)
    begin
        if (((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(out_data_full_n, ap_block_state20_on_subcall_done)
    begin
        if (((out_data_full_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state21_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(out_data_full_n, grp_deAes_return_fu_643_ap_done)
    begin
        if (((out_data_full_n = ap_const_logic_0) or (grp_deAes_return_fu_643_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state23_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state24_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state24_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state24_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state25_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state25_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state25_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state26_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state26_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state26_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state27_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(demod_out_empty_n, do_init_reg_124)
    begin
        if (((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state30_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state31_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state32_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state33_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state33_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state33_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state34_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(out_data_full_n)
    begin
        if ((out_data_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(demod_out_empty_n)
    begin
        if ((demod_out_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state17_assign_proc : process(demod_out_empty_n, do_init_reg_124)
    begin
                ap_block_state17 <= ((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1));
    end process;


    ap_block_state2_assign_proc : process(demod_out_empty_n, do_init_reg_124)
    begin
                ap_block_state2 <= ((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(icmp_ln519_reg_821, grp_extendKey_fu_633_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_extendKey_fu_633_ap_done = ap_const_logic_0) and (icmp_ln519_reg_821 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_data_full_n, ap_CS_fsm_state35)
    begin
        if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_do_init_phi_fu_129_p6 <= do_init_reg_124;

    ap_ready_assign_proc : process(out_data_full_n, ap_CS_fsm_state35)
    begin
        if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    demod_out_blk_n_assign_proc : process(demod_out_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, do_init_reg_124)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (do_init_reg_124 = ap_const_lv1_1)))) then 
            demod_out_blk_n <= demod_out_empty_n;
        else 
            demod_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    demod_out_read_assign_proc : process(demod_out_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, do_init_reg_124)
    begin
        if ((((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((demod_out_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (do_init_reg_124 = ap_const_lv1_1)) or (not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (do_init_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            demod_out_read <= ap_const_logic_1;
        else 
            demod_out_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_deAes_return_fu_643_ap_start <= grp_deAes_return_fu_643_ap_start_reg;
    grp_extendKey_fu_633_ap_start <= grp_extendKey_fu_633_ap_start_reg;
    i_fu_688_p2 <= std_logic_vector(unsigned(i15_reg_396) + unsigned(ap_const_lv4_1));
    icmp_ln508_fu_700_p2 <= "1" when (i15_reg_396 = ap_const_lv4_F) else "0";
    icmp_ln512_fu_694_p2 <= "1" when (temp_key_q0 = key_V_q0) else "0";
    icmp_ln519_fu_706_p2 <= "1" when (key_change_flag_reg_619 = ap_const_lv8_1) else "0";
    key_V_address0 <= zext_ln508_fu_682_p1(4 - 1 downto 0);

    key_V_ce0_assign_proc : process(demod_out_empty_n, ap_CS_fsm_state17, do_init_reg_124)
    begin
        if ((not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            key_V_ce0 <= ap_const_logic_1;
        else 
            key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_char_address0_assign_proc : process(ap_CS_fsm_state20, zext_ln508_reg_794, ap_CS_fsm_state18, icmp_ln519_reg_821, grp_extendKey_fu_633_key_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_char_address0 <= zext_ln508_reg_794(4 - 1 downto 0);
        elsif (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            key_char_address0 <= grp_extendKey_fu_633_key_address0;
        else 
            key_char_address0 <= "XXXX";
        end if; 
    end process;


    key_char_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state18, icmp_ln519_reg_821, grp_extendKey_fu_633_key_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_char_ce0 <= ap_const_logic_1;
        elsif (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            key_char_ce0 <= grp_extendKey_fu_633_key_ce0;
        else 
            key_char_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_char_ce1_assign_proc : process(ap_CS_fsm_state20, icmp_ln519_reg_821, grp_extendKey_fu_633_key_ce1)
    begin
        if (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            key_char_ce1 <= grp_extendKey_fu_633_key_ce1;
        else 
            key_char_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    key_char_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            key_char_we0 <= ap_const_logic_1;
        else 
            key_char_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_data_blk_n_assign_proc : process(out_data_full_n, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            out_data_blk_n <= out_data_full_n;
        else 
            out_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_data_din_assign_proc : process(out_data_full_n, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, grp_deAes_return_fu_643_ap_done, p_0_phi_reg_411, p_062_phi_reg_424, p_061_phi_reg_437, p_060_phi_reg_450, p_059_phi_reg_463, p_058_phi_reg_476, p_057_phi_reg_489, p_056_phi_reg_502, p_055_phi_reg_515, p_054_phi_reg_528, p_053_phi_reg_541, p_052_phi_reg_554, p_051_phi_reg_567, p_050_phi_reg_580, p_049_phi_reg_593, p_048_phi_reg_606, ap_block_state20_on_subcall_done)
    begin
        if (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            out_data_din <= p_0_phi_reg_411;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            out_data_din <= p_062_phi_reg_424;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            out_data_din <= p_061_phi_reg_437;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            out_data_din <= p_060_phi_reg_450;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            out_data_din <= p_059_phi_reg_463;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            out_data_din <= p_058_phi_reg_476;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            out_data_din <= p_057_phi_reg_489;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            out_data_din <= p_056_phi_reg_502;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            out_data_din <= p_055_phi_reg_515;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            out_data_din <= p_054_phi_reg_528;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            out_data_din <= p_053_phi_reg_541;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            out_data_din <= p_052_phi_reg_554;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            out_data_din <= p_051_phi_reg_567;
        elsif ((not(((out_data_full_n = ap_const_logic_0) or (grp_deAes_return_fu_643_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            out_data_din <= p_050_phi_reg_580;
        elsif (((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_data_din <= p_049_phi_reg_593;
        elsif ((not(((out_data_full_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            out_data_din <= p_048_phi_reg_606;
        else 
            out_data_din <= "XXXXXXXX";
        end if; 
    end process;


    out_data_write_assign_proc : process(out_data_full_n, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, grp_deAes_return_fu_643_ap_done, ap_block_state20_on_subcall_done)
    begin
        if (((not(((out_data_full_n = ap_const_logic_0) or (grp_deAes_return_fu_643_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or (not(((out_data_full_n = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state20_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((out_data_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)))) then 
            out_data_write <= ap_const_logic_1;
        else 
            out_data_write <= ap_const_logic_0;
        end if; 
    end process;


    temp_key_address0_assign_proc : process(ap_CS_fsm_state17, zext_ln508_fu_682_p1, temp_key_addr_reg_804, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_key_address0 <= temp_key_addr_reg_804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_key_address0 <= zext_ln508_fu_682_p1(4 - 1 downto 0);
        else 
            temp_key_address0 <= "XXXX";
        end if; 
    end process;


    temp_key_ce0_assign_proc : process(demod_out_empty_n, ap_CS_fsm_state17, do_init_reg_124, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (not(((demod_out_empty_n = ap_const_logic_0) and (do_init_reg_124 = ap_const_lv1_1))) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            temp_key_ce0 <= ap_const_logic_1;
        else 
            temp_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_key_we0_assign_proc : process(ap_CS_fsm_state18, icmp_ln512_fu_694_p2)
    begin
        if (((icmp_ln512_fu_694_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            temp_key_we0 <= ap_const_logic_1;
        else 
            temp_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln519_reg_821, grp_extendKey_fu_633_w_address0, grp_deAes_return_fu_643_w_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_address0 <= grp_deAes_return_fu_643_w_address0;
        elsif (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_address0 <= grp_extendKey_fu_633_w_address0;
        else 
            w_address0 <= "XXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln519_reg_821, grp_extendKey_fu_633_w_address1, grp_deAes_return_fu_643_w_address1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_address1 <= grp_deAes_return_fu_643_w_address1;
        elsif (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_address1 <= grp_extendKey_fu_633_w_address1;
        else 
            w_address1 <= "XXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln519_reg_821, grp_extendKey_fu_633_w_ce0, grp_deAes_return_fu_643_w_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_ce0 <= grp_deAes_return_fu_643_w_ce0;
        elsif (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_ce0 <= grp_extendKey_fu_633_w_ce0;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state22, icmp_ln519_reg_821, grp_extendKey_fu_633_w_ce1, grp_deAes_return_fu_643_w_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            w_ce1 <= grp_deAes_return_fu_643_w_ce1;
        elsif (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_ce1 <= grp_extendKey_fu_633_w_ce1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_we0_assign_proc : process(ap_CS_fsm_state20, icmp_ln519_reg_821, grp_extendKey_fu_633_w_we0)
    begin
        if (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_we0 <= grp_extendKey_fu_633_w_we0;
        else 
            w_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_we1_assign_proc : process(ap_CS_fsm_state20, icmp_ln519_reg_821, grp_extendKey_fu_633_w_we1)
    begin
        if (((icmp_ln519_reg_821 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            w_we1 <= grp_extendKey_fu_633_w_we1;
        else 
            w_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln508_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i15_reg_396),64));
end behav;
