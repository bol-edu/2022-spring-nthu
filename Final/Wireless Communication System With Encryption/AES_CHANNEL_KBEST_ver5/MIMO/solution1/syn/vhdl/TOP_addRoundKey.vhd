-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_addRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_r_ce0 : OUT STD_LOGIC;
    array_r_we0 : OUT STD_LOGIC;
    array_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_r_ce1 : OUT STD_LOGIC;
    array_r_we1 : OUT STD_LOGIC;
    array_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    round : IN STD_LOGIC_VECTOR (3 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_ce1 : OUT STD_LOGIC;
    w_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of TOP_addRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_324 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal array_addr_reg_536 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_addr_16_reg_541 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_328_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_546 : STD_LOGIC_VECTOR (5 downto 0);
    signal array_addr_17_reg_562 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_addr_18_reg_567 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_572 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln179_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_6_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_6_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_134_fu_376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_134_reg_587 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln95_1_reg_592 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln97_1_reg_597 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln99_1_reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal array_addr_19_reg_617 : STD_LOGIC_VECTOR (3 downto 0);
    signal array_addr_20_reg_622 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_7_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_7_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_8_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_8_reg_632 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_135_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_135_reg_637 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln95_2_reg_642 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln97_2_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_136_fu_423_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_136_reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln95_3_reg_657 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln97_3_reg_662 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln99_3_reg_667 : STD_LOGIC_VECTOR (7 downto 0);
    signal array_addr_21_reg_672 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal array_addr_22_reg_677 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_9_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_9_reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_10_fu_439_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_10_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_23_reg_692 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal array_addr_24_reg_697 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_11_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_11_reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_12_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_12_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_25_reg_712 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal array_addr_26_reg_717 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_13_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_13_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_14_fu_475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_14_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_27_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal array_addr_28_reg_737 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_15_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_15_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_16_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_16_reg_747 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_addr_29_reg_752 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal array_addr_30_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln179_17_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_17_reg_762 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_18_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_18_reg_767 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_19_fu_524_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_19_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal xor_ln179_20_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln179_20_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln174_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_2_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal or_ln176_fu_341_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln95_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln99_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln176_1_fu_380_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln176_2_fu_390_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln101_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln179_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln95_4_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln99_4_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln101_4_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln179_2_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln95_5_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln99_5_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln101_5_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln179_3_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln95_6_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln99_6_fu_503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln101_6_fu_518_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln179_4_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_134_reg_587 <= empty_134_fu_376_p1;
                empty_reg_572 <= empty_fu_352_p1;
                lshr_ln95_1_reg_592 <= w_q0(31 downto 24);
                lshr_ln97_1_reg_597 <= w_q0(23 downto 16);
                lshr_ln99_1_reg_602 <= w_q0(15 downto 8);
                xor_ln179_6_reg_582 <= xor_ln179_6_fu_370_p2;
                xor_ln179_reg_577 <= xor_ln179_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_135_reg_637 <= empty_135_fu_419_p1;
                empty_136_reg_652 <= empty_136_fu_423_p1;
                lshr_ln95_2_reg_642 <= w_q1(31 downto 24);
                lshr_ln95_3_reg_657 <= w_q0(31 downto 24);
                lshr_ln97_2_reg_647 <= w_q1(23 downto 16);
                lshr_ln97_3_reg_662 <= w_q0(23 downto 16);
                lshr_ln99_3_reg_667 <= w_q0(15 downto 8);
                xor_ln179_7_reg_627 <= xor_ln179_7_fu_407_p2;
                xor_ln179_8_reg_632 <= xor_ln179_8_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)))) then
                reg_324 <= w_q1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    shl_ln_reg_546(5 downto 2) <= shl_ln_fu_328_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xor_ln179_10_reg_687 <= xor_ln179_10_fu_439_p2;
                xor_ln179_9_reg_682 <= xor_ln179_9_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                xor_ln179_11_reg_702 <= xor_ln179_11_fu_451_p2;
                xor_ln179_12_reg_707 <= xor_ln179_12_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                xor_ln179_13_reg_722 <= xor_ln179_13_fu_469_p2;
                xor_ln179_14_reg_727 <= xor_ln179_14_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                xor_ln179_15_reg_742 <= xor_ln179_15_fu_488_p2;
                xor_ln179_16_reg_747 <= xor_ln179_16_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                xor_ln179_17_reg_762 <= xor_ln179_17_fu_506_p2;
                xor_ln179_18_reg_767 <= xor_ln179_18_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                xor_ln179_19_reg_772 <= xor_ln179_19_fu_524_p2;
                xor_ln179_20_reg_777 <= xor_ln179_20_fu_530_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_546(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_ce)
    begin
        if (((ap_const_logic_0 = ap_ce) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_ce)
    begin
        if ((ap_const_logic_0 = ap_ce)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_addr_16_reg_541 <= ap_const_lv64_4(4 - 1 downto 0);
    array_addr_17_reg_562 <= ap_const_lv64_8(4 - 1 downto 0);
    array_addr_18_reg_567 <= ap_const_lv64_C(4 - 1 downto 0);
    array_addr_19_reg_617 <= ap_const_lv64_1(4 - 1 downto 0);
    array_addr_20_reg_622 <= ap_const_lv64_5(4 - 1 downto 0);
    array_addr_21_reg_672 <= ap_const_lv64_9(4 - 1 downto 0);
    array_addr_22_reg_677 <= ap_const_lv64_D(4 - 1 downto 0);
    array_addr_23_reg_692 <= ap_const_lv64_2(4 - 1 downto 0);
    array_addr_24_reg_697 <= ap_const_lv64_6(4 - 1 downto 0);
    array_addr_25_reg_712 <= ap_const_lv64_A(4 - 1 downto 0);
    array_addr_26_reg_717 <= ap_const_lv64_E(4 - 1 downto 0);
    array_addr_27_reg_732 <= ap_const_lv64_3(4 - 1 downto 0);
    array_addr_28_reg_737 <= ap_const_lv64_7(4 - 1 downto 0);
    array_addr_29_reg_752 <= ap_const_lv64_B(4 - 1 downto 0);
    array_addr_30_reg_757 <= ap_const_lv64_F(4 - 1 downto 0);
    array_addr_reg_536 <= ap_const_lv64_0(4 - 1 downto 0);

    array_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, array_addr_16_reg_541, array_addr_18_reg_567, array_addr_20_reg_622, ap_CS_fsm_state4, array_addr_22_reg_677, ap_CS_fsm_state5, array_addr_24_reg_697, ap_CS_fsm_state6, array_addr_26_reg_717, ap_CS_fsm_state7, array_addr_28_reg_737, ap_CS_fsm_state8, array_addr_30_reg_757, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_address0 <= array_addr_30_reg_757;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_address0 <= array_addr_28_reg_737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_address0 <= array_addr_26_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_address0 <= array_addr_24_reg_697;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_address0 <= array_addr_22_reg_677;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_address0 <= array_addr_20_reg_622;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_address0 <= array_addr_18_reg_567;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_address0 <= array_addr_16_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_r_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_r_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_r_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            array_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        else 
            array_r_address0 <= "XXXX";
        end if; 
    end process;


    array_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, array_addr_reg_536, array_addr_17_reg_562, array_addr_19_reg_617, array_addr_21_reg_672, ap_CS_fsm_state4, array_addr_23_reg_692, ap_CS_fsm_state5, array_addr_25_reg_712, ap_CS_fsm_state6, array_addr_27_reg_732, ap_CS_fsm_state7, array_addr_29_reg_752, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_address1 <= array_addr_29_reg_752;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_address1 <= array_addr_27_reg_732;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_address1 <= array_addr_25_reg_712;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_address1 <= array_addr_23_reg_692;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_address1 <= array_addr_21_reg_672;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_address1 <= array_addr_19_reg_617;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_address1 <= array_addr_17_reg_562;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_address1 <= array_addr_reg_536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            array_r_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            array_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            array_r_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            array_r_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_r_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            array_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_r_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            array_r_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            array_r_address1 <= "XXXX";
        end if; 
    end process;


    array_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            array_r_ce0 <= ap_const_logic_1;
        else 
            array_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            array_r_ce1 <= ap_const_logic_1;
        else 
            array_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_d0_assign_proc : process(xor_ln179_6_reg_582, xor_ln179_8_reg_632, xor_ln179_10_reg_687, xor_ln179_12_reg_707, xor_ln179_14_reg_727, xor_ln179_16_reg_747, xor_ln179_18_reg_767, ap_CS_fsm_state9, xor_ln179_20_reg_777, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_d0 <= xor_ln179_20_reg_777;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_d0 <= xor_ln179_18_reg_767;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_d0 <= xor_ln179_16_reg_747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_d0 <= xor_ln179_14_reg_727;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_d0 <= xor_ln179_12_reg_707;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_d0 <= xor_ln179_10_reg_687;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_d0 <= xor_ln179_8_reg_632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_d0 <= xor_ln179_6_reg_582;
        else 
            array_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_r_d1_assign_proc : process(xor_ln179_reg_577, xor_ln179_7_reg_627, xor_ln179_9_reg_682, xor_ln179_11_reg_702, xor_ln179_13_reg_722, xor_ln179_15_reg_742, xor_ln179_17_reg_762, xor_ln179_19_reg_772, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            array_r_d1 <= xor_ln179_19_reg_772;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            array_r_d1 <= xor_ln179_17_reg_762;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            array_r_d1 <= xor_ln179_15_reg_742;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            array_r_d1 <= xor_ln179_13_reg_722;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            array_r_d1 <= xor_ln179_11_reg_702;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            array_r_d1 <= xor_ln179_9_reg_682;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            array_r_d1 <= xor_ln179_7_reg_627;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            array_r_d1 <= xor_ln179_reg_577;
        else 
            array_r_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    array_r_we0_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            array_r_we0 <= ap_const_logic_1;
        else 
            array_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    array_r_we1_assign_proc : process(ap_ce, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            array_r_we1 <= ap_const_logic_1;
        else 
            array_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_134_fu_376_p1 <= w_q0(8 - 1 downto 0);
    empty_135_fu_419_p1 <= w_q1(8 - 1 downto 0);
    empty_136_fu_423_p1 <= w_q0(8 - 1 downto 0);
    empty_fu_352_p1 <= w_q1(8 - 1 downto 0);
    grp_fu_264_p4 <= w_q1(31 downto 24);
    grp_fu_274_p4 <= w_q1(23 downto 16);
    or_ln176_1_fu_380_p2 <= (shl_ln_reg_546 or ap_const_lv6_2);
    or_ln176_2_fu_390_p2 <= (shl_ln_reg_546 or ap_const_lv6_3);
    or_ln176_fu_341_p2 <= (shl_ln_fu_328_p3 or ap_const_lv6_1);
    shl_ln_fu_328_p3 <= (round & ap_const_lv2_0);

    w_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln176_fu_347_p1, zext_ln176_2_fu_395_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_address0 <= zext_ln176_2_fu_395_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            w_address0 <= zext_ln176_fu_347_p1(6 - 1 downto 0);
        else 
            w_address0 <= "XXXXXX";
        end if; 
    end process;


    w_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, zext_ln174_fu_336_p1, zext_ln176_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            w_address1 <= zext_ln176_1_fu_385_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            w_address1 <= zext_ln174_fu_336_p1(6 - 1 downto 0);
        else 
            w_address1 <= "XXXXXX";
        end if; 
    end process;


    w_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_1 = ap_ce)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            w_ce1 <= ap_const_logic_1;
        else 
            w_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln179_10_fu_439_p2 <= (zext_ln99_4_fu_430_p1 xor array_r_q0);
    xor_ln179_11_fu_451_p2 <= (zext_ln101_4_fu_445_p1 xor array_r_q1);
    xor_ln179_12_fu_457_p2 <= (zext_ln179_2_fu_448_p1 xor array_r_q0);
    xor_ln179_13_fu_469_p2 <= (zext_ln95_5_fu_463_p1 xor array_r_q1);
    xor_ln179_14_fu_475_p2 <= (zext_ln99_5_fu_466_p1 xor array_r_q0);
    xor_ln179_15_fu_488_p2 <= (zext_ln101_5_fu_481_p1 xor array_r_q1);
    xor_ln179_16_fu_494_p2 <= (zext_ln179_3_fu_485_p1 xor array_r_q0);
    xor_ln179_17_fu_506_p2 <= (zext_ln95_6_fu_500_p1 xor array_r_q1);
    xor_ln179_18_fu_512_p2 <= (zext_ln99_6_fu_503_p1 xor array_r_q0);
    xor_ln179_19_fu_524_p2 <= (zext_ln101_6_fu_518_p1 xor array_r_q1);
    xor_ln179_20_fu_530_p2 <= (zext_ln179_4_fu_521_p1 xor array_r_q0);
    xor_ln179_6_fu_370_p2 <= (zext_ln99_fu_360_p1 xor array_r_q0);
    xor_ln179_7_fu_407_p2 <= (zext_ln101_fu_400_p1 xor array_r_q1);
    xor_ln179_8_fu_413_p2 <= (zext_ln179_fu_404_p1 xor array_r_q0);
    xor_ln179_9_fu_433_p2 <= (zext_ln95_4_fu_427_p1 xor array_r_q1);
    xor_ln179_fu_364_p2 <= (zext_ln95_fu_356_p1 xor array_r_q1);
    zext_ln101_4_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln99_1_reg_602),32));
    zext_ln101_5_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),32));
    zext_ln101_6_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln99_3_reg_667),32));
    zext_ln101_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_324),32));
    zext_ln174_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_328_p3),64));
    zext_ln176_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln176_1_fu_380_p2),64));
    zext_ln176_2_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln176_2_fu_390_p2),64));
    zext_ln176_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln176_fu_341_p2),64));
    zext_ln179_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_134_reg_587),32));
    zext_ln179_3_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_135_reg_637),32));
    zext_ln179_4_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_136_reg_652),32));
    zext_ln179_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_572),32));
    zext_ln95_4_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln95_1_reg_592),32));
    zext_ln95_5_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln95_2_reg_642),32));
    zext_ln95_6_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln95_3_reg_657),32));
    zext_ln95_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_264_p4),32));
    zext_ln99_4_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln97_1_reg_597),32));
    zext_ln99_5_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln97_2_reg_647),32));
    zext_ln99_6_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln97_3_reg_662),32));
    zext_ln99_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_274_p4),32));
end behav;
