-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_KBEST_Pipeline_VITIS_LOOP_94_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    survival_path_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    survival_path_ce0 : OUT STD_LOGIC;
    survival_path_we0 : OUT STD_LOGIC;
    survival_path_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    survival_path_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    survival_path_ce1 : OUT STD_LOGIC;
    survival_path_we1 : OUT STD_LOGIC;
    survival_path_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_guess_62 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_51 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_50 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_49 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_48 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_47 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_46 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_52 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_63 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_58 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_57 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_56 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_55 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_54 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_53 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_guess_59 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of TOP_KBEST_Pipeline_VITIS_LOOP_94_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln94_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_30_cast_i_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln97_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln94_fu_203_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_107_i_fu_225_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_i_fu_248_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln97_fu_214_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_mux_84_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_84_32_1_1_U1290 : component TOP_mux_84_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => x_guess_62,
        din1 => x_guess_51,
        din2 => x_guess_50,
        din3 => x_guess_49,
        din4 => x_guess_48,
        din5 => x_guess_47,
        din6 => x_guess_46,
        din7 => x_guess_52,
        din8 => ap_sig_allocacmp_i_23,
        dout => tmp_107_i_fu_225_p10);

    mux_84_32_1_1_U1291 : component TOP_mux_84_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => x_guess_63,
        din1 => x_guess_58,
        din2 => x_guess_57,
        din3 => x_guess_56,
        din4 => x_guess_55,
        din5 => x_guess_54,
        din6 => x_guess_53,
        din7 => x_guess_59,
        din8 => ap_sig_allocacmp_i_23,
        dout => tmp_108_i_fu_248_p10);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln94_fu_197_p2 = ap_const_lv1_0)) then 
                    i_fu_64 <= add_ln94_fu_203_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_64 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln94_fu_203_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_23) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln94_fu_197_p2, ap_start_int)
    begin
        if (((icmp_ln94_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_23_assign_proc : process(ap_CS_fsm_state1, i_fu_64, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_23 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_23 <= i_fu_64;
        end if; 
    end process;

    i_30_cast_i_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_23),64));
    icmp_ln94_fu_197_p2 <= "1" when (ap_sig_allocacmp_i_23 = ap_const_lv4_8) else "0";
    survival_path_address0 <= zext_ln97_fu_220_p1(4 - 1 downto 0);
    survival_path_address1 <= i_30_cast_i_fu_209_p1(4 - 1 downto 0);

    survival_path_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            survival_path_ce0 <= ap_const_logic_1;
        else 
            survival_path_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    survival_path_ce1_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            survival_path_ce1 <= ap_const_logic_1;
        else 
            survival_path_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    survival_path_d0 <= tmp_108_i_fu_248_p10;
    survival_path_d1 <= tmp_107_i_fu_225_p10;

    survival_path_we0_assign_proc : process(ap_CS_fsm_state1, icmp_ln94_fu_197_p2, ap_start_int)
    begin
        if (((icmp_ln94_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            survival_path_we0 <= ap_const_logic_1;
        else 
            survival_path_we0 <= ap_const_logic_0;
        end if; 
    end process;


    survival_path_we1_assign_proc : process(ap_CS_fsm_state1, icmp_ln94_fu_197_p2, ap_start_int)
    begin
        if (((icmp_ln94_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            survival_path_we1 <= ap_const_logic_1;
        else 
            survival_path_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln97_fu_214_p2 <= (ap_sig_allocacmp_i_23 xor ap_const_lv4_8);
    zext_ln97_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln97_fu_214_p2),64));
end behav;
