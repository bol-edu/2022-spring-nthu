-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP_QRD_Pipeline_VITIS_LOOP_325_9_VITIS_LOOP_326_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    Q_full_n : IN STD_LOGIC;
    Q_write : OUT STD_LOGIC;
    conv_i_i_i1582975_lcssa1488_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491263_lcssa1632_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161295_lcssa1648_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831327_lcssa1664_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501359_lcssa1680_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171391_lcssa1696_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841423_lcssa1712_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511455_lcssa1728_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1582979_lcssa1490_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491267_lcssa1634_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161299_lcssa1650_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831331_lcssa1666_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501363_lcssa1682_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171395_lcssa1698_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841427_lcssa1714_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511459_lcssa1730_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1582983_lcssa1492_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491271_lcssa1636_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161303_lcssa1652_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831335_lcssa1668_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501367_lcssa1684_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171399_lcssa1700_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841431_lcssa1716_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511463_lcssa1732_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1582987_lcssa1494_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491275_lcssa1638_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161307_lcssa1654_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831339_lcssa1670_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501371_lcssa1686_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171403_lcssa1702_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841435_lcssa1718_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511467_lcssa1734_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1582991_lcssa1496_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491279_lcssa1640_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161311_lcssa1656_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831343_lcssa1672_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501375_lcssa1688_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171407_lcssa1704_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841439_lcssa1720_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511471_lcssa1736_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1582995_lcssa1498_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491283_lcssa1642_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161315_lcssa1658_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831347_lcssa1674_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501379_lcssa1690_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171411_lcssa1706_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841443_lcssa1722_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511475_lcssa1738_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i1582999_lcssa1500_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491287_lcssa1644_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161319_lcssa1660_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831351_lcssa1676_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501383_lcssa1692_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171415_lcssa1708_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841447_lcssa1724_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511479_lcssa1740_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15821003_lcssa1502_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15491291_lcssa1646_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i15161323_lcssa1662_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14831355_lcssa1678_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14501387_lcssa1694_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i14171419_lcssa1710_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13841451_lcssa1726_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_i13511483_lcssa1742_i : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_1_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_2_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_3_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_4_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_5_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_6_load_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    Y_V_7_load_7 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of TOP_QRD_Pipeline_VITIS_LOOP_325_9_VITIS_LOOP_326_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln325_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Q_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln118_fu_1147_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln118_reg_2258_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_fu_1155_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln325_reg_2269_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln326_fu_1215_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_316 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_fu_320 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln325_1_fu_1123_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten7_load : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln326_fu_1141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln325_fu_1135_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1091_i_fu_1185_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1091_i_fu_1185_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_79_i_fu_1163_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_1_i_fu_1249_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_i_fu_1236_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_2_i_fu_1283_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_81_i_fu_1270_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1603_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_1317_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_3_i_fu_1334_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_i_fu_1304_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_130_fu_1368_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1610_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_130_fu_1368_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_4_i_fu_1385_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_i_fu_1355_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_131_fu_1419_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1619_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_131_fu_1419_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_5_i_fu_1436_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_i_fu_1406_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_132_fu_1470_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1628_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_132_fu_1470_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_6_i_fu_1487_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_101_i_fu_1457_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_133_fu_1521_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1637_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_133_fu_1521_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_7_i_fu_1538_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_102_i_fu_1508_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_134_fu_1559_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1646_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_134_fu_1559_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_135_fu_1576_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1655_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_135_fu_1576_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_fu_1593_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1664_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1610_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1619_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1628_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1637_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1646_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1655_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1664_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1603_ce : STD_LOGIC;
    signal grp_fu_1610_ce : STD_LOGIC;
    signal grp_fu_1619_ce : STD_LOGIC;
    signal grp_fu_1628_ce : STD_LOGIC;
    signal grp_fu_1637_ce : STD_LOGIC;
    signal grp_fu_1646_ce : STD_LOGIC;
    signal grp_fu_1655_ce : STD_LOGIC;
    signal grp_fu_1664_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_mux_84_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component TOP_mul_mul_16s_16s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component TOP_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component TOP_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_84_16_1_1_U574 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582975_lcssa1488_i,
        din1 => conv_i_i_i15491263_lcssa1632_i,
        din2 => conv_i_i_i15161295_lcssa1648_i,
        din3 => conv_i_i_i14831327_lcssa1664_i,
        din4 => conv_i_i_i14501359_lcssa1680_i,
        din5 => conv_i_i_i14171391_lcssa1696_i,
        din6 => conv_i_i_i13841423_lcssa1712_i,
        din7 => conv_i_i_i13511455_lcssa1728_i,
        din8 => select_ln118_fu_1147_p3,
        dout => tmp_79_i_fu_1163_p10);

    mux_84_16_1_1_U575 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load,
        din1 => Y_V_1_load,
        din2 => Y_V_2_load,
        din3 => Y_V_3_load,
        din4 => Y_V_4_load,
        din5 => Y_V_5_load,
        din6 => Y_V_6_load,
        din7 => Y_V_7_load,
        din8 => tmp_1091_i_fu_1185_p9,
        dout => tmp_1091_i_fu_1185_p10);

    mux_84_16_1_1_U576 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582979_lcssa1490_i,
        din1 => conv_i_i_i15491267_lcssa1634_i,
        din2 => conv_i_i_i15161299_lcssa1650_i,
        din3 => conv_i_i_i14831331_lcssa1666_i,
        din4 => conv_i_i_i14501363_lcssa1682_i,
        din5 => conv_i_i_i14171395_lcssa1698_i,
        din6 => conv_i_i_i13841427_lcssa1714_i,
        din7 => conv_i_i_i13511459_lcssa1730_i,
        din8 => select_ln118_reg_2258,
        dout => tmp_80_i_fu_1236_p10);

    mux_84_16_1_1_U577 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_1,
        din1 => Y_V_1_load_1,
        din2 => Y_V_2_load_1,
        din3 => Y_V_3_load_1,
        din4 => Y_V_4_load_1,
        din5 => Y_V_5_load_1,
        din6 => Y_V_6_load_1,
        din7 => Y_V_7_load_1,
        din8 => select_ln325_reg_2269,
        dout => tmp_109_1_i_fu_1249_p10);

    mux_84_16_1_1_U578 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582983_lcssa1492_i,
        din1 => conv_i_i_i15491271_lcssa1636_i,
        din2 => conv_i_i_i15161303_lcssa1652_i,
        din3 => conv_i_i_i14831335_lcssa1668_i,
        din4 => conv_i_i_i14501367_lcssa1684_i,
        din5 => conv_i_i_i14171399_lcssa1700_i,
        din6 => conv_i_i_i13841431_lcssa1716_i,
        din7 => conv_i_i_i13511463_lcssa1732_i,
        din8 => select_ln118_reg_2258_pp0_iter1_reg,
        dout => tmp_81_i_fu_1270_p10);

    mux_84_16_1_1_U579 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_2,
        din1 => Y_V_1_load_2,
        din2 => Y_V_2_load_2,
        din3 => Y_V_3_load_2,
        din4 => Y_V_4_load_2,
        din5 => Y_V_5_load_2,
        din6 => Y_V_6_load_2,
        din7 => Y_V_7_load_2,
        din8 => select_ln325_reg_2269_pp0_iter1_reg,
        dout => tmp_109_2_i_fu_1283_p10);

    mux_84_16_1_1_U580 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582987_lcssa1494_i,
        din1 => conv_i_i_i15491275_lcssa1638_i,
        din2 => conv_i_i_i15161307_lcssa1654_i,
        din3 => conv_i_i_i14831339_lcssa1670_i,
        din4 => conv_i_i_i14501371_lcssa1686_i,
        din5 => conv_i_i_i14171403_lcssa1702_i,
        din6 => conv_i_i_i13841435_lcssa1718_i,
        din7 => conv_i_i_i13511467_lcssa1734_i,
        din8 => select_ln118_reg_2258_pp0_iter2_reg,
        dout => tmp_82_i_fu_1304_p10);

    mux_84_16_1_1_U581 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_3,
        din1 => Y_V_1_load_3,
        din2 => Y_V_2_load_3,
        din3 => Y_V_3_load_3,
        din4 => Y_V_4_load_3,
        din5 => Y_V_5_load_3,
        din6 => Y_V_6_load_3,
        din7 => Y_V_7_load_3,
        din8 => select_ln325_reg_2269_pp0_iter2_reg,
        dout => tmp_109_3_i_fu_1334_p10);

    mux_84_16_1_1_U582 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582991_lcssa1496_i,
        din1 => conv_i_i_i15491279_lcssa1640_i,
        din2 => conv_i_i_i15161311_lcssa1656_i,
        din3 => conv_i_i_i14831343_lcssa1672_i,
        din4 => conv_i_i_i14501375_lcssa1688_i,
        din5 => conv_i_i_i14171407_lcssa1704_i,
        din6 => conv_i_i_i13841439_lcssa1720_i,
        din7 => conv_i_i_i13511471_lcssa1736_i,
        din8 => select_ln118_reg_2258_pp0_iter3_reg,
        dout => tmp_83_i_fu_1355_p10);

    mux_84_16_1_1_U583 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_4,
        din1 => Y_V_1_load_4,
        din2 => Y_V_2_load_4,
        din3 => Y_V_3_load_4,
        din4 => Y_V_4_load_4,
        din5 => Y_V_5_load_4,
        din6 => Y_V_6_load_4,
        din7 => Y_V_7_load_4,
        din8 => select_ln325_reg_2269_pp0_iter3_reg,
        dout => tmp_109_4_i_fu_1385_p10);

    mux_84_16_1_1_U584 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582995_lcssa1498_i,
        din1 => conv_i_i_i15491283_lcssa1642_i,
        din2 => conv_i_i_i15161315_lcssa1658_i,
        din3 => conv_i_i_i14831347_lcssa1674_i,
        din4 => conv_i_i_i14501379_lcssa1690_i,
        din5 => conv_i_i_i14171411_lcssa1706_i,
        din6 => conv_i_i_i13841443_lcssa1722_i,
        din7 => conv_i_i_i13511475_lcssa1738_i,
        din8 => select_ln118_reg_2258_pp0_iter4_reg,
        dout => tmp_84_i_fu_1406_p10);

    mux_84_16_1_1_U585 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_5,
        din1 => Y_V_1_load_5,
        din2 => Y_V_2_load_5,
        din3 => Y_V_3_load_5,
        din4 => Y_V_4_load_5,
        din5 => Y_V_5_load_5,
        din6 => Y_V_6_load_5,
        din7 => Y_V_7_load_5,
        din8 => select_ln325_reg_2269_pp0_iter4_reg,
        dout => tmp_109_5_i_fu_1436_p10);

    mux_84_16_1_1_U586 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i1582999_lcssa1500_i,
        din1 => conv_i_i_i15491287_lcssa1644_i,
        din2 => conv_i_i_i15161319_lcssa1660_i,
        din3 => conv_i_i_i14831351_lcssa1676_i,
        din4 => conv_i_i_i14501383_lcssa1692_i,
        din5 => conv_i_i_i14171415_lcssa1708_i,
        din6 => conv_i_i_i13841447_lcssa1724_i,
        din7 => conv_i_i_i13511479_lcssa1740_i,
        din8 => select_ln118_reg_2258_pp0_iter5_reg,
        dout => tmp_101_i_fu_1457_p10);

    mux_84_16_1_1_U587 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_6,
        din1 => Y_V_1_load_6,
        din2 => Y_V_2_load_6,
        din3 => Y_V_3_load_6,
        din4 => Y_V_4_load_6,
        din5 => Y_V_5_load_6,
        din6 => Y_V_6_load_6,
        din7 => Y_V_7_load_6,
        din8 => select_ln325_reg_2269_pp0_iter5_reg,
        dout => tmp_109_6_i_fu_1487_p10);

    mux_84_16_1_1_U588 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => conv_i_i_i15821003_lcssa1502_i,
        din1 => conv_i_i_i15491291_lcssa1646_i,
        din2 => conv_i_i_i15161323_lcssa1662_i,
        din3 => conv_i_i_i14831355_lcssa1678_i,
        din4 => conv_i_i_i14501387_lcssa1694_i,
        din5 => conv_i_i_i14171419_lcssa1710_i,
        din6 => conv_i_i_i13841451_lcssa1726_i,
        din7 => conv_i_i_i13511483_lcssa1742_i,
        din8 => select_ln118_reg_2258_pp0_iter6_reg,
        dout => tmp_102_i_fu_1508_p10);

    mux_84_16_1_1_U589 : component TOP_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => Y_V_load_7,
        din1 => Y_V_1_load_7,
        din2 => Y_V_2_load_7,
        din3 => Y_V_3_load_7,
        din4 => Y_V_4_load_7,
        din5 => Y_V_5_load_7,
        din6 => Y_V_6_load_7,
        din7 => Y_V_7_load_7,
        din8 => select_ln325_reg_2269_pp0_iter6_reg,
        dout => tmp_109_7_i_fu_1538_p10);

    mul_mul_16s_16s_24_4_1_U590 : component TOP_mul_mul_16s_16s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_79_i_fu_1163_p10,
        din1 => tmp_1091_i_fu_1185_p10,
        ce => grp_fu_1603_ce,
        dout => grp_fu_1603_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U591 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_80_i_fu_1236_p10,
        din1 => tmp_109_1_i_fu_1249_p10,
        din2 => grp_fu_1610_p2,
        ce => grp_fu_1610_ce,
        dout => grp_fu_1610_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U592 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_81_i_fu_1270_p10,
        din1 => tmp_109_2_i_fu_1283_p10,
        din2 => grp_fu_1619_p2,
        ce => grp_fu_1619_ce,
        dout => grp_fu_1619_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U593 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_82_i_fu_1304_p10,
        din1 => tmp_109_3_i_fu_1334_p10,
        din2 => grp_fu_1628_p2,
        ce => grp_fu_1628_ce,
        dout => grp_fu_1628_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U594 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_83_i_fu_1355_p10,
        din1 => tmp_109_4_i_fu_1385_p10,
        din2 => grp_fu_1637_p2,
        ce => grp_fu_1637_ce,
        dout => grp_fu_1637_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U595 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_84_i_fu_1406_p10,
        din1 => tmp_109_5_i_fu_1436_p10,
        din2 => grp_fu_1646_p2,
        ce => grp_fu_1646_ce,
        dout => grp_fu_1646_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U596 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_101_i_fu_1457_p10,
        din1 => tmp_109_6_i_fu_1487_p10,
        din2 => grp_fu_1655_p2,
        ce => grp_fu_1655_ce,
        dout => grp_fu_1655_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U597 : component TOP_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_102_i_fu_1508_p10,
        din1 => tmp_109_7_i_fu_1538_p10,
        din2 => grp_fu_1664_p2,
        ce => grp_fu_1664_ce,
        dout => grp_fu_1664_p3);

    flow_control_loop_pipe_sequential_init_U : component TOP_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln325_fu_1117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_316 <= select_ln325_fu_1155_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_316 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten7_fu_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln325_fu_1117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten7_fu_320 <= add_ln325_1_fu_1123_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten7_fu_320 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln325_fu_1117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_312 <= add_ln326_fu_1215_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_312 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln118_reg_2258_pp0_iter1_reg <= select_ln118_reg_2258;
                select_ln325_reg_2269_pp0_iter1_reg <= select_ln325_reg_2269;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                select_ln118_reg_2258_pp0_iter2_reg <= select_ln118_reg_2258_pp0_iter1_reg;
                select_ln118_reg_2258_pp0_iter3_reg <= select_ln118_reg_2258_pp0_iter2_reg;
                select_ln118_reg_2258_pp0_iter4_reg <= select_ln118_reg_2258_pp0_iter3_reg;
                select_ln118_reg_2258_pp0_iter5_reg <= select_ln118_reg_2258_pp0_iter4_reg;
                select_ln118_reg_2258_pp0_iter6_reg <= select_ln118_reg_2258_pp0_iter5_reg;
                select_ln325_reg_2269_pp0_iter2_reg <= select_ln325_reg_2269_pp0_iter1_reg;
                select_ln325_reg_2269_pp0_iter3_reg <= select_ln325_reg_2269_pp0_iter2_reg;
                select_ln325_reg_2269_pp0_iter4_reg <= select_ln325_reg_2269_pp0_iter3_reg;
                select_ln325_reg_2269_pp0_iter5_reg <= select_ln325_reg_2269_pp0_iter4_reg;
                select_ln325_reg_2269_pp0_iter6_reg <= select_ln325_reg_2269_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln325_fu_1117_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln118_reg_2258 <= select_ln118_fu_1147_p3;
                select_ln325_reg_2269 <= select_ln325_fu_1155_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    Q_blk_n_assign_proc : process(ap_enable_reg_pp0_iter10, Q_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            Q_blk_n <= Q_full_n;
        else 
            Q_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Q_din <= p_0_fu_1593_p1(23 downto 8);

    Q_write_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            Q_write <= ap_const_logic_1;
        else 
            Q_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln325_1_fu_1123_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten7_load) + unsigned(ap_const_lv7_1));
    add_ln325_fu_1135_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln326_fu_1215_p2 <= std_logic_vector(unsigned(select_ln118_fu_1147_p3) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter10, Q_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_0 = Q_full_n));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter10, Q_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_0 = Q_full_n));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter10, Q_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_0 = Q_full_n));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter10_assign_proc : process(Q_full_n)
    begin
                ap_block_state11_pp0_stage0_iter10 <= (ap_const_logic_0 = Q_full_n);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln325_fu_1117_p2)
    begin
        if (((icmp_ln325_fu_1117_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_316)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_316;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten7_fu_320)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten7_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten7_load <= indvar_flatten7_fu_320;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_312, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_312;
        end if; 
    end process;


    grp_fu_1603_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1603_ce <= ap_const_logic_1;
        else 
            grp_fu_1603_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1610_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1610_ce <= ap_const_logic_1;
        else 
            grp_fu_1610_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1610_p2 <= (tmp_s_fu_1317_p4 & ap_const_lv8_0);

    grp_fu_1619_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1619_ce <= ap_const_logic_1;
        else 
            grp_fu_1619_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1619_p2 <= (tmp_130_fu_1368_p4 & ap_const_lv8_0);

    grp_fu_1628_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1628_ce <= ap_const_logic_1;
        else 
            grp_fu_1628_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1628_p2 <= (tmp_131_fu_1419_p4 & ap_const_lv8_0);

    grp_fu_1637_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1637_ce <= ap_const_logic_1;
        else 
            grp_fu_1637_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1637_p2 <= (tmp_132_fu_1470_p4 & ap_const_lv8_0);

    grp_fu_1646_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1646_ce <= ap_const_logic_1;
        else 
            grp_fu_1646_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1646_p2 <= (tmp_133_fu_1521_p4 & ap_const_lv8_0);

    grp_fu_1655_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1655_ce <= ap_const_logic_1;
        else 
            grp_fu_1655_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1655_p2 <= (tmp_134_fu_1559_p4 & ap_const_lv8_0);

    grp_fu_1664_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1664_ce <= ap_const_logic_1;
        else 
            grp_fu_1664_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1664_p2 <= (tmp_135_fu_1576_p4 & ap_const_lv8_0);
    icmp_ln325_fu_1117_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten7_load = ap_const_lv7_40) else "0";
    icmp_ln326_fu_1141_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    p_0_fu_1593_p1 <= grp_fu_1664_p3;
    select_ln118_fu_1147_p3 <= 
        ap_const_lv4_0 when (icmp_ln326_fu_1141_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln325_fu_1155_p3 <= 
        add_ln325_fu_1135_p2 when (icmp_ln326_fu_1141_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    tmp_1091_i_fu_1185_p9 <= 
        add_ln325_fu_1135_p2 when (icmp_ln326_fu_1141_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    tmp_130_fu_1368_p1 <= grp_fu_1610_p3;
    tmp_130_fu_1368_p4 <= tmp_130_fu_1368_p1(23 downto 8);
    tmp_131_fu_1419_p1 <= grp_fu_1619_p3;
    tmp_131_fu_1419_p4 <= tmp_131_fu_1419_p1(23 downto 8);
    tmp_132_fu_1470_p1 <= grp_fu_1628_p3;
    tmp_132_fu_1470_p4 <= tmp_132_fu_1470_p1(23 downto 8);
    tmp_133_fu_1521_p1 <= grp_fu_1637_p3;
    tmp_133_fu_1521_p4 <= tmp_133_fu_1521_p1(23 downto 8);
    tmp_134_fu_1559_p1 <= grp_fu_1646_p3;
    tmp_134_fu_1559_p4 <= tmp_134_fu_1559_p1(23 downto 8);
    tmp_135_fu_1576_p1 <= grp_fu_1655_p3;
    tmp_135_fu_1576_p4 <= tmp_135_fu_1576_p1(23 downto 8);
    tmp_s_fu_1317_p4 <= grp_fu_1603_p2(23 downto 8);
end behav;
