-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TOP is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    in_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_data_empty_n : IN STD_LOGIC;
    in_data_read : OUT STD_LOGIC;
    out_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_data_full_n : IN STD_LOGIC;
    out_data_write : OUT STD_LOGIC;
    SNR : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of TOP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TOP_TOP,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=27.335000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=79068,HLS_SYN_LUT=187333,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_SNR_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal entry_proc_U0_SNR_c_write : STD_LOGIC;
    signal AES_En_De27_U0_ap_start : STD_LOGIC;
    signal AES_En_De27_U0_ap_done : STD_LOGIC;
    signal AES_En_De27_U0_ap_continue : STD_LOGIC;
    signal AES_En_De27_U0_ap_idle : STD_LOGIC;
    signal AES_En_De27_U0_ap_ready : STD_LOGIC;
    signal AES_En_De27_U0_start_out : STD_LOGIC;
    signal AES_En_De27_U0_start_write : STD_LOGIC;
    signal AES_En_De27_U0_in_data_read : STD_LOGIC;
    signal AES_En_De27_U0_AES_EN_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AES_En_De27_U0_AES_EN_out_write : STD_LOGIC;
    signal Modulation_U0_ap_start : STD_LOGIC;
    signal Modulation_U0_ap_done : STD_LOGIC;
    signal Modulation_U0_ap_continue : STD_LOGIC;
    signal Modulation_U0_ap_idle : STD_LOGIC;
    signal Modulation_U0_ap_ready : STD_LOGIC;
    signal Modulation_U0_AES_EN_out_read : STD_LOGIC;
    signal Modulation_U0_xr_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Modulation_U0_xr_write : STD_LOGIC;
    signal Modulation_U0_xi_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Modulation_U0_xi_write : STD_LOGIC;
    signal Modulation_U0_start_out : STD_LOGIC;
    signal Modulation_U0_start_write : STD_LOGIC;
    signal Rayleigh_1_U0_ap_start : STD_LOGIC;
    signal Rayleigh_1_U0_start_full_n : STD_LOGIC;
    signal Rayleigh_1_U0_ap_done : STD_LOGIC;
    signal Rayleigh_1_U0_ap_continue : STD_LOGIC;
    signal Rayleigh_1_U0_ap_idle : STD_LOGIC;
    signal Rayleigh_1_U0_ap_ready : STD_LOGIC;
    signal Rayleigh_1_U0_start_out : STD_LOGIC;
    signal Rayleigh_1_U0_start_write : STD_LOGIC;
    signal Rayleigh_1_U0_H_real_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Rayleigh_1_U0_H_real_write : STD_LOGIC;
    signal Rayleigh_1_U0_H_imag_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Rayleigh_1_U0_H_imag_write : STD_LOGIC;
    signal split_U0_ap_start : STD_LOGIC;
    signal split_U0_ap_done : STD_LOGIC;
    signal split_U0_ap_continue : STD_LOGIC;
    signal split_U0_ap_idle : STD_LOGIC;
    signal split_U0_ap_ready : STD_LOGIC;
    signal split_U0_H_real_read : STD_LOGIC;
    signal split_U0_H_real_spl0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_U0_H_real_spl0_write : STD_LOGIC;
    signal split_U0_H_real_spl1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_U0_H_real_spl1_write : STD_LOGIC;
    signal split_U0_start_out : STD_LOGIC;
    signal split_U0_start_write : STD_LOGIC;
    signal split_1_U0_ap_start : STD_LOGIC;
    signal split_1_U0_ap_done : STD_LOGIC;
    signal split_1_U0_ap_continue : STD_LOGIC;
    signal split_1_U0_ap_idle : STD_LOGIC;
    signal split_1_U0_ap_ready : STD_LOGIC;
    signal split_1_U0_H_imag_read : STD_LOGIC;
    signal split_1_U0_H_imag_spl0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_1_U0_H_imag_spl0_write : STD_LOGIC;
    signal split_1_U0_H_imag_spl1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal split_1_U0_H_imag_spl1_write : STD_LOGIC;
    signal QRD_U0_ap_start : STD_LOGIC;
    signal QRD_U0_ap_done : STD_LOGIC;
    signal QRD_U0_ap_continue : STD_LOGIC;
    signal QRD_U0_ap_idle : STD_LOGIC;
    signal QRD_U0_ap_ready : STD_LOGIC;
    signal QRD_U0_start_out : STD_LOGIC;
    signal QRD_U0_start_write : STD_LOGIC;
    signal QRD_U0_H_real_spl1_read : STD_LOGIC;
    signal QRD_U0_H_imag_spl1_read : STD_LOGIC;
    signal QRD_U0_R_din : STD_LOGIC_VECTOR (15 downto 0);
    signal QRD_U0_R_write : STD_LOGIC;
    signal QRD_U0_Q_din : STD_LOGIC_VECTOR (15 downto 0);
    signal QRD_U0_Q_write : STD_LOGIC;
    signal channel_mult_U0_ap_start : STD_LOGIC;
    signal channel_mult_U0_ap_done : STD_LOGIC;
    signal channel_mult_U0_ap_continue : STD_LOGIC;
    signal channel_mult_U0_ap_idle : STD_LOGIC;
    signal channel_mult_U0_ap_ready : STD_LOGIC;
    signal channel_mult_U0_H_real_spl0_read : STD_LOGIC;
    signal channel_mult_U0_H_imag_spl0_read : STD_LOGIC;
    signal channel_mult_U0_xr_read : STD_LOGIC;
    signal channel_mult_U0_xi_read : STD_LOGIC;
    signal channel_mult_U0_channel_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal channel_mult_U0_channel_out_write : STD_LOGIC;
    signal AWGN_1_U0_ap_start : STD_LOGIC;
    signal AWGN_1_U0_ap_done : STD_LOGIC;
    signal AWGN_1_U0_ap_continue : STD_LOGIC;
    signal AWGN_1_U0_ap_idle : STD_LOGIC;
    signal AWGN_1_U0_ap_ready : STD_LOGIC;
    signal AWGN_1_U0_start_out : STD_LOGIC;
    signal AWGN_1_U0_start_write : STD_LOGIC;
    signal AWGN_1_U0_SNR_read : STD_LOGIC;
    signal AWGN_1_U0_channel_out_read : STD_LOGIC;
    signal AWGN_1_U0_noise_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AWGN_1_U0_noise_out_write : STD_LOGIC;
    signal matrix_mult_U0_ap_start : STD_LOGIC;
    signal matrix_mult_U0_ap_done : STD_LOGIC;
    signal matrix_mult_U0_ap_continue : STD_LOGIC;
    signal matrix_mult_U0_ap_idle : STD_LOGIC;
    signal matrix_mult_U0_ap_ready : STD_LOGIC;
    signal matrix_mult_U0_Q_read : STD_LOGIC;
    signal matrix_mult_U0_noise_out_read : STD_LOGIC;
    signal matrix_mult_U0_MULQ_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal matrix_mult_U0_MULQ_out_write : STD_LOGIC;
    signal KBEST_U0_ap_start : STD_LOGIC;
    signal KBEST_U0_ap_done : STD_LOGIC;
    signal KBEST_U0_ap_continue : STD_LOGIC;
    signal KBEST_U0_ap_idle : STD_LOGIC;
    signal KBEST_U0_ap_ready : STD_LOGIC;
    signal KBEST_U0_start_out : STD_LOGIC;
    signal KBEST_U0_start_write : STD_LOGIC;
    signal KBEST_U0_R_read : STD_LOGIC;
    signal KBEST_U0_MULQ_out_read : STD_LOGIC;
    signal KBEST_U0_KB_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal KBEST_U0_KB_out_write : STD_LOGIC;
    signal DeModulation_U0_ap_start : STD_LOGIC;
    signal DeModulation_U0_ap_done : STD_LOGIC;
    signal DeModulation_U0_ap_continue : STD_LOGIC;
    signal DeModulation_U0_ap_idle : STD_LOGIC;
    signal DeModulation_U0_ap_ready : STD_LOGIC;
    signal DeModulation_U0_KB_out_read : STD_LOGIC;
    signal DeModulation_U0_demod_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal DeModulation_U0_demod_out_write : STD_LOGIC;
    signal DeModulation_U0_start_out : STD_LOGIC;
    signal DeModulation_U0_start_write : STD_LOGIC;
    signal AES_En_De_128_U0_ap_start : STD_LOGIC;
    signal AES_En_De_128_U0_ap_done : STD_LOGIC;
    signal AES_En_De_128_U0_ap_continue : STD_LOGIC;
    signal AES_En_De_128_U0_ap_idle : STD_LOGIC;
    signal AES_En_De_128_U0_ap_ready : STD_LOGIC;
    signal AES_En_De_128_U0_out_data_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AES_En_De_128_U0_out_data_write : STD_LOGIC;
    signal AES_En_De_128_U0_demod_out_read : STD_LOGIC;
    signal SNR_c_full_n : STD_LOGIC;
    signal SNR_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal SNR_c_empty_n : STD_LOGIC;
    signal AES_EN_out_full_n : STD_LOGIC;
    signal AES_EN_out_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal AES_EN_out_empty_n : STD_LOGIC;
    signal xi_full_n : STD_LOGIC;
    signal xi_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xi_empty_n : STD_LOGIC;
    signal xr_full_n : STD_LOGIC;
    signal xr_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal xr_empty_n : STD_LOGIC;
    signal H_real_full_n : STD_LOGIC;
    signal H_real_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_real_empty_n : STD_LOGIC;
    signal H_imag_full_n : STD_LOGIC;
    signal H_imag_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_imag_empty_n : STD_LOGIC;
    signal H_real_spl0_full_n : STD_LOGIC;
    signal H_real_spl0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_real_spl0_empty_n : STD_LOGIC;
    signal H_real_spl1_full_n : STD_LOGIC;
    signal H_real_spl1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_real_spl1_empty_n : STD_LOGIC;
    signal H_imag_spl0_full_n : STD_LOGIC;
    signal H_imag_spl0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_imag_spl0_empty_n : STD_LOGIC;
    signal H_imag_spl1_full_n : STD_LOGIC;
    signal H_imag_spl1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal H_imag_spl1_empty_n : STD_LOGIC;
    signal R_full_n : STD_LOGIC;
    signal R_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal R_empty_n : STD_LOGIC;
    signal Q_full_n : STD_LOGIC;
    signal Q_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal Q_empty_n : STD_LOGIC;
    signal channel_out_full_n : STD_LOGIC;
    signal channel_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal channel_out_empty_n : STD_LOGIC;
    signal noise_out_full_n : STD_LOGIC;
    signal noise_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal noise_out_empty_n : STD_LOGIC;
    signal MULQ_out_full_n : STD_LOGIC;
    signal MULQ_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal MULQ_out_empty_n : STD_LOGIC;
    signal KB_out_full_n : STD_LOGIC;
    signal KB_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal KB_out_empty_n : STD_LOGIC;
    signal demod_out_full_n : STD_LOGIC;
    signal demod_out_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal demod_out_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_AES_En_De27_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AES_En_De27_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Rayleigh_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Rayleigh_1_U0_ap_ready : STD_LOGIC;
    signal start_for_AWGN_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AWGN_1_U0_full_n : STD_LOGIC;
    signal start_for_AWGN_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AWGN_1_U0_empty_n : STD_LOGIC;
    signal start_for_Modulation_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Modulation_U0_full_n : STD_LOGIC;
    signal start_for_Modulation_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Modulation_U0_empty_n : STD_LOGIC;
    signal start_for_channel_mult_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_channel_mult_U0_full_n : STD_LOGIC;
    signal start_for_channel_mult_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_channel_mult_U0_empty_n : STD_LOGIC;
    signal start_for_split_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_split_U0_full_n : STD_LOGIC;
    signal start_for_split_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_split_U0_empty_n : STD_LOGIC;
    signal start_for_split_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_split_1_U0_full_n : STD_LOGIC;
    signal start_for_split_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_split_1_U0_empty_n : STD_LOGIC;
    signal start_for_QRD_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_QRD_U0_full_n : STD_LOGIC;
    signal start_for_QRD_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_QRD_U0_empty_n : STD_LOGIC;
    signal start_for_KBEST_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_KBEST_U0_full_n : STD_LOGIC;
    signal start_for_KBEST_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_KBEST_U0_empty_n : STD_LOGIC;
    signal start_for_matrix_mult_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_matrix_mult_U0_full_n : STD_LOGIC;
    signal start_for_matrix_mult_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_matrix_mult_U0_empty_n : STD_LOGIC;
    signal start_for_DeModulation_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DeModulation_U0_full_n : STD_LOGIC;
    signal start_for_DeModulation_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DeModulation_U0_empty_n : STD_LOGIC;
    signal start_for_AES_En_De_128_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AES_En_De_128_U0_full_n : STD_LOGIC;
    signal start_for_AES_En_De_128_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AES_En_De_128_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component TOP_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        SNR : IN STD_LOGIC_VECTOR (15 downto 0);
        SNR_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        SNR_c_full_n : IN STD_LOGIC;
        SNR_c_write : OUT STD_LOGIC );
    end component;


    component TOP_AES_En_De27 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_data_empty_n : IN STD_LOGIC;
        in_data_read : OUT STD_LOGIC;
        AES_EN_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        AES_EN_out_full_n : IN STD_LOGIC;
        AES_EN_out_write : OUT STD_LOGIC );
    end component;


    component TOP_Modulation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        AES_EN_out_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        AES_EN_out_empty_n : IN STD_LOGIC;
        AES_EN_out_read : OUT STD_LOGIC;
        xr_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xr_full_n : IN STD_LOGIC;
        xr_write : OUT STD_LOGIC;
        xi_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        xi_full_n : IN STD_LOGIC;
        xi_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component TOP_Rayleigh_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        H_real_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_real_full_n : IN STD_LOGIC;
        H_real_write : OUT STD_LOGIC;
        H_imag_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_imag_full_n : IN STD_LOGIC;
        H_imag_write : OUT STD_LOGIC );
    end component;


    component TOP_split IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H_real_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_real_empty_n : IN STD_LOGIC;
        H_real_read : OUT STD_LOGIC;
        H_real_spl0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_real_spl0_full_n : IN STD_LOGIC;
        H_real_spl0_write : OUT STD_LOGIC;
        H_real_spl1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_real_spl1_full_n : IN STD_LOGIC;
        H_real_spl1_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component TOP_split_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H_imag_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_imag_empty_n : IN STD_LOGIC;
        H_imag_read : OUT STD_LOGIC;
        H_imag_spl0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_imag_spl0_full_n : IN STD_LOGIC;
        H_imag_spl0_write : OUT STD_LOGIC;
        H_imag_spl1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        H_imag_spl1_full_n : IN STD_LOGIC;
        H_imag_spl1_write : OUT STD_LOGIC );
    end component;


    component TOP_QRD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        H_real_spl1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_real_spl1_empty_n : IN STD_LOGIC;
        H_real_spl1_read : OUT STD_LOGIC;
        H_imag_spl1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_imag_spl1_empty_n : IN STD_LOGIC;
        H_imag_spl1_read : OUT STD_LOGIC;
        R_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        R_full_n : IN STD_LOGIC;
        R_write : OUT STD_LOGIC;
        Q_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        Q_full_n : IN STD_LOGIC;
        Q_write : OUT STD_LOGIC );
    end component;


    component TOP_channel_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H_real_spl0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_real_spl0_empty_n : IN STD_LOGIC;
        H_real_spl0_read : OUT STD_LOGIC;
        H_imag_spl0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        H_imag_spl0_empty_n : IN STD_LOGIC;
        H_imag_spl0_read : OUT STD_LOGIC;
        xr_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xr_empty_n : IN STD_LOGIC;
        xr_read : OUT STD_LOGIC;
        xi_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        xi_empty_n : IN STD_LOGIC;
        xi_read : OUT STD_LOGIC;
        channel_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        channel_out_full_n : IN STD_LOGIC;
        channel_out_write : OUT STD_LOGIC );
    end component;


    component TOP_AWGN_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        SNR_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        SNR_empty_n : IN STD_LOGIC;
        SNR_read : OUT STD_LOGIC;
        channel_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        channel_out_empty_n : IN STD_LOGIC;
        channel_out_read : OUT STD_LOGIC;
        noise_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        noise_out_full_n : IN STD_LOGIC;
        noise_out_write : OUT STD_LOGIC );
    end component;


    component TOP_matrix_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Q_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        Q_empty_n : IN STD_LOGIC;
        Q_read : OUT STD_LOGIC;
        noise_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        noise_out_empty_n : IN STD_LOGIC;
        noise_out_read : OUT STD_LOGIC;
        MULQ_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        MULQ_out_full_n : IN STD_LOGIC;
        MULQ_out_write : OUT STD_LOGIC );
    end component;


    component TOP_KBEST IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        R_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        R_empty_n : IN STD_LOGIC;
        R_read : OUT STD_LOGIC;
        MULQ_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        MULQ_out_empty_n : IN STD_LOGIC;
        MULQ_out_read : OUT STD_LOGIC;
        KB_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        KB_out_full_n : IN STD_LOGIC;
        KB_out_write : OUT STD_LOGIC );
    end component;


    component TOP_DeModulation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        KB_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        KB_out_empty_n : IN STD_LOGIC;
        KB_out_read : OUT STD_LOGIC;
        demod_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        demod_out_full_n : IN STD_LOGIC;
        demod_out_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component TOP_AES_En_De_128 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_data_full_n : IN STD_LOGIC;
        out_data_write : OUT STD_LOGIC;
        demod_out_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        demod_out_empty_n : IN STD_LOGIC;
        demod_out_read : OUT STD_LOGIC );
    end component;


    component TOP_fifo_w16_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_fifo_w16_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_fifo_w16_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_AWGN_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_Modulation_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_channel_mult_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_split_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_split_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_QRD_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_KBEST_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_matrix_mult_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_DeModulation_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component TOP_start_for_AES_En_De_128_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component TOP_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_AWGN_1_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        SNR => SNR,
        SNR_c_din => entry_proc_U0_SNR_c_din,
        SNR_c_full_n => SNR_c_full_n,
        SNR_c_write => entry_proc_U0_SNR_c_write);

    AES_En_De27_U0 : component TOP_AES_En_De27
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AES_En_De27_U0_ap_start,
        start_full_n => start_for_Modulation_U0_full_n,
        ap_done => AES_En_De27_U0_ap_done,
        ap_continue => AES_En_De27_U0_ap_continue,
        ap_idle => AES_En_De27_U0_ap_idle,
        ap_ready => AES_En_De27_U0_ap_ready,
        start_out => AES_En_De27_U0_start_out,
        start_write => AES_En_De27_U0_start_write,
        in_data_dout => in_data_dout,
        in_data_empty_n => in_data_empty_n,
        in_data_read => AES_En_De27_U0_in_data_read,
        AES_EN_out_din => AES_En_De27_U0_AES_EN_out_din,
        AES_EN_out_full_n => AES_EN_out_full_n,
        AES_EN_out_write => AES_En_De27_U0_AES_EN_out_write);

    Modulation_U0 : component TOP_Modulation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Modulation_U0_ap_start,
        start_full_n => start_for_channel_mult_U0_full_n,
        ap_done => Modulation_U0_ap_done,
        ap_continue => Modulation_U0_ap_continue,
        ap_idle => Modulation_U0_ap_idle,
        ap_ready => Modulation_U0_ap_ready,
        AES_EN_out_dout => AES_EN_out_dout,
        AES_EN_out_empty_n => AES_EN_out_empty_n,
        AES_EN_out_read => Modulation_U0_AES_EN_out_read,
        xr_din => Modulation_U0_xr_din,
        xr_full_n => xr_full_n,
        xr_write => Modulation_U0_xr_write,
        xi_din => Modulation_U0_xi_din,
        xi_full_n => xi_full_n,
        xi_write => Modulation_U0_xi_write,
        start_out => Modulation_U0_start_out,
        start_write => Modulation_U0_start_write);

    Rayleigh_1_U0 : component TOP_Rayleigh_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Rayleigh_1_U0_ap_start,
        start_full_n => Rayleigh_1_U0_start_full_n,
        ap_done => Rayleigh_1_U0_ap_done,
        ap_continue => Rayleigh_1_U0_ap_continue,
        ap_idle => Rayleigh_1_U0_ap_idle,
        ap_ready => Rayleigh_1_U0_ap_ready,
        start_out => Rayleigh_1_U0_start_out,
        start_write => Rayleigh_1_U0_start_write,
        H_real_din => Rayleigh_1_U0_H_real_din,
        H_real_full_n => H_real_full_n,
        H_real_write => Rayleigh_1_U0_H_real_write,
        H_imag_din => Rayleigh_1_U0_H_imag_din,
        H_imag_full_n => H_imag_full_n,
        H_imag_write => Rayleigh_1_U0_H_imag_write);

    split_U0 : component TOP_split
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => split_U0_ap_start,
        start_full_n => start_for_QRD_U0_full_n,
        ap_done => split_U0_ap_done,
        ap_continue => split_U0_ap_continue,
        ap_idle => split_U0_ap_idle,
        ap_ready => split_U0_ap_ready,
        H_real_dout => H_real_dout,
        H_real_empty_n => H_real_empty_n,
        H_real_read => split_U0_H_real_read,
        H_real_spl0_din => split_U0_H_real_spl0_din,
        H_real_spl0_full_n => H_real_spl0_full_n,
        H_real_spl0_write => split_U0_H_real_spl0_write,
        H_real_spl1_din => split_U0_H_real_spl1_din,
        H_real_spl1_full_n => H_real_spl1_full_n,
        H_real_spl1_write => split_U0_H_real_spl1_write,
        start_out => split_U0_start_out,
        start_write => split_U0_start_write);

    split_1_U0 : component TOP_split_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => split_1_U0_ap_start,
        ap_done => split_1_U0_ap_done,
        ap_continue => split_1_U0_ap_continue,
        ap_idle => split_1_U0_ap_idle,
        ap_ready => split_1_U0_ap_ready,
        H_imag_dout => H_imag_dout,
        H_imag_empty_n => H_imag_empty_n,
        H_imag_read => split_1_U0_H_imag_read,
        H_imag_spl0_din => split_1_U0_H_imag_spl0_din,
        H_imag_spl0_full_n => H_imag_spl0_full_n,
        H_imag_spl0_write => split_1_U0_H_imag_spl0_write,
        H_imag_spl1_din => split_1_U0_H_imag_spl1_din,
        H_imag_spl1_full_n => H_imag_spl1_full_n,
        H_imag_spl1_write => split_1_U0_H_imag_spl1_write);

    QRD_U0 : component TOP_QRD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => QRD_U0_ap_start,
        start_full_n => start_for_KBEST_U0_full_n,
        ap_done => QRD_U0_ap_done,
        ap_continue => QRD_U0_ap_continue,
        ap_idle => QRD_U0_ap_idle,
        ap_ready => QRD_U0_ap_ready,
        start_out => QRD_U0_start_out,
        start_write => QRD_U0_start_write,
        H_real_spl1_dout => H_real_spl1_dout,
        H_real_spl1_empty_n => H_real_spl1_empty_n,
        H_real_spl1_read => QRD_U0_H_real_spl1_read,
        H_imag_spl1_dout => H_imag_spl1_dout,
        H_imag_spl1_empty_n => H_imag_spl1_empty_n,
        H_imag_spl1_read => QRD_U0_H_imag_spl1_read,
        R_din => QRD_U0_R_din,
        R_full_n => R_full_n,
        R_write => QRD_U0_R_write,
        Q_din => QRD_U0_Q_din,
        Q_full_n => Q_full_n,
        Q_write => QRD_U0_Q_write);

    channel_mult_U0 : component TOP_channel_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => channel_mult_U0_ap_start,
        ap_done => channel_mult_U0_ap_done,
        ap_continue => channel_mult_U0_ap_continue,
        ap_idle => channel_mult_U0_ap_idle,
        ap_ready => channel_mult_U0_ap_ready,
        H_real_spl0_dout => H_real_spl0_dout,
        H_real_spl0_empty_n => H_real_spl0_empty_n,
        H_real_spl0_read => channel_mult_U0_H_real_spl0_read,
        H_imag_spl0_dout => H_imag_spl0_dout,
        H_imag_spl0_empty_n => H_imag_spl0_empty_n,
        H_imag_spl0_read => channel_mult_U0_H_imag_spl0_read,
        xr_dout => xr_dout,
        xr_empty_n => xr_empty_n,
        xr_read => channel_mult_U0_xr_read,
        xi_dout => xi_dout,
        xi_empty_n => xi_empty_n,
        xi_read => channel_mult_U0_xi_read,
        channel_out_din => channel_mult_U0_channel_out_din,
        channel_out_full_n => channel_out_full_n,
        channel_out_write => channel_mult_U0_channel_out_write);

    AWGN_1_U0 : component TOP_AWGN_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AWGN_1_U0_ap_start,
        start_full_n => start_for_matrix_mult_U0_full_n,
        ap_done => AWGN_1_U0_ap_done,
        ap_continue => AWGN_1_U0_ap_continue,
        ap_idle => AWGN_1_U0_ap_idle,
        ap_ready => AWGN_1_U0_ap_ready,
        start_out => AWGN_1_U0_start_out,
        start_write => AWGN_1_U0_start_write,
        SNR_dout => SNR_c_dout,
        SNR_empty_n => SNR_c_empty_n,
        SNR_read => AWGN_1_U0_SNR_read,
        channel_out_dout => channel_out_dout,
        channel_out_empty_n => channel_out_empty_n,
        channel_out_read => AWGN_1_U0_channel_out_read,
        noise_out_din => AWGN_1_U0_noise_out_din,
        noise_out_full_n => noise_out_full_n,
        noise_out_write => AWGN_1_U0_noise_out_write);

    matrix_mult_U0 : component TOP_matrix_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => matrix_mult_U0_ap_start,
        ap_done => matrix_mult_U0_ap_done,
        ap_continue => matrix_mult_U0_ap_continue,
        ap_idle => matrix_mult_U0_ap_idle,
        ap_ready => matrix_mult_U0_ap_ready,
        Q_dout => Q_dout,
        Q_empty_n => Q_empty_n,
        Q_read => matrix_mult_U0_Q_read,
        noise_out_dout => noise_out_dout,
        noise_out_empty_n => noise_out_empty_n,
        noise_out_read => matrix_mult_U0_noise_out_read,
        MULQ_out_din => matrix_mult_U0_MULQ_out_din,
        MULQ_out_full_n => MULQ_out_full_n,
        MULQ_out_write => matrix_mult_U0_MULQ_out_write);

    KBEST_U0 : component TOP_KBEST
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => KBEST_U0_ap_start,
        start_full_n => start_for_DeModulation_U0_full_n,
        ap_done => KBEST_U0_ap_done,
        ap_continue => KBEST_U0_ap_continue,
        ap_idle => KBEST_U0_ap_idle,
        ap_ready => KBEST_U0_ap_ready,
        start_out => KBEST_U0_start_out,
        start_write => KBEST_U0_start_write,
        R_dout => R_dout,
        R_empty_n => R_empty_n,
        R_read => KBEST_U0_R_read,
        MULQ_out_dout => MULQ_out_dout,
        MULQ_out_empty_n => MULQ_out_empty_n,
        MULQ_out_read => KBEST_U0_MULQ_out_read,
        KB_out_din => KBEST_U0_KB_out_din,
        KB_out_full_n => KB_out_full_n,
        KB_out_write => KBEST_U0_KB_out_write);

    DeModulation_U0 : component TOP_DeModulation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DeModulation_U0_ap_start,
        start_full_n => start_for_AES_En_De_128_U0_full_n,
        ap_done => DeModulation_U0_ap_done,
        ap_continue => DeModulation_U0_ap_continue,
        ap_idle => DeModulation_U0_ap_idle,
        ap_ready => DeModulation_U0_ap_ready,
        KB_out_dout => KB_out_dout,
        KB_out_empty_n => KB_out_empty_n,
        KB_out_read => DeModulation_U0_KB_out_read,
        demod_out_din => DeModulation_U0_demod_out_din,
        demod_out_full_n => demod_out_full_n,
        demod_out_write => DeModulation_U0_demod_out_write,
        start_out => DeModulation_U0_start_out,
        start_write => DeModulation_U0_start_write);

    AES_En_De_128_U0 : component TOP_AES_En_De_128
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AES_En_De_128_U0_ap_start,
        ap_done => AES_En_De_128_U0_ap_done,
        ap_continue => AES_En_De_128_U0_ap_continue,
        ap_idle => AES_En_De_128_U0_ap_idle,
        ap_ready => AES_En_De_128_U0_ap_ready,
        out_data_din => AES_En_De_128_U0_out_data_din,
        out_data_full_n => out_data_full_n,
        out_data_write => AES_En_De_128_U0_out_data_write,
        demod_out_dout => demod_out_dout,
        demod_out_empty_n => demod_out_empty_n,
        demod_out_read => AES_En_De_128_U0_demod_out_read);

    SNR_c_U : component TOP_fifo_w16_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_SNR_c_din,
        if_full_n => SNR_c_full_n,
        if_write => entry_proc_U0_SNR_c_write,
        if_dout => SNR_c_dout,
        if_empty_n => SNR_c_empty_n,
        if_read => AWGN_1_U0_SNR_read);

    AES_EN_out_U : component TOP_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AES_En_De27_U0_AES_EN_out_din,
        if_full_n => AES_EN_out_full_n,
        if_write => AES_En_De27_U0_AES_EN_out_write,
        if_dout => AES_EN_out_dout,
        if_empty_n => AES_EN_out_empty_n,
        if_read => Modulation_U0_AES_EN_out_read);

    xi_U : component TOP_fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Modulation_U0_xi_din,
        if_full_n => xi_full_n,
        if_write => Modulation_U0_xi_write,
        if_dout => xi_dout,
        if_empty_n => xi_empty_n,
        if_read => channel_mult_U0_xi_read);

    xr_U : component TOP_fifo_w16_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Modulation_U0_xr_din,
        if_full_n => xr_full_n,
        if_write => Modulation_U0_xr_write,
        if_dout => xr_dout,
        if_empty_n => xr_empty_n,
        if_read => channel_mult_U0_xr_read);

    H_real_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Rayleigh_1_U0_H_real_din,
        if_full_n => H_real_full_n,
        if_write => Rayleigh_1_U0_H_real_write,
        if_dout => H_real_dout,
        if_empty_n => H_real_empty_n,
        if_read => split_U0_H_real_read);

    H_imag_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Rayleigh_1_U0_H_imag_din,
        if_full_n => H_imag_full_n,
        if_write => Rayleigh_1_U0_H_imag_write,
        if_dout => H_imag_dout,
        if_empty_n => H_imag_empty_n,
        if_read => split_1_U0_H_imag_read);

    H_real_spl0_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_U0_H_real_spl0_din,
        if_full_n => H_real_spl0_full_n,
        if_write => split_U0_H_real_spl0_write,
        if_dout => H_real_spl0_dout,
        if_empty_n => H_real_spl0_empty_n,
        if_read => channel_mult_U0_H_real_spl0_read);

    H_real_spl1_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_U0_H_real_spl1_din,
        if_full_n => H_real_spl1_full_n,
        if_write => split_U0_H_real_spl1_write,
        if_dout => H_real_spl1_dout,
        if_empty_n => H_real_spl1_empty_n,
        if_read => QRD_U0_H_real_spl1_read);

    H_imag_spl0_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_1_U0_H_imag_spl0_din,
        if_full_n => H_imag_spl0_full_n,
        if_write => split_1_U0_H_imag_spl0_write,
        if_dout => H_imag_spl0_dout,
        if_empty_n => H_imag_spl0_empty_n,
        if_read => channel_mult_U0_H_imag_spl0_read);

    H_imag_spl1_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => split_1_U0_H_imag_spl1_din,
        if_full_n => H_imag_spl1_full_n,
        if_write => split_1_U0_H_imag_spl1_write,
        if_dout => H_imag_spl1_dout,
        if_empty_n => H_imag_spl1_empty_n,
        if_read => QRD_U0_H_imag_spl1_read);

    R_U : component TOP_fifo_w16_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => QRD_U0_R_din,
        if_full_n => R_full_n,
        if_write => QRD_U0_R_write,
        if_dout => R_dout,
        if_empty_n => R_empty_n,
        if_read => KBEST_U0_R_read);

    Q_U : component TOP_fifo_w16_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => QRD_U0_Q_din,
        if_full_n => Q_full_n,
        if_write => QRD_U0_Q_write,
        if_dout => Q_dout,
        if_empty_n => Q_empty_n,
        if_read => matrix_mult_U0_Q_read);

    channel_out_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => channel_mult_U0_channel_out_din,
        if_full_n => channel_out_full_n,
        if_write => channel_mult_U0_channel_out_write,
        if_dout => channel_out_dout,
        if_empty_n => channel_out_empty_n,
        if_read => AWGN_1_U0_channel_out_read);

    noise_out_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AWGN_1_U0_noise_out_din,
        if_full_n => noise_out_full_n,
        if_write => AWGN_1_U0_noise_out_write,
        if_dout => noise_out_dout,
        if_empty_n => noise_out_empty_n,
        if_read => matrix_mult_U0_noise_out_read);

    MULQ_out_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => matrix_mult_U0_MULQ_out_din,
        if_full_n => MULQ_out_full_n,
        if_write => matrix_mult_U0_MULQ_out_write,
        if_dout => MULQ_out_dout,
        if_empty_n => MULQ_out_empty_n,
        if_read => KBEST_U0_MULQ_out_read);

    KB_out_U : component TOP_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => KBEST_U0_KB_out_din,
        if_full_n => KB_out_full_n,
        if_write => KBEST_U0_KB_out_write,
        if_dout => KB_out_dout,
        if_empty_n => KB_out_empty_n,
        if_read => DeModulation_U0_KB_out_read);

    demod_out_U : component TOP_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DeModulation_U0_demod_out_din,
        if_full_n => demod_out_full_n,
        if_write => DeModulation_U0_demod_out_write,
        if_dout => demod_out_dout,
        if_empty_n => demod_out_empty_n,
        if_read => AES_En_De_128_U0_demod_out_read);

    start_for_AWGN_1_U0_U : component TOP_start_for_AWGN_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AWGN_1_U0_din,
        if_full_n => start_for_AWGN_1_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_AWGN_1_U0_dout,
        if_empty_n => start_for_AWGN_1_U0_empty_n,
        if_read => AWGN_1_U0_ap_ready);

    start_for_Modulation_U0_U : component TOP_start_for_Modulation_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Modulation_U0_din,
        if_full_n => start_for_Modulation_U0_full_n,
        if_write => AES_En_De27_U0_start_write,
        if_dout => start_for_Modulation_U0_dout,
        if_empty_n => start_for_Modulation_U0_empty_n,
        if_read => Modulation_U0_ap_ready);

    start_for_channel_mult_U0_U : component TOP_start_for_channel_mult_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_channel_mult_U0_din,
        if_full_n => start_for_channel_mult_U0_full_n,
        if_write => Modulation_U0_start_write,
        if_dout => start_for_channel_mult_U0_dout,
        if_empty_n => start_for_channel_mult_U0_empty_n,
        if_read => channel_mult_U0_ap_ready);

    start_for_split_U0_U : component TOP_start_for_split_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_split_U0_din,
        if_full_n => start_for_split_U0_full_n,
        if_write => Rayleigh_1_U0_start_write,
        if_dout => start_for_split_U0_dout,
        if_empty_n => start_for_split_U0_empty_n,
        if_read => split_U0_ap_ready);

    start_for_split_1_U0_U : component TOP_start_for_split_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_split_1_U0_din,
        if_full_n => start_for_split_1_U0_full_n,
        if_write => Rayleigh_1_U0_start_write,
        if_dout => start_for_split_1_U0_dout,
        if_empty_n => start_for_split_1_U0_empty_n,
        if_read => split_1_U0_ap_ready);

    start_for_QRD_U0_U : component TOP_start_for_QRD_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_QRD_U0_din,
        if_full_n => start_for_QRD_U0_full_n,
        if_write => split_U0_start_write,
        if_dout => start_for_QRD_U0_dout,
        if_empty_n => start_for_QRD_U0_empty_n,
        if_read => QRD_U0_ap_ready);

    start_for_KBEST_U0_U : component TOP_start_for_KBEST_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_KBEST_U0_din,
        if_full_n => start_for_KBEST_U0_full_n,
        if_write => QRD_U0_start_write,
        if_dout => start_for_KBEST_U0_dout,
        if_empty_n => start_for_KBEST_U0_empty_n,
        if_read => KBEST_U0_ap_ready);

    start_for_matrix_mult_U0_U : component TOP_start_for_matrix_mult_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_matrix_mult_U0_din,
        if_full_n => start_for_matrix_mult_U0_full_n,
        if_write => AWGN_1_U0_start_write,
        if_dout => start_for_matrix_mult_U0_dout,
        if_empty_n => start_for_matrix_mult_U0_empty_n,
        if_read => matrix_mult_U0_ap_ready);

    start_for_DeModulation_U0_U : component TOP_start_for_DeModulation_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_DeModulation_U0_din,
        if_full_n => start_for_DeModulation_U0_full_n,
        if_write => KBEST_U0_start_write,
        if_dout => start_for_DeModulation_U0_dout,
        if_empty_n => start_for_DeModulation_U0_empty_n,
        if_read => DeModulation_U0_ap_ready);

    start_for_AES_En_De_128_U0_U : component TOP_start_for_AES_En_De_128_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AES_En_De_128_U0_din,
        if_full_n => start_for_AES_En_De_128_U0_full_n,
        if_write => DeModulation_U0_start_write,
        if_dout => start_for_AES_En_De_128_U0_dout,
        if_empty_n => start_for_AES_En_De_128_U0_empty_n,
        if_read => AES_En_De_128_U0_ap_ready);





    ap_sync_reg_AES_En_De27_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_AES_En_De27_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AES_En_De27_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AES_En_De27_U0_ap_ready <= ap_sync_AES_En_De27_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Rayleigh_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Rayleigh_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Rayleigh_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Rayleigh_1_U0_ap_ready <= ap_sync_Rayleigh_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    AES_En_De27_U0_ap_continue <= ap_const_logic_1;
    AES_En_De27_U0_ap_start <= ((ap_sync_reg_AES_En_De27_U0_ap_ready xor ap_const_logic_1) and ap_start);
    AES_En_De_128_U0_ap_continue <= ap_const_logic_1;
    AES_En_De_128_U0_ap_start <= start_for_AES_En_De_128_U0_empty_n;
    AWGN_1_U0_ap_continue <= ap_const_logic_1;
    AWGN_1_U0_ap_start <= start_for_AWGN_1_U0_empty_n;
    DeModulation_U0_ap_continue <= ap_const_logic_1;
    DeModulation_U0_ap_start <= start_for_DeModulation_U0_empty_n;
    KBEST_U0_ap_continue <= ap_const_logic_1;
    KBEST_U0_ap_start <= start_for_KBEST_U0_empty_n;
    Modulation_U0_ap_continue <= ap_const_logic_1;
    Modulation_U0_ap_start <= start_for_Modulation_U0_empty_n;
    QRD_U0_ap_continue <= ap_const_logic_1;
    QRD_U0_ap_start <= start_for_QRD_U0_empty_n;
    Rayleigh_1_U0_ap_continue <= ap_const_logic_1;
    Rayleigh_1_U0_ap_start <= ((ap_sync_reg_Rayleigh_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Rayleigh_1_U0_start_full_n <= (start_for_split_U0_full_n and start_for_split_1_U0_full_n);
    ap_done <= AES_En_De_128_U0_ap_done;
    ap_idle <= (split_U0_ap_idle and split_1_U0_ap_idle and matrix_mult_U0_ap_idle and entry_proc_U0_ap_idle and channel_mult_U0_ap_idle and Rayleigh_1_U0_ap_idle and QRD_U0_ap_idle and Modulation_U0_ap_idle and KBEST_U0_ap_idle and DeModulation_U0_ap_idle and AWGN_1_U0_ap_idle and AES_En_De_128_U0_ap_idle and AES_En_De27_U0_ap_idle);
    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;
    ap_ready <= ap_sync_ready;
    ap_sync_AES_En_De27_U0_ap_ready <= (ap_sync_reg_AES_En_De27_U0_ap_ready or AES_En_De27_U0_ap_ready);
    ap_sync_Rayleigh_1_U0_ap_ready <= (ap_sync_reg_Rayleigh_1_U0_ap_ready or Rayleigh_1_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_ready <= (ap_sync_entry_proc_U0_ap_ready and ap_sync_Rayleigh_1_U0_ap_ready and ap_sync_AES_En_De27_U0_ap_ready);
    channel_mult_U0_ap_continue <= ap_const_logic_1;
    channel_mult_U0_ap_start <= start_for_channel_mult_U0_empty_n;
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    in_data_read <= AES_En_De27_U0_in_data_read;
    matrix_mult_U0_ap_continue <= ap_const_logic_1;
    matrix_mult_U0_ap_start <= start_for_matrix_mult_U0_empty_n;
    out_data_din <= AES_En_De_128_U0_out_data_din;
    out_data_write <= AES_En_De_128_U0_out_data_write;
    split_1_U0_ap_continue <= ap_const_logic_1;
    split_1_U0_ap_start <= start_for_split_1_U0_empty_n;
    split_U0_ap_continue <= ap_const_logic_1;
    split_U0_ap_start <= start_for_split_U0_empty_n;
    start_for_AES_En_De_128_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_AWGN_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_DeModulation_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_KBEST_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Modulation_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_QRD_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_channel_mult_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_matrix_mult_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_split_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_split_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
