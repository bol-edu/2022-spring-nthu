// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_seedInitialization (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_mt_odd_0_address0,
        this_mt_odd_0_ce0,
        this_mt_odd_0_we0,
        this_mt_odd_0_d0,
        this_mt_odd_0_q0,
        this_mt_odd_0_address1,
        this_mt_odd_0_ce1,
        this_mt_odd_0_q1,
        this_mt_odd_1_address0,
        this_mt_odd_1_ce0,
        this_mt_odd_1_we0,
        this_mt_odd_1_d0,
        this_mt_even_0_address0,
        this_mt_even_0_ce0,
        this_mt_even_0_we0,
        this_mt_even_0_d0,
        this_mt_even_0_q0,
        this_mt_even_1_address0,
        this_mt_even_1_ce0,
        this_mt_even_1_we0,
        this_mt_even_1_d0,
        seed,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] this_mt_odd_0_address0;
output   this_mt_odd_0_ce0;
output   this_mt_odd_0_we0;
output  [31:0] this_mt_odd_0_d0;
input  [31:0] this_mt_odd_0_q0;
output  [8:0] this_mt_odd_0_address1;
output   this_mt_odd_0_ce1;
input  [31:0] this_mt_odd_0_q1;
output  [8:0] this_mt_odd_1_address0;
output   this_mt_odd_1_ce0;
output   this_mt_odd_1_we0;
output  [31:0] this_mt_odd_1_d0;
output  [8:0] this_mt_even_0_address0;
output   this_mt_even_0_ce0;
output   this_mt_even_0_we0;
output  [31:0] this_mt_even_0_d0;
input  [31:0] this_mt_even_0_q0;
output  [8:0] this_mt_even_1_address0;
output   this_mt_even_1_ce0;
output   this_mt_even_1_we0;
output  [31:0] this_mt_even_1_d0;
input  [5:0] seed;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] this_mt_odd_0_address0;
reg this_mt_odd_0_ce0;
reg this_mt_odd_0_we0;
reg this_mt_odd_0_ce1;
reg[8:0] this_mt_even_0_address0;
reg this_mt_even_0_ce0;
reg this_mt_even_0_we0;
reg[31:0] this_mt_even_0_d0;
reg[8:0] this_mt_even_1_address0;
reg this_mt_even_1_ce0;
reg this_mt_even_1_we0;
reg[31:0] this_mt_even_1_d0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] mt_reg_V_fu_111_p2;
reg   [16:0] mt_reg_V_reg_146;
wire   [31:0] zext_ln610_fu_117_p1;
reg   [31:0] zext_ln610_reg_151;
wire    ap_CS_fsm_state4;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_done;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_idle;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_ready;
wire   [8:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_address0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_ce0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_we0;
wire   [31:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_d0;
wire   [8:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_address0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_ce0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_we0;
wire   [31:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_d0;
wire   [8:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_address0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_ce0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_we0;
wire   [31:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_d0;
wire   [8:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_address0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_ce0;
wire    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_we0;
wire   [31:0] grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_d0;
reg    grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start_reg;
reg   [4:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [16:0] zext_ln0_fu_107_p1;
wire    ap_CS_fsm_state5;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start_reg = 1'b0;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

TOP_seedInitialization_Pipeline_SEED_INIT_LOOP grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start),
    .ap_done(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_done),
    .ap_idle(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_idle),
    .ap_ready(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_ready),
    .zext_ln610(mt_reg_V_reg_146),
    .this_mt_even_0_address0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_address0),
    .this_mt_even_0_ce0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_ce0),
    .this_mt_even_0_we0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_we0),
    .this_mt_even_0_d0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_d0),
    .this_mt_even_1_address0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_address0),
    .this_mt_even_1_ce0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_ce0),
    .this_mt_even_1_we0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_we0),
    .this_mt_even_1_d0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_d0),
    .this_mt_odd_0_address0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_address0),
    .this_mt_odd_0_ce0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_ce0),
    .this_mt_odd_0_we0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_we0),
    .this_mt_odd_0_d0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_d0),
    .this_mt_odd_1_address0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_address0),
    .this_mt_odd_1_ce0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_ce0),
    .this_mt_odd_1_we0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_we0),
    .this_mt_odd_1_d0(grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
        ap_return_0_preg[1] <= 1'b0;
        ap_return_0_preg[2] <= 1'b0;
        ap_return_0_preg[3] <= 1'b0;
        ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
        ap_return_0_preg[12] <= 1'b0;
        ap_return_0_preg[13] <= 1'b0;
        ap_return_0_preg[14] <= 1'b0;
        ap_return_0_preg[15] <= 1'b0;
        ap_return_0_preg[16] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
                        ap_return_0_preg[16 : 0] <= zext_ln610_reg_151[16 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_1_preg <= this_mt_odd_0_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_2_preg <= this_mt_even_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_3_preg <= this_mt_odd_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_ready == 1'b1)) begin
            grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mt_reg_V_reg_146 <= mt_reg_V_fu_111_p2;
        zext_ln610_reg_151[16 : 0] <= zext_ln610_fu_117_p1[16 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_0 = zext_ln610_reg_151;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_1 = this_mt_odd_0_q1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_2 = this_mt_even_0_q0;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_3 = this_mt_odd_0_q0;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        this_mt_even_0_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        this_mt_even_0_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_0_address0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_address0;
    end else begin
        this_mt_even_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        this_mt_even_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_0_ce0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_ce0;
    end else begin
        this_mt_even_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        this_mt_even_0_d0 = zext_ln610_fu_117_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_0_d0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_d0;
    end else begin
        this_mt_even_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        this_mt_even_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_0_we0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_0_we0;
    end else begin
        this_mt_even_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        this_mt_even_1_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_1_address0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_address0;
    end else begin
        this_mt_even_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        this_mt_even_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_1_ce0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_ce0;
    end else begin
        this_mt_even_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        this_mt_even_1_d0 = zext_ln610_fu_117_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_1_d0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_d0;
    end else begin
        this_mt_even_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        this_mt_even_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_even_1_we0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_even_1_we0;
    end else begin
        this_mt_even_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        this_mt_odd_0_address0 = 64'd198;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_odd_0_address0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_address0;
    end else begin
        this_mt_odd_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        this_mt_odd_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_odd_0_ce0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_ce0;
    end else begin
        this_mt_odd_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        this_mt_odd_0_ce1 = 1'b1;
    end else begin
        this_mt_odd_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        this_mt_odd_0_we0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_we0;
    end else begin
        this_mt_odd_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

assign grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_ap_start_reg;

assign mt_reg_V_fu_111_p2 = ($signed(zext_ln0_fu_107_p1) + $signed(17'd69069));

assign this_mt_odd_0_address1 = 64'd0;

assign this_mt_odd_0_d0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_0_d0;

assign this_mt_odd_1_address0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_address0;

assign this_mt_odd_1_ce0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_ce0;

assign this_mt_odd_1_d0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_d0;

assign this_mt_odd_1_we0 = grp_seedInitialization_Pipeline_SEED_INIT_LOOP_fu_94_this_mt_odd_1_we0;

assign zext_ln0_fu_107_p1 = seed;

assign zext_ln610_fu_117_p1 = mt_reg_V_fu_111_p2;

always @ (posedge ap_clk) begin
    zext_ln610_reg_151[31:17] <= 15'b000000000000000;
    ap_return_0_preg[31:17] <= 15'b000000000000000;
end

endmodule //TOP_seedInitialization
