// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_seedInitialization_Pipeline_SEED_INIT_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln610,
        this_mt_even_0_address0,
        this_mt_even_0_ce0,
        this_mt_even_0_we0,
        this_mt_even_0_d0,
        this_mt_even_1_address0,
        this_mt_even_1_ce0,
        this_mt_even_1_we0,
        this_mt_even_1_d0,
        this_mt_odd_0_address0,
        this_mt_odd_0_ce0,
        this_mt_odd_0_we0,
        this_mt_odd_0_d0,
        this_mt_odd_1_address0,
        this_mt_odd_1_ce0,
        this_mt_odd_1_we0,
        this_mt_odd_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] zext_ln610;
output  [8:0] this_mt_even_0_address0;
output   this_mt_even_0_ce0;
output   this_mt_even_0_we0;
output  [31:0] this_mt_even_0_d0;
output  [8:0] this_mt_even_1_address0;
output   this_mt_even_1_ce0;
output   this_mt_even_1_we0;
output  [31:0] this_mt_even_1_d0;
output  [8:0] this_mt_odd_0_address0;
output   this_mt_odd_0_ce0;
output   this_mt_odd_0_we0;
output  [31:0] this_mt_odd_0_d0;
output  [8:0] this_mt_odd_1_address0;
output   this_mt_odd_1_ce0;
output   this_mt_odd_1_we0;
output  [31:0] this_mt_odd_1_d0;

reg ap_idle;
reg this_mt_even_0_ce0;
reg this_mt_even_0_we0;
reg this_mt_even_1_ce0;
reg this_mt_even_1_we0;
reg this_mt_odd_0_ce0;
reg this_mt_odd_0_we0;
reg this_mt_odd_1_ce0;
reg this_mt_odd_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln619_fu_131_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln587_fu_194_p1;
wire    ap_block_pp0_stage0;
wire   [0:0] trunc_ln619_fu_140_p1;
reg   [31:0] lhs_V_fu_48;
wire   [31:0] mt_reg_V_fu_174_p2;
wire   [31:0] zext_ln610_cast_fu_114_p1;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [9:0] p_Val2_s_fu_52;
wire   [9:0] i_V_fu_202_p2;
wire   [1:0] r_fu_144_p4;
wire   [31:0] zext_ln1691_fu_154_p1;
wire  signed [31:0] ret_fu_164_p0;
wire   [31:0] ret_fu_164_p2;
wire   [31:0] zext_ln223_fu_170_p1;
wire   [8:0] r_1_fu_184_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

TOP_mul_32s_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32ns_32_1_1_U66(
    .din0(ret_fu_164_p0),
    .din1(32'd1812433253),
    .dout(ret_fu_164_p2)
);

TOP_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_V_fu_48 <= zext_ln610_cast_fu_114_p1;
        end else if (((icmp_ln619_fu_131_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            lhs_V_fu_48 <= mt_reg_V_fu_174_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_52 <= 10'd1;
        end else if (((icmp_ln619_fu_131_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_Val2_s_fu_52 <= i_V_fu_202_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln619_fu_131_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_even_0_ce0 = 1'b1;
    end else begin
        this_mt_even_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln619_fu_140_p1 == 1'd0) & (icmp_ln619_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_even_0_we0 = 1'b1;
    end else begin
        this_mt_even_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_even_1_ce0 = 1'b1;
    end else begin
        this_mt_even_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln619_fu_140_p1 == 1'd0) & (icmp_ln619_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_even_1_we0 = 1'b1;
    end else begin
        this_mt_even_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_odd_0_ce0 = 1'b1;
    end else begin
        this_mt_odd_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln619_fu_140_p1 == 1'd1) & (icmp_ln619_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_odd_0_we0 = 1'b1;
    end else begin
        this_mt_odd_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_odd_1_ce0 = 1'b1;
    end else begin
        this_mt_odd_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln619_fu_140_p1 == 1'd1) & (icmp_ln619_fu_131_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_mt_odd_1_we0 = 1'b1;
    end else begin
        this_mt_odd_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_V_fu_202_p2 = (p_Val2_s_fu_52 + 10'd1);

assign icmp_ln619_fu_131_p2 = ((p_Val2_s_fu_52 == 10'd624) ? 1'b1 : 1'b0);

assign mt_reg_V_fu_174_p2 = (ret_fu_164_p2 + zext_ln223_fu_170_p1);

assign r_1_fu_184_p4 = {{p_Val2_s_fu_52[9:1]}};

assign r_fu_144_p4 = {{lhs_V_fu_48[31:30]}};

assign ret_fu_164_p0 = (zext_ln1691_fu_154_p1 ^ lhs_V_fu_48);

assign this_mt_even_0_address0 = zext_ln587_fu_194_p1;

assign this_mt_even_0_d0 = mt_reg_V_fu_174_p2;

assign this_mt_even_1_address0 = zext_ln587_fu_194_p1;

assign this_mt_even_1_d0 = mt_reg_V_fu_174_p2;

assign this_mt_odd_0_address0 = zext_ln587_fu_194_p1;

assign this_mt_odd_0_d0 = mt_reg_V_fu_174_p2;

assign this_mt_odd_1_address0 = zext_ln587_fu_194_p1;

assign this_mt_odd_1_d0 = mt_reg_V_fu_174_p2;

assign trunc_ln619_fu_140_p1 = p_Val2_s_fu_52[0:0];

assign zext_ln1691_fu_154_p1 = r_fu_144_p4;

assign zext_ln223_fu_170_p1 = p_Val2_s_fu_52;

assign zext_ln587_fu_194_p1 = r_1_fu_184_p4;

assign zext_ln610_cast_fu_114_p1 = zext_ln610;

endmodule //TOP_seedInitialization_Pipeline_SEED_INIT_LOOP
