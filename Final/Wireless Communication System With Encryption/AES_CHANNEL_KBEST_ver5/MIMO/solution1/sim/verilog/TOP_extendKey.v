// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module TOP_extendKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        key_address1,
        key_ce1,
        key_q1,
        w_address0,
        w_ce0,
        w_we0,
        w_d0,
        w_q0,
        w_address1,
        w_ce1,
        w_we1,
        w_d1,
        w_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
output  [3:0] key_address1;
output   key_ce1;
input  [7:0] key_q1;
output  [5:0] w_address0;
output   w_ce0;
output   w_we0;
output  [31:0] w_d0;
input  [31:0] w_q0;
output  [5:0] w_address1;
output   w_ce1;
output   w_we1;
output  [31:0] w_d1;
input  [31:0] w_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] w_address0;
reg w_ce0;
reg w_we0;
reg[31:0] w_d0;
reg w_ce1;
reg w_we1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_done;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_idle;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_ready;
wire   [3:0] grp_extendKey_Pipeline_extendKey_label5_fu_12_key_address0;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_key_ce0;
wire   [3:0] grp_extendKey_Pipeline_extendKey_label5_fu_12_key_address1;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_key_ce1;
wire   [5:0] grp_extendKey_Pipeline_extendKey_label5_fu_12_w_address0;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_w_ce0;
wire    grp_extendKey_Pipeline_extendKey_label5_fu_12_w_we0;
wire   [31:0] grp_extendKey_Pipeline_extendKey_label5_fu_12_w_d0;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_done;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_idle;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_ready;
wire   [5:0] grp_extendKey_Pipeline_extendKey_label0_fu_20_w_address0;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_w_ce0;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_w_we0;
wire   [31:0] grp_extendKey_Pipeline_extendKey_label0_fu_20_w_d0;
wire   [5:0] grp_extendKey_Pipeline_extendKey_label0_fu_20_w_address1;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_w_ce1;
wire    grp_extendKey_Pipeline_extendKey_label0_fu_20_w_we1;
wire   [31:0] grp_extendKey_Pipeline_extendKey_label0_fu_20_w_d1;
reg    grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start_reg = 1'b0;
#0 grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start_reg = 1'b0;
end

TOP_extendKey_Pipeline_extendKey_label5 grp_extendKey_Pipeline_extendKey_label5_fu_12(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start),
    .ap_done(grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_done),
    .ap_idle(grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_idle),
    .ap_ready(grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_ready),
    .key_address0(grp_extendKey_Pipeline_extendKey_label5_fu_12_key_address0),
    .key_ce0(grp_extendKey_Pipeline_extendKey_label5_fu_12_key_ce0),
    .key_q0(key_q0),
    .key_address1(grp_extendKey_Pipeline_extendKey_label5_fu_12_key_address1),
    .key_ce1(grp_extendKey_Pipeline_extendKey_label5_fu_12_key_ce1),
    .key_q1(key_q1),
    .w_address0(grp_extendKey_Pipeline_extendKey_label5_fu_12_w_address0),
    .w_ce0(grp_extendKey_Pipeline_extendKey_label5_fu_12_w_ce0),
    .w_we0(grp_extendKey_Pipeline_extendKey_label5_fu_12_w_we0),
    .w_d0(grp_extendKey_Pipeline_extendKey_label5_fu_12_w_d0)
);

TOP_extendKey_Pipeline_extendKey_label0 grp_extendKey_Pipeline_extendKey_label0_fu_20(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start),
    .ap_done(grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_done),
    .ap_idle(grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_idle),
    .ap_ready(grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_ready),
    .w_address0(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_address0),
    .w_ce0(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_ce0),
    .w_we0(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_we0),
    .w_d0(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_d0),
    .w_q0(w_q0),
    .w_address1(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_address1),
    .w_ce1(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_ce1),
    .w_we1(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_we1),
    .w_d1(grp_extendKey_Pipeline_extendKey_label0_fu_20_w_d1),
    .w_q1(w_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start_reg <= 1'b1;
        end else if ((grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_ready == 1'b1)) begin
            grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start_reg <= 1'b1;
        end else if ((grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_ready == 1'b1)) begin
            grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_address0 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_address0 = grp_extendKey_Pipeline_extendKey_label5_fu_12_w_address0;
    end else begin
        w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_ce0 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_ce0 = grp_extendKey_Pipeline_extendKey_label5_fu_12_w_ce0;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_ce1 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_ce1;
    end else begin
        w_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_d0 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_d0 = grp_extendKey_Pipeline_extendKey_label5_fu_12_w_d0;
    end else begin
        w_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_we0 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        w_we0 = grp_extendKey_Pipeline_extendKey_label5_fu_12_w_we0;
    end else begin
        w_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w_we1 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_we1;
    end else begin
        w_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

assign grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start = grp_extendKey_Pipeline_extendKey_label0_fu_20_ap_start_reg;

assign grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start = grp_extendKey_Pipeline_extendKey_label5_fu_12_ap_start_reg;

assign key_address0 = grp_extendKey_Pipeline_extendKey_label5_fu_12_key_address0;

assign key_address1 = grp_extendKey_Pipeline_extendKey_label5_fu_12_key_address1;

assign key_ce0 = grp_extendKey_Pipeline_extendKey_label5_fu_12_key_ce0;

assign key_ce1 = grp_extendKey_Pipeline_extendKey_label5_fu_12_key_ce1;

assign w_address1 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_address1;

assign w_d1 = grp_extendKey_Pipeline_extendKey_label0_fu_20_w_d1;

endmodule //TOP_extendKey
