-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream8x2 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst1_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst1_TVALID : OUT STD_LOGIC;
    dst1_TREADY : IN STD_LOGIC;
    dst1_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst1_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst1_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst1_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst1_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst1_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst2_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst2_TVALID : OUT STD_LOGIC;
    dst2_TREADY : IN STD_LOGIC;
    dst2_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst2_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst2_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst2_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst2_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst2_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of stream8x2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stream8x2_stream8x2,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.552000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=180,HLS_SYN_LUT=288,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal recv : STD_LOGIC_VECTOR (31 downto 0);
    signal recv_ap_vld : STD_LOGIC;
    signal send : STD_LOGIC_VECTOR (31 downto 0);
    signal send_ap_vld : STD_LOGIC;
    signal recv_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal send_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dst1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_vld_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst2_TDATA_blk_n : STD_LOGIC;
    signal add_ln21_fu_218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal add_ln24_fu_235_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_nbread_fu_86_p8_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal regslice_both_dst1_V_data_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal regslice_both_src_V_data_V_U_apdone_blk : STD_LOGIC;
    signal src_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal src_TVALID_int_regslice : STD_LOGIC;
    signal src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal src_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal src_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_apdone_blk : STD_LOGIC;
    signal src_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_apdone_blk : STD_LOGIC;
    signal src_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_apdone_blk : STD_LOGIC;
    signal src_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal src_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_ack_in : STD_LOGIC;
    signal dst1_TVALID_int_regslice : STD_LOGIC;
    signal dst1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dst1_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst1_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst1_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst1_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst1_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst1_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst1_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst1_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst1_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst1_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst1_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst1_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst1_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst1_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst1_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst1_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst1_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst1_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst1_V_dest_V_U_vld_out : STD_LOGIC;
    signal dst2_TVALID_int_regslice : STD_LOGIC;
    signal dst2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dst2_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst2_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst2_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst2_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst2_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst2_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst2_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst2_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst2_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst2_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst2_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_dst2_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_dst2_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_dst2_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stream8x2_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        recv : IN STD_LOGIC_VECTOR (31 downto 0);
        recv_ap_vld : IN STD_LOGIC;
        send : IN STD_LOGIC_VECTOR (31 downto 0);
        send_ap_vld : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component stream8x2_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component stream8x2_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        recv => recv,
        recv_ap_vld => recv_ap_vld,
        send => send,
        send_ap_vld => send_ap_vld,
        ap_local_deadlock => ap_local_deadlock);

    regslice_both_src_V_data_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDATA,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_data_V_U_ack_in,
        data_out => src_TDATA_int_regslice,
        vld_out => src_TVALID_int_regslice,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_data_V_U_apdone_blk);

    regslice_both_src_V_keep_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TKEEP,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_keep_V_U_ack_in,
        data_out => src_TKEEP_int_regslice,
        vld_out => regslice_both_src_V_keep_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_keep_V_U_apdone_blk);

    regslice_both_src_V_strb_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TSTRB,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_strb_V_U_ack_in,
        data_out => src_TSTRB_int_regslice,
        vld_out => regslice_both_src_V_strb_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_strb_V_U_apdone_blk);

    regslice_both_src_V_user_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TUSER,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_user_V_U_ack_in,
        data_out => src_TUSER_int_regslice,
        vld_out => regslice_both_src_V_user_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_user_V_U_apdone_blk);

    regslice_both_src_V_last_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TLAST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_last_V_U_ack_in,
        data_out => src_TLAST_int_regslice,
        vld_out => regslice_both_src_V_last_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_last_V_U_apdone_blk);

    regslice_both_src_V_id_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TID,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_id_V_U_ack_in,
        data_out => src_TID_int_regslice,
        vld_out => regslice_both_src_V_id_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_id_V_U_apdone_blk);

    regslice_both_src_V_dest_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDEST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_dest_V_U_ack_in,
        data_out => src_TDEST_int_regslice,
        vld_out => regslice_both_src_V_dest_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_dest_V_U_apdone_blk);

    regslice_both_dst1_V_data_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDATA_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => dst1_TREADY_int_regslice,
        data_out => dst1_TDATA,
        vld_out => regslice_both_dst1_V_data_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_data_V_U_apdone_blk);

    regslice_both_dst1_V_keep_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TKEEP_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => regslice_both_dst1_V_keep_V_U_ack_in_dummy,
        data_out => dst1_TKEEP,
        vld_out => regslice_both_dst1_V_keep_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_keep_V_U_apdone_blk);

    regslice_both_dst1_V_strb_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TSTRB_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => regslice_both_dst1_V_strb_V_U_ack_in_dummy,
        data_out => dst1_TSTRB,
        vld_out => regslice_both_dst1_V_strb_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_strb_V_U_apdone_blk);

    regslice_both_dst1_V_user_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TUSER_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => regslice_both_dst1_V_user_V_U_ack_in_dummy,
        data_out => dst1_TUSER,
        vld_out => regslice_both_dst1_V_user_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_user_V_U_apdone_blk);

    regslice_both_dst1_V_last_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TLAST_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => regslice_both_dst1_V_last_V_U_ack_in_dummy,
        data_out => dst1_TLAST,
        vld_out => regslice_both_dst1_V_last_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_last_V_U_apdone_blk);

    regslice_both_dst1_V_id_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TID_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => regslice_both_dst1_V_id_V_U_ack_in_dummy,
        data_out => dst1_TID,
        vld_out => regslice_both_dst1_V_id_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_id_V_U_apdone_blk);

    regslice_both_dst1_V_dest_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDEST_int_regslice,
        vld_in => dst1_TVALID_int_regslice,
        ack_in => regslice_both_dst1_V_dest_V_U_ack_in_dummy,
        data_out => dst1_TDEST,
        vld_out => regslice_both_dst1_V_dest_V_U_vld_out,
        ack_out => dst1_TREADY,
        apdone_blk => regslice_both_dst1_V_dest_V_U_apdone_blk);

    regslice_both_dst2_V_data_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDATA_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => dst2_TREADY_int_regslice,
        data_out => dst2_TDATA,
        vld_out => regslice_both_dst2_V_data_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_data_V_U_apdone_blk);

    regslice_both_dst2_V_keep_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TKEEP_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => regslice_both_dst2_V_keep_V_U_ack_in_dummy,
        data_out => dst2_TKEEP,
        vld_out => regslice_both_dst2_V_keep_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_keep_V_U_apdone_blk);

    regslice_both_dst2_V_strb_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TSTRB_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => regslice_both_dst2_V_strb_V_U_ack_in_dummy,
        data_out => dst2_TSTRB,
        vld_out => regslice_both_dst2_V_strb_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_strb_V_U_apdone_blk);

    regslice_both_dst2_V_user_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TUSER_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => regslice_both_dst2_V_user_V_U_ack_in_dummy,
        data_out => dst2_TUSER,
        vld_out => regslice_both_dst2_V_user_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_user_V_U_apdone_blk);

    regslice_both_dst2_V_last_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TLAST_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => regslice_both_dst2_V_last_V_U_ack_in_dummy,
        data_out => dst2_TLAST,
        vld_out => regslice_both_dst2_V_last_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_last_V_U_apdone_blk);

    regslice_both_dst2_V_id_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TID_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => regslice_both_dst2_V_id_V_U_ack_in_dummy,
        data_out => dst2_TID,
        vld_out => regslice_both_dst2_V_id_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_id_V_U_apdone_blk);

    regslice_both_dst2_V_dest_V_U : component stream8x2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => src_TDEST_int_regslice,
        vld_in => dst2_TVALID_int_regslice,
        ack_in => regslice_both_dst2_V_dest_V_U_ack_in_dummy,
        data_out => dst2_TDEST,
        vld_out => regslice_both_dst2_V_dest_V_U_vld_out,
        ack_out => dst2_TREADY,
        apdone_blk => regslice_both_dst2_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_vld_reg_248 <= empty_nbread_fu_86_p8_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1))) then
                recv_reg <= add_ln21_fu_218_p2;
                send_reg <= add_ln24_fu_235_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, p_vld_reg_248, ap_block_state1_io, empty_nbread_fu_86_p8_0, regslice_both_dst1_V_data_V_U_apdone_blk, regslice_both_dst2_V_data_V_U_apdone_blk, ap_block_state2_io, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_dst2_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_dst1_V_data_V_U_apdone_blk = ap_const_logic_1) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln21_fu_218_p2 <= std_logic_vector(unsigned(recv_reg) + unsigned(ap_const_lv32_1));
    add_ln24_fu_235_p2 <= std_logic_vector(unsigned(send_reg) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_io, empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(p_vld_reg_248, regslice_both_dst1_V_data_V_U_apdone_blk, regslice_both_dst2_V_data_V_U_apdone_blk, ap_block_state2_io, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state2_io) or (regslice_both_dst2_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_dst1_V_data_V_U_apdone_blk = ap_const_logic_1) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
                ap_block_state1 <= (((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_io_assign_proc : process(empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
                ap_block_state1_io <= (((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_assign_proc : process(p_vld_reg_248, regslice_both_dst1_V_data_V_U_apdone_blk, regslice_both_dst2_V_data_V_U_apdone_blk, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
                ap_block_state2 <= ((regslice_both_dst2_V_data_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_dst1_V_data_V_U_apdone_blk = ap_const_logic_1) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(p_vld_reg_248, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
                ap_block_state2_io <= (((p_vld_reg_248 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((p_vld_reg_248 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)));
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    dst1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, p_vld_reg_248, empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice)
    begin
        if ((((p_vld_reg_248 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1)))) then 
            dst1_TDATA_blk_n <= dst1_TREADY_int_regslice;
        else 
            dst1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst1_TVALID <= regslice_both_dst1_V_data_V_U_vld_out;

    dst1_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_io, empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1))) then 
            dst1_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dst1_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    dst2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, p_vld_reg_248, empty_nbread_fu_86_p8_0, dst2_TREADY_int_regslice)
    begin
        if ((((p_vld_reg_248 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1)))) then 
            dst2_TDATA_blk_n <= dst2_TREADY_int_regslice;
        else 
            dst2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst2_TVALID <= regslice_both_dst2_V_data_V_U_vld_out;

    dst2_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_io, empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1))) then 
            dst2_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dst2_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    empty_nbread_fu_86_p8_0 <= (0=>(src_TVALID_int_regslice), others=>'-');
    recv <= std_logic_vector(unsigned(recv_reg) + unsigned(ap_const_lv32_1));

    recv_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_io, empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1))) then 
            recv_ap_vld <= ap_const_logic_1;
        else 
            recv_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    send <= std_logic_vector(unsigned(send_reg) + unsigned(ap_const_lv32_1));

    send_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_io, empty_nbread_fu_86_p8_0, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (empty_nbread_fu_86_p8_0 = ap_const_lv1_1))) then 
            send_ap_vld <= ap_const_logic_1;
        else 
            send_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    src_TREADY <= regslice_both_src_V_data_V_U_ack_in;

    src_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_io, empty_nbread_fu_86_p8_0, src_TVALID_int_regslice, dst1_TREADY_int_regslice, dst2_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state1_io) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst2_TREADY_int_regslice = ap_const_logic_0)) or ((empty_nbread_fu_86_p8_0 = ap_const_lv1_1) and (dst1_TREADY_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (src_TVALID_int_regslice = ap_const_logic_1))) then 
            src_TREADY_int_regslice <= ap_const_logic_1;
        else 
            src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

end behav;
