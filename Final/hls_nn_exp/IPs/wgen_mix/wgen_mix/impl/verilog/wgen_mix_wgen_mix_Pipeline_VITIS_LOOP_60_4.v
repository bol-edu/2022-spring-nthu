// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module wgen_mix_wgen_mix_Pipeline_VITIS_LOOP_60_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        word_TVALID,
        wrecv_n_local_load,
        word_TDATA,
        word_TREADY,
        word_TKEEP,
        word_TSTRB,
        word_TUSER,
        word_TLAST,
        word_TID,
        word_TDEST,
        add_ln62_out,
        add_ln62_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   word_TVALID;
input  [31:0] wrecv_n_local_load;
input  [23:0] word_TDATA;
output   word_TREADY;
input  [2:0] word_TKEEP;
input  [2:0] word_TSTRB;
input  [0:0] word_TUSER;
input  [0:0] word_TLAST;
input  [0:0] word_TID;
input  [0:0] word_TDEST;
output  [31:0] add_ln62_out;
output   add_ln62_out_ap_vld;

reg ap_idle;
reg word_TREADY;
reg add_ln62_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_last_V_fu_89_p1;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    word_TDATA_blk_n;
reg   [31:0] inc26169_fu_46;
wire   [31:0] add_ln62_fu_93_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_inc26169_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_103;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

wgen_mix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_103)) begin
        if ((tmp_last_V_fu_89_p1 == 1'd0)) begin
            inc26169_fu_46 <= add_ln62_fu_93_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inc26169_fu_46 <= wrecv_n_local_load;
        end
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (tmp_last_V_fu_89_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln62_out_ap_vld = 1'b1;
    end else begin
        add_ln62_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | (word_TVALID == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (tmp_last_V_fu_89_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_inc26169_load = wrecv_n_local_load;
    end else begin
        ap_sig_allocacmp_inc26169_load = inc26169_fu_46;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        word_TDATA_blk_n = word_TVALID;
    end else begin
        word_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        word_TREADY = 1'b1;
    end else begin
        word_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_fu_93_p2 = (ap_sig_allocacmp_inc26169_load + 32'd1);

assign add_ln62_out = (ap_sig_allocacmp_inc26169_load + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | (word_TVALID == 1'b0));
end

always @ (*) begin
    ap_condition_103 = (~((ap_start_int == 1'b0) | (word_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign tmp_last_V_fu_89_p1 = word_TLAST;

endmodule //wgen_mix_wgen_mix_Pipeline_VITIS_LOOP_60_4
