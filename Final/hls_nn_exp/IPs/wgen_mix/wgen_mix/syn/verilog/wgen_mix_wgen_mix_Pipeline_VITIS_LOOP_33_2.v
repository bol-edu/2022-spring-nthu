// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module wgen_mix_wgen_mix_Pipeline_VITIS_LOOP_33_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_TVALID,
        word_TVALID,
        dst_TREADY,
        cols,
        sub13,
        cmp12,
        dst_TDATA,
        dst_TVALID,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        src_TDATA,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        cmp5,
        word_TDATA,
        word_TREADY,
        word_TKEEP,
        word_TSTRB,
        word_TUSER,
        word_TLAST,
        word_TID,
        word_TDEST,
        wrecv,
        wrecv_ap_vld,
        word_row_usage_out,
        word_row_usage_out_ap_vld,
        wrecv_n_local_i,
        wrecv_n_local_o,
        wrecv_n_local_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   src_TVALID;
input   word_TVALID;
input   dst_TREADY;
input  [30:0] cols;
input  [30:0] sub13;
input  [0:0] cmp12;
output  [23:0] dst_TDATA;
output   dst_TVALID;
output  [2:0] dst_TKEEP;
output  [2:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input  [23:0] src_TDATA;
output   src_TREADY;
input  [2:0] src_TKEEP;
input  [2:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
input  [0:0] cmp5;
input  [23:0] word_TDATA;
output   word_TREADY;
input  [2:0] word_TKEEP;
input  [2:0] word_TSTRB;
input  [0:0] word_TUSER;
input  [0:0] word_TLAST;
input  [0:0] word_TID;
input  [0:0] word_TDEST;
output  [31:0] wrecv;
output   wrecv_ap_vld;
output  [31:0] word_row_usage_out;
output   word_row_usage_out_ap_vld;
input  [31:0] wrecv_n_local_i;
output  [31:0] wrecv_n_local_o;
output   wrecv_n_local_o_ap_vld;

reg ap_idle;
reg dst_TVALID;
reg src_TREADY;
reg word_TREADY;
reg wrecv_ap_vld;
reg word_row_usage_out_ap_vld;
reg[31:0] wrecv_n_local_o;
reg wrecv_n_local_o_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln33_fu_241_p2;
wire   [0:0] and_ln39_fu_262_p2;
reg    ap_predicate_op36_read_state2;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    dst_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    src_TDATA_blk_n;
reg    word_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] pkg_last_V_fu_307_p2;
reg   [0:0] pkg_last_V_reg_374;
wire   [23:0] ap_phi_reg_pp0_iter0_pkg_data_V_3_reg_218;
reg   [23:0] ap_phi_reg_pp0_iter1_pkg_data_V_3_reg_218;
reg   [23:0] ap_phi_reg_pp0_iter2_pkg_data_V_3_reg_218;
wire   [31:0] add_ln43_fu_284_p2;
reg   [30:0] j_fu_106;
wire   [30:0] j_5_fu_246_p2;
wire    ap_loop_init;
reg   [31:0] word_row_usage_fu_110;
wire   [31:0] word_row_usage_1_fu_274_p2;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln39_fu_256_p2;
wire   [0:0] icmp_ln45_fu_302_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_148;
reg    ap_condition_288;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

wgen_mix_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_148)) begin
        if (((1'd0 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_pkg_data_V_3_reg_218 <= src_TDATA;
        end else if (((1'd1 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_pkg_data_V_3_reg_218 <= word_TDATA;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_pkg_data_V_3_reg_218 <= ap_phi_reg_pp0_iter1_pkg_data_V_3_reg_218;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_106 <= 31'd0;
        end else if (((icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_106 <= j_5_fu_246_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            word_row_usage_fu_110 <= 32'd0;
        end else if ((1'b1 == ap_condition_288)) begin
            word_row_usage_fu_110 <= word_row_usage_1_fu_274_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_pkg_data_V_3_reg_218 <= ap_phi_reg_pp0_iter0_pkg_data_V_3_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pkg_last_V_reg_374 <= pkg_last_V_fu_307_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln33_fu_241_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dst_TDATA_blk_n = dst_TREADY;
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dst_TVALID = 1'b1;
    end else begin
        dst_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TDATA_blk_n = src_TVALID;
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TREADY = 1'b1;
    end else begin
        src_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op36_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        word_TDATA_blk_n = word_TVALID;
    end else begin
        word_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op36_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        word_TREADY = 1'b1;
    end else begin
        word_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln33_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        word_row_usage_out_ap_vld = 1'b1;
    end else begin
        word_row_usage_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wrecv_ap_vld = 1'b1;
    end else begin
        wrecv_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wrecv_n_local_o = add_ln43_fu_284_p2;
    end else begin
        wrecv_n_local_o = wrecv_n_local_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wrecv_n_local_o_ap_vld = 1'b1;
    end else begin
        wrecv_n_local_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln43_fu_284_p2 = (wrecv_n_local_i + 32'd1);

assign and_ln39_fu_262_p2 = (icmp_ln39_fu_256_p2 & cmp5);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op36_read_state2 == 1'b1) & (word_TVALID == 1'b0)) | ((icmp_ln33_fu_241_p2 == 1'd0) & (src_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op36_read_state2 == 1'b1) & (word_TVALID == 1'b0)) | ((icmp_ln33_fu_241_p2 == 1'd0) & (src_TVALID == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((dst_TREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_predicate_op36_read_state2 == 1'b1) & (word_TVALID == 1'b0)) | ((icmp_ln33_fu_241_p2 == 1'd0) & (src_TVALID == 1'b0)))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((ap_predicate_op36_read_state2 == 1'b1) & (word_TVALID == 1'b0)) | ((icmp_ln33_fu_241_p2 == 1'd0) & (src_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (dst_TREADY == 1'b0);
end

always @ (*) begin
    ap_condition_148 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_288 = ((1'd1 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_pkg_data_V_3_reg_218 = 'bx;

always @ (*) begin
    ap_predicate_op36_read_state2 = ((1'd1 == and_ln39_fu_262_p2) & (icmp_ln33_fu_241_p2 == 1'd0));
end

assign dst_TDATA = ap_phi_reg_pp0_iter2_pkg_data_V_3_reg_218;

assign dst_TDEST = 1'd0;

assign dst_TID = 1'd0;

assign dst_TKEEP = 3'd7;

assign dst_TLAST = pkg_last_V_reg_374;

assign dst_TSTRB = 3'd7;

assign dst_TUSER = 1'd0;

assign icmp_ln33_fu_241_p2 = ((j_fu_106 == cols) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_256_p2 = ((j_fu_106 < 31'd207) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_302_p2 = ((j_fu_106 == sub13) ? 1'b1 : 1'b0);

assign j_5_fu_246_p2 = (j_fu_106 + 31'd1);

assign pkg_last_V_fu_307_p2 = (icmp_ln45_fu_302_p2 & cmp12);

assign word_row_usage_1_fu_274_p2 = (word_row_usage_fu_110 + 32'd1);

assign word_row_usage_out = word_row_usage_fu_110;

assign wrecv = (wrecv_n_local_i + 32'd1);

endmodule //wgen_mix_wgen_mix_Pipeline_VITIS_LOOP_33_2
