-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity resize_accel_axis2xfMat_24_9_2160_3840_1_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    src_mat_420_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    src_mat_420_full_n : IN STD_LOGIC;
    src_mat_420_write : OUT STD_LOGIC;
    src_mat_rows_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    src_mat_rows_c_full_n : IN STD_LOGIC;
    src_mat_rows_c_write : OUT STD_LOGIC;
    src_mat_cols_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    src_mat_cols_c_full_n : IN STD_LOGIC;
    src_mat_cols_c_write : OUT STD_LOGIC );
end;


architecture behav of resize_accel_axis2xfMat_24_9_2160_3840_1_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_mat_rows_c_blk_n : STD_LOGIC;
    signal src_mat_cols_c_blk_n : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_done : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_idle : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_ready : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_din : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_write : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_TREADY : STD_LOGIC;
    signal grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln45_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_70 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_5_fu_140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln45_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_apdone_blk : STD_LOGIC;
    signal src_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal src_TVALID_int_regslice : STD_LOGIC;
    signal src_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_src_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal src_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_src_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal src_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_src_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_apdone_blk : STD_LOGIC;
    signal src_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_apdone_blk : STD_LOGIC;
    signal src_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_apdone_blk : STD_LOGIC;
    signal src_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal src_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_src_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_src_V_dest_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component resize_accel_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_TVALID : IN STD_LOGIC;
        src_mat_420_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        src_mat_420_full_n : IN STD_LOGIC;
        src_mat_420_write : OUT STD_LOGIC;
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        src_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        src_TREADY : OUT STD_LOGIC;
        src_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        src_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component resize_accel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102 : component resize_accel_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start,
        ap_done => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_done,
        ap_idle => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_idle,
        ap_ready => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_ready,
        src_TVALID => src_TVALID_int_regslice,
        src_mat_420_din => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_din,
        src_mat_420_full_n => src_mat_420_full_n,
        src_mat_420_write => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_write,
        p_read1 => p_read1,
        src_TDATA => src_TDATA_int_regslice,
        src_TREADY => grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_TREADY,
        src_TKEEP => src_TKEEP_int_regslice,
        src_TSTRB => src_TSTRB_int_regslice,
        src_TUSER => src_TUSER_int_regslice,
        src_TLAST => src_TLAST_int_regslice,
        src_TID => src_TID_int_regslice,
        src_TDEST => src_TDEST_int_regslice);

    regslice_both_src_V_data_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TDATA,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_data_V_U_ack_in,
        data_out => src_TDATA_int_regslice,
        vld_out => src_TVALID_int_regslice,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_data_V_U_apdone_blk);

    regslice_both_src_V_keep_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TKEEP,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_keep_V_U_ack_in,
        data_out => src_TKEEP_int_regslice,
        vld_out => regslice_both_src_V_keep_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_keep_V_U_apdone_blk);

    regslice_both_src_V_strb_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TSTRB,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_strb_V_U_ack_in,
        data_out => src_TSTRB_int_regslice,
        vld_out => regslice_both_src_V_strb_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_strb_V_U_apdone_blk);

    regslice_both_src_V_user_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TUSER,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_user_V_U_ack_in,
        data_out => src_TUSER_int_regslice,
        vld_out => regslice_both_src_V_user_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_user_V_U_apdone_blk);

    regslice_both_src_V_last_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TLAST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_last_V_U_ack_in,
        data_out => src_TLAST_int_regslice,
        vld_out => regslice_both_src_V_last_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_last_V_U_apdone_blk);

    regslice_both_src_V_id_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TID,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_id_V_U_ack_in,
        data_out => src_TID_int_regslice,
        vld_out => regslice_both_src_V_id_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_id_V_U_apdone_blk);

    regslice_both_src_V_dest_V_U : component resize_accel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => src_TDEST,
        vld_in => src_TVALID,
        ack_in => regslice_both_src_V_dest_V_U_ack_in,
        data_out => src_TDEST_int_regslice,
        vld_out => regslice_both_src_V_dest_V_U_vld_out,
        ack_out => src_TREADY_int_regslice,
        apdone_blk => regslice_both_src_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln45_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln45_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (src_mat_cols_c_full_n = ap_const_logic_0) or (src_mat_rows_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_70 <= ap_const_lv12_0;
            elsif (((icmp_ln45_fu_135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_70 <= i_5_fu_140_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_mat_rows_c_full_n, src_mat_cols_c_full_n, grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_done, ap_CS_fsm_state2, icmp_ln45_fu_135_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (src_mat_cols_c_full_n = ap_const_logic_0) or (src_mat_rows_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln45_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, src_mat_rows_c_full_n, src_mat_cols_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (src_mat_cols_c_full_n = ap_const_logic_0) or (src_mat_rows_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_done)
    begin
        if ((grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, src_mat_rows_c_full_n, src_mat_cols_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (src_mat_cols_c_full_n = ap_const_logic_0) or (src_mat_rows_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln45_fu_135_p2)
    begin
        if (((icmp_ln45_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln45_fu_135_p2)
    begin
        if (((icmp_ln45_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start <= grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_ap_start_reg;
    i_5_fu_140_p2 <= std_logic_vector(unsigned(i_fu_70) + unsigned(ap_const_lv12_1));
    icmp_ln45_fu_135_p2 <= "1" when (signed(zext_ln45_fu_131_p1) < signed(p_read)) else "0";
    src_TREADY <= regslice_both_src_V_data_V_U_ack_in;

    src_TREADY_int_regslice_assign_proc : process(grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_TREADY_int_regslice <= grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_TREADY;
        else 
            src_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    src_mat_420_din <= grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_din;

    src_mat_420_write_assign_proc : process(grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_mat_420_write <= grp_axis2xfMat_24_9_2160_3840_1_Pipeline_loop_col_zxi2mat_fu_102_src_mat_420_write;
        else 
            src_mat_420_write <= ap_const_logic_0;
        end if; 
    end process;


    src_mat_cols_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_mat_cols_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_mat_cols_c_blk_n <= src_mat_cols_c_full_n;
        else 
            src_mat_cols_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_mat_cols_c_din <= p_read1;

    src_mat_cols_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_mat_rows_c_full_n, src_mat_cols_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src_mat_cols_c_full_n = ap_const_logic_0) or (src_mat_rows_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_mat_cols_c_write <= ap_const_logic_1;
        else 
            src_mat_cols_c_write <= ap_const_logic_0;
        end if; 
    end process;


    src_mat_rows_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_mat_rows_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_mat_rows_c_blk_n <= src_mat_rows_c_full_n;
        else 
            src_mat_rows_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_mat_rows_c_din <= p_read;

    src_mat_rows_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, src_mat_rows_c_full_n, src_mat_cols_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (src_mat_cols_c_full_n = ap_const_logic_0) or (src_mat_rows_c_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            src_mat_rows_c_write <= ap_const_logic_1;
        else 
            src_mat_rows_c_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln45_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_70),32));
end behav;
