/// @author    Johannes de Fine Licht (definelicht@inf.ethz.ch)
/// @copyright This software is copyrighted under the BSD 3-Clause License. 

#pragma once

#include <cstddef>
#include <cstdint>
#ifdef MM_HALF_PRECISION
#include "hls_half.h"
#endif
#include "hlslib/xilinx/Operators.h"

using uint8_t = unsigned char;

using Data_t = ${MM_DATA_TYPE}; 
constexpr int kMemoryWidthBytesN = ${MM_MEMORY_BUS_WIDTH_N};
constexpr int kMemoryWidthBytesK = ${MM_MEMORY_BUS_WIDTH_K};
constexpr int kMemoryWidthBytesM = ${MM_MEMORY_BUS_WIDTH_M};
#ifndef MM_DYNAMIC_SIZES
constexpr unsigned long kSizeN = ${MM_SIZE_N};
constexpr unsigned long kSizeK = ${MM_SIZE_K};
constexpr unsigned long kSizeM = ${MM_SIZE_M};
#endif
constexpr unsigned long kOuterTileSizeN = ${MM_MEMORY_TILE_SIZE_N};
constexpr unsigned long kOuterTileSizeM = ${MM_MEMORY_TILE_SIZE_M};
constexpr unsigned long kInnerTileSizeN = ${MM_PARALLELISM_N};
constexpr int kComputeTileSizeM = ${MM_PARALLELISM_M};
// constexpr int kComputeTileSizeN = ${MM_GRANULARITY_N}; // NYI
constexpr int kComputeTileSizeN = 1;
constexpr int kTransposeWidthBytes = ${MM_TRANSPOSE_WIDTH};
constexpr float kFrequency = ${MM_CLOCK_INTERNAL};
constexpr auto kGoldenDir = "${MM_GOLDEN_DIR}"; 

using OperatorMap = hlslib::op::${MM_MAP_OP}<Data_t>;
using OperatorReduce = hlslib::op::${MM_REDUCE_OP}<Data_t>;

#if ${MM_MEMORY_BUS_WIDTH_M} != ${MM_KERNEL_WIDTH_M} 
  #define MM_CONVERT_B
#endif

// When A is not transposed, the data width must be converted if a PE buffers
// more than one row of A (currently unsupported). When A is transposed, the
// data width must be converted if the memory bus is wider than the number of
// rows buffered per PE.
#if (defined(MM_TRANSPOSED_A) && \
     (${MM_DATA_WIDTH_${MM_DATA_TYPE}} != ${MM_MEMORY_BUS_WIDTH_N}))
#define MM_CONVERT_A
#endif
